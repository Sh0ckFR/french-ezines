<html>
<head>
<title>KeygenMe par SyntaxError // ECLiPSE</title>
<meta name="generator" content="Namo WebEditor v5.0">
<meta name="author" content="jB">
<link rel="stylesheet" type="text/css" href="../../style.css">
</head>
<body>
<h2 align="center"><font face="Lucida Console"><b>KeygenMe par SyntaxError // ECLiPSE</b></font></h2>
<p><b>Type de protection :</b> name / serial<br><b>Difficult&eacute; :</b>
relativement simple<br><b>Outils utilisés :</b>
<ul><li>OllyDbg v1.09c</li>
<li>TASM v5.0</li>
<li>CryptTool v1.2</li>
<li>UPX v1.24w</li></ul>
<b>R&eacute;f&eacute;rences :</b>
<ul><li><a href="http://www.cacr.math.uwaterloo.ca/hac/" target="_blank">Handbook 
of Applied Cryptography</a></li>
<li><a href="http://www.ftp.cl.cam.ac.uk/ftp/papers/djw-rmn/djw-rmn-tea.html" target="_blank">TEA, 
a Tiny Encryption Algorithm</a></li></ul>
<b>Fichiers joints :</b>
<ul><li><a href="KeygenMe.exe">KeygenMe</a></li>
<li><a href="SyntaxError%20Keygenme-keygen.zip">keygen + source</a></li></ul></p>
<p>Ce KeygenMe est très intéressant pour commencer 
un peu la crypto. Il utilise des algorithmes connus. Le deuxième algorithme 
est légèrement modifié, mais ça ne le rend pas plus difficile à reverser pour 
autant.</p>
<p>Le programme est packé avec UPX. Pour l'unpacker, 
on tape simplement :<br><font face="Courant">upx -d KeygenMe.exe</font> 
et on obtient l'exe original, non compressé.<br></p>
<p>On ouvre le KeygenMe avec Olly, et on  
jette un coup d'oeil rapide au listing (c'est assez court).<br>On trouve très 
facilement la routine qui va récupérer le nom et le serial. On pose donc un 
breakpoint à l'entrée de la routine, en .401B71 :</p>
<p class="image"><img src="images/1.jpg" width="602" height="182" border="0"></p>
<p>On remarque déjà l'appel à deux routines 
qui peuvent être très intéressantes : l'une en .401D90 et l'autre en &nbsp;.401C70.<br>Le 
premier appel à GetDlgItemTextA récupère le serial, et le copie en .406D00.<br>Le 
second appel récupère le nom, et le copie en .40603C.</p>
<pre>cmp    eax, 10h
jnz    mauvais_serial</pre>
<p>Le serial doit donc faire 10h=16 caractères.</p>
<p>On lance ensuite le programme (F9), on entre 
un nom ( jB ), et un serial à la con ( 1122334455667788 ). Puis on appuie 
sur 'OK'.<br>Le breakpoint a bien fonctionné. On se retrouve en .401B71.</p>
<p>On trace avec F8, et on entre dans le premier 
call intéressant (.401D90) avec F7.<br>On arrive ici :</p>
<p class="image"><img src="images/2.jpg" width="634" height="505" border="0"></p>
<p>La routine est très simple à comprendre en 
la traçant : le serial entré est mis en majuscules avec CharUpperA.<br>Puis les 
8 premiers caractères du serial sont convertis en un dword, et stockés en [4060A4].<br>Les 
8 derniers caractères sont également convertis en un dword, et sont stockés 
en [4060A0].</p>
<p>On sort de la procédure, et on entre dans 
le second call :</p>
<p class="image"><img src="images/3.jpg" width="471" height="253" border="0"></p>
<p>On entre dans le premier call, en .401000, pour 
voir un peu ce qui se passe :</p>
<p class="image"><img src="images/4.jpg" width="398" height="75" border="0"></p>
<p>Les choses sérieuses commencent. On reconnaît 
l'initialisation typique d'un hash (MD, RipeMD ou SHA-1).<br>Il faut tracer 
un peu plus loin pour connaître le hash utilisé.</p>
<p>Le call suivant n'a pas l'air très intéressant. 
On ne rentre pas dedans.<br>Celui d'après par contre contient la routine de 
hash. Comme généralement les routines de hash sont assez longues, et que personne 
n'a envie de se faire mal à la tête en les analysant, on va passer cette routine 
également.</p>
<p>Le principal est de comprendre comment la 
procédure de hash est appelée.<br>On remarque le push edx juste au dessus du 
call KeygenMe.00401A10. C'est donc un paramètre de la fonction appelée.</p>
<p>A la sortie de la fonction, on jette un coup 
d'oeil au buffer pointé par ce paramètre :<br>Ctrl + g --&gt; ebp-14</p>
<p>On voit ceci :</p>
<p class="image"><img src="images/5.jpg" width="446" height="41" border="0"></p>
<p>On reconnaît alors le hash MD5 de 'jB' : DAEC5A118F2324ED3B58D355B107898E.<br>(Pour 
reconnaître les hash j'utilise  CryptTool v1.2 de christal, très pratique).</p>
<p>On arrive à la partie la plus délicate du 
programme (rien de très compliqué toutefois).</p>
<p>On récapitule avant d'aborder la routine :<br><font face="Courant">[4060A4]=code[0]<br>[4060A0]=code[1]</font>, 
en considérant code comme un tableau de 2 dwords</p>
<p>Le hash se trouve à l'offset ebp-14. On a 
donc, en considérant hash comme un tableau de dwords également :<br><font face="Courant">[ebp-14]=hash[0]<br>[ebp-10]=hash[1]<br>[ebp-0c]=hash[2]<br>[ebp-08]=hash[3]</font></p>
<p>Voici la routine commentée :</p>
<p class="image"><img src="images/6.jpg" width="736" height="559" border="0"></p>
<p>On note :<br><font face="Courant">sum=[406ce4]</font></p>
<p>On a donc :</p>
<p><font face="Courant">[ebp-80]=code[0]-(code[1]&lt;&lt;4+hash[2]^code[1]+sum^code[1]&gt;&gt;5+hash[3])<br>[ebp-7c]=code[1]-([ebp-80]&lt;&lt;4+hash[0]^[ebp-80]+sum^[ebp-80]&gt;&gt;5+hash[1])</font></p>
<p>et il faut que cela vérifie :<br><font face="Courant">[ebp-80]=656D6E65h<br>[ebp-7C]=6779656Bh</font></p>
<p>Cet algorithme ressemble fortement à du TEA, 
avec quelques différences toutefois :</p>
<ul>
<li>le delta number est ici égal à hash[0]^hash[2], et pas à 9e3779b9h.</li>
<li>il n'y a qu'un cycle, alors qu'il y en a en général 32 dans le TEA standard.</li>
</ul>
<p>Il faut maintenant reverser tout ça.<br>On 
note <font face="Courant">y=[ebp-80]</font> et <font face="Courant">z=[ebp-7c]</font>.</p>
<p><font face="Courant">z=code[1]-(y&lt;&lt;4+hash[0]^y+sum^y&gt;&gt;5+hash[1])</font><br>Comme 
y doit être égal à 656D6E65h, on a alors :</p>
<p><font face="Courant">code[1]=z+(y&lt;&lt;4+hash[0]^y+sum^y&gt;&gt;5+hash[1]) 
avec y=656D6E65h</font></p>
<p>On en déduit :<br><font face="Courant">code[0]=y+(code[1]&lt;&lt;4+hash[2]^code[1]+sum^code[1]&gt;&gt;5+hash[3])</font></p>
<p>Ce qui donne, pour 'jB' :</p>
<blockquote><font face="Courant">code[0]=0E49910Bh<br>
code[1]=9902E4D9h</font></blockquote>
<p>Le serial est donc : 0E49910B9902E4D9</p>
<p>Et voilà c'est terminé.<br></p>

<p class="image"><img src="../../images/signatures/Jb.gif"></p>

</body>
</html>
