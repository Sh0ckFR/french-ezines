<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0055)http://membres.lycos.fr/netixyz/tutos/ida/ida1/ida1.htm -->
<HTML>
<!-- Mirrored from frenchezines.free.fr/tries/shmeitcorp/5/Netix/ida1.htm by HTTrack Website Copier/3.x [XR&CO'2007], Thu, 07 Aug 2008 04:41:17 GMT -->
<HEAD>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<META content="MSHTML 6.00.2600.0" name=GENERATOR><title>Netix : iDA : Part 1</title></HEAD>
<BODY bgColor=#000000 text=#FFFFFF link="#FFFFFF" vlink="#FFFFFF" alink="#FFFFFF" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<table width="670" border="0">
  <tr>
    <td><p><b><font size="2" face="Arial, Helvetica, sans-serif">IDA - The Interactive 
        Disassembler - part 1</font></b></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif">Voici une petite serie 
        de 4 tutos pour ceux qui souhaiteraient s'initier à IDA, et je peux vous 
        assurer que ca en vaut le détour (de se mettre à IDA, loin de moi de penser 
        que mes tuts en vaillent le détour :p).<br>
        <br>
        Quand vous aurez pris connaissances des puissantes capacités de cet outil 
        il est fort à parier que vous allez changer votre vision du cracking et 
        passerez à un état d'esprit o&ugrave; le cracking prend vraiment une autre 
        dimension. <br>
        Car en effet ce n'est pas un simple désassembleur dans lequel vous pourrez 
        tracer à la va vite les instructions d'un programme et casser la protection.<br>
        <br>
        Pour etre employé à sa juste valeur, IDA nécessite du travail et du temps, 
        il demande de s'investir dans le listing désassemblé et d'avoir une certaine 
        dose de savoir en programmation, petit à petit c'est un peu comme si la 
        source devenait la votre, vous allez l'adapter à votre comprehension, 
        la travailler y ajouter des commentaires, renommer des fonctions, des 
        variables etc.. si bien qu'à la fin la source original et la votre n'auront 
        plus rien à voir. C'est pour ca aussi qu'il est difficile de faire des 
        tutos de cracking avec IDA comme outils de reference pour le listing désassemblé 
        puiqu'à la fin la source de 'l'auteur' (du tutorial) sera assez personnelle 
        et moins comprehensible du fait que vous utiliserez des noms propre à 
        votre analyse.<br>
        <br>
        Dans cette s&eacute;rie de tuts, plut&ocirc;t que de vous balancer comme 
        ca mon propre code modifié, je vais essayer de vous donner les bases pour 
        que par vous m&ecirc;me vous puissiez arriver à ce stade d'analyse et 
        de modification de code.</font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif">Note: Certaines fonctionnalitées 
        décrites par la suite peuvent ne pas etre presente dans IDA selon la version 
        que vous utilisez. Tous les exemples ici sont accessibles à partir de 
        la version 4.15.</font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif"><b>IDA en lui m&ecirc;me</b></font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif"><b>Multi-processeur</b> 
        :<br>
        IDA supporte une multitude de processeur comme Texas Instrument, ARM, 
        MIPS etc.. mais nous ne nous interresseront ici qu'à la famille des PC 
        avec une architecture en 80x86 sous Windows.</font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif"><b>Désassembleur intelligent</b> 
        :<br>
        IDA à la diff&eacute;rence d'un simple désassembleur, analyse le code, 
        avec notamment des méthodes comme<br>
        <b>FLIRT</b> et <b>PIT</b>.</font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif"><b>FLIRT</b> pour 
        <em>Fast Library Identification and Recognition Technology</em>, permet 
        de reconnaitre des appels de fonction sur des librairies standard de certains 
        compilteurs. </font><font size="2" face="Arial, Helvetica, sans-serif">Exemple 
        sur un programme en C si vous appelez la fonction <b>strcpy(..) </b>IDA 
        pourra reconnaitre cet appel de fonction et au lieu de preciser un simple 
        <b>call xxxxxx</b> lequel vous devrez explorer avant de comprendre que 
        cette fonction sert à copier une string, vous obtiendrez directement<b> 
        call strcpy </b>ce qui economise du temps et facilite bien la tache.</font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif"><b>PIT</b> pour <em>Parameter 
        Identification and Tracking </em>permet à IDA de suivre et d'identifier 
        les param&egrave;tres d'une fonction aux travers de la pile afin de reconnaitre 
        et marquer les param&egrave;tres employés, ce qui l&agrave; encore facilite 
        grandement la tache. IDA permet aussi de désassembler proprement faisant 
        la différence entre du code et des déclarations de variables ainsi que 
        du code inexploité par le programme.</font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif"><b>Interactif :<br>
        </b>Pour vous donner la possibilité de faire des modifications, renommer 
        des variables, des fonctions, faire des commentaires, definir les arguments 
        d'une fonction, cr&eacute;er des fonctions etc...</font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif">Voila pour les fonctionnalités 
        de base, bien sur il y en a beaucoup d'autres mais je vous laisse le soins 
        de les découvrir par vous m&ecirc;me.</font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif"><b>De Wdasm à IDA</b></font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif">Wdasm<b> </b>étant 
        le désassembleur le plus connu et le plus utilisé du fait de son extreme 
        facilité, il s'agit surement du désassembleur par lequel vous avez commenc&eacute; 
        à pratiquer et quand on passe de wdasm à IDA on peux se trouver quelque 
        peu dépaysé. D'abord je tient à dire que je ne déconsidere ou ne critique 
        pas Wdasm qui est un tr&egrave;s bon outil et pour des programmes simples 
        qui ne necessitent pas une analyse poussée. Il convient amplement surtout 
        avec <a href="http://protools.owns.it/" target="_blank">le patch assez 
        recent</a> à l'heure o&ugrave; je parle qui ajoute des quantités de choses 
        telles la colorisation syntaxique, ajout de commentaires etc..</font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif">La premi&egrave;re 
        difficulté se pose sans doute avec les Sting Datas References, puisque 
        c'est la m&eacute;thode la plus facile et par laquelle on apprend à cracker. 
        Sous IDA on peux tout de meme lister les strings declarées et utilisées 
        par le code via le <strong>menu / view / name</strong> ou voir directement 
        en commentaire les strings reference par le code.</font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif">Vous obtenez une fen&ecirc;tre 
        listant les noms des fonctions et des noms de variables explicites nommées 
        selon leur contenu. Exemple : une string qui contient <b>"Merci de vous 
        &ecirc;tre enregistré"</b> sera nommée par d&eacute;faut comme ceci : 
        <b>aMerciDeVous. </b>Sur ce point Wdasm est plus fort (surtout la version 
        8.5) car souvent il liste beaucoup plus de reference que IDA, mais il 
        faut savoir que la technique des strings datas n'est pas la seule facon 
        de cracker et qu'avec la pratique du cracking vous n'en avez presque plus 
        l'utilité. Vous en viendrez m&ecirc;me &agrave; l'&eacute;viter du fait 
        des pi&egrave;ges que cette technique peut engendrer (crackmes tordus, 
        etc...).</font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif">Les jump et les call 
        références sont aussi un probleme, puisque definis diff&eacute;rement.<br>
        Comparons deux m&ecirc;mes portions d'un code sous Wdasm et IDA pour voir 
        les differences.</font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif"><b>Portion de code 
        désassemblé sous Wdasm</b></font></p>
      <pre><font color=#FF0000 size="2" face="Courier New, Courier, mono">* Referenced by a (U)nconditional or (C)onditional Jump at Address:
|:0040105C(C)
|
:0040106D 817D0C11010000 	cmp dword ptr [ebp+0C], 00000111
:00401074 0F850B010000 		jne 00401185
:0040107A 8B4510 			mov eax, dword ptr [ebp+10]
:0040107D 837D1400 			cmp dword ptr [ebp+14], 00000000
:00401081 0F8407010000 		je 0040118E
:00401087 8B5510 			mov edx, dword ptr [ebp+10]
:0040108A C1EA10 			shr edx, 10
:0040108D 660BD2 			or dx, dx
:00401090 753B 				jne 004010CD
:00401092 6683F801 			cmp ax, 0001
:00401096 7518 				jne 004010B0
:00401098 6A30 				push 00000030</font></pre>
      <pre><font color=#FF0000 size="2" face="Courier New, Courier, mono">* Possible StringData Ref from Data Obj -&gt;"Enregistrement..."
|
:0040109A 6816304000 		push 00403016</font></pre>
      <pre><font color=#FF0000 size="2" face="Courier New, Courier, mono">* Possible StringData Ref from Data Obj -&gt;"Merci de vous êtes    enregistrés "
-&gt;"!"
|
:0040109F 6828304000 		push 00403028
:004010A4 6A00 				push 00000000</font></pre>
      <pre><font color=#FF0000 size="2" face="Courier New, Courier, mono">* Reference To: USER32.MessageBoxA, Ord:01BBh
|
:004010A6 E817010000 		Call 004011C2
:004010AB E9D3000000 		jmp 00401183</font></pre>
      <p><font color=#990000 size="2" face="Arial, Helvetica, sans-serif"><b><font color=#FFFFFF>Portion 
        de code désassemblé sous IDA</font></b></font></p>
      <pre><font color=#FF0000 size="2" face="Courier New, Courier, mono">0040106D loc_40106D:                             ; CODE XREF: sub_40102B+31j<br>0040106D         cmp     [ebp+arg_4], 111h<br>00401074         jnz     loc_401185<br>0040107A         mov     eax, [ebp+arg_8]<br>0040107D         cmp     [ebp+arg_C], 0<br>00401081         jz      loc_40118E<br>00401087         mov     edx, [ebp+arg_8]<br>0040108A         shr     edx, 10h<br>0040108D         or      dx, dx<br>00401090         jnz     short loc_4010CD<br>00401092         cmp     ax, 1<br>00401096         jnz     short loc_4010B0<br>00401098         push    30h<br>0040109A         push    offset aEnregistrement  ; "Enregistrement..."<br>0040109F         push    offset aMerciDeVousTes  ; "Merci de vous Ûtes enregistrÚs !"<br>004010A4         push    0<br>004010A6         call    j_MessageBoxA<br>004010AB         jmp     loc_401183</font></pre> 
      <p><font color=#FFFFFF size="2" face="Arial, Helvetica, sans-serif">Pour 
        les jumps et calls références, sous Wdasm on a:</font></p>
      <pre><font color=#FF0000 size="2" face="Courier New, Courier, mono"><strong>Referenced by a (U)nconditional or (C)onditional Jump at Address :0040105C(C)</strong></font> </pre> 
      <p><font size="2" face="Arial, Helvetica, sans-serif">et sous IDA :</font></p>
      <pre><font color=#FF0000 size="2" face="Courier New, Courier, mono"><strong>0040106D loc_40106D: ; CODE XREF: sub_40102B+31j</strong></font></pre> 
      <p><font size="2" face="Arial, Helvetica, sans-serif">Cette petite ligne 
        en dit beaucoup:</font></p>
      <p><font color=#FFFFFF size="2" face="Arial, Helvetica, sans-serif">- On 
        se situe à l'adresse <b>0040106D</b>.<br>
        - <b>loc_40106D</b>: est defini en tant que label comme dans une source 
        ASM ou l'on pourra se rendre via un jmp ou un call<br>
        - <b>CODE XREF:</b> nous dit que la référence provient de la section .CODE<br>
        - <b>sub_40102B+31</b> ( = 0040105C ) est l'adresse de la référence<br>
        - <b>sub_40102B</b> étant l'adresse du debut de la procedure <br>
        - le <b></b> represente normalement une petite fleche (que je n'ai pas 
        pas pu la reproduire sur cette page html) qui <font color="#000000">..</font>determine 
        la direction vers le haut ou le bas ou se situe la référence<br>
        - <b>j</b> nous dit que cette reference est un jump<br>
        - et il suffit de double-cliquer sur <b>sub_40102B+31j</b> pour aller 
        directement au jump</font></p>
      <p><font color=#FFFFFF size="2" face="Arial, Helvetica, sans-serif">On voit 
        que l'adresse <b>0040106D</b> figure 2 fois, cela permet juste à IDA de 
        rajouter des lignes interressantes ou plusieurs lignes de commentaires 
        sur l'adresse. Comme ici la XREF.</font></p>
      <p><font color=#FFFFFF size="2" face="Arial, Helvetica, sans-serif">On vois 
        aussi que les strings data referencées par des adresses sous Wdasm ont 
        été renommées sous IDA en nom de variables explicites suivi d'un commentaire 
        indiquant leur contenu. On peut aussi double-clicker sur le nom de la 
        variable pour aller directement l&agrave; o&ugrave; celle-ci est déclarée 
        suivi de sa XREF. </font></p>
      <pre><font color=#FF0000 size="2" face="Courier New, Courier, mono">00403016 aEnregistrement db 'Enregistrement...',0 ; DATA XREF: sub_40102B+6Fo</font></pre>
      <p><font color=#FFFFFF size="2" face="Arial, Helvetica, sans-serif">Cette 
        variable de type chaine de caracteres est déclarée comme dans une source 
        asm avec la pseudo instruction db. Pour la r&eacute;f&eacute;rence de 
        l'API MessageBox, Wdasm nous informe par<br>
        <font face="Courier New, Courier, mono">* Reference To: USER32.MessageBoxA, 
        </font></font><font color=#FF0000 size="2" face="Courier New, Courier, mono">Ord:01BBh</font><font size="2" face="Arial, Helvetica, sans-serif">, 
        suivi du <font color=#FF0000 face="Courier New, Courier, mono">Call 004011C2</font> o&ugrave; 004011C2 repr&eacute;sente 
        l'adresse de l'appel MessageBox sous IDA. On voit alors directement le 
        nom de la fonction que l'on appel :<br>
        <font color=#FF0000 face="Courier New, Courier, mono">call j_MessageBoxA</font>. </font></p>
      <p><font color=#FFFFFF size="2" face="Arial, Helvetica, sans-serif">On voit 
        aussi que sur la premi&egrave;re instruction </font><font color=#FF0000 size="2" face="Arial, Helvetica, sans-serif"><b>cmp 
        [ebp+arg_4], 111h</b></font><font size="2" face="Arial, Helvetica, sans-serif"> 
        , on utilise <b><font color=#FF0000>ebp+arg_4</font></b> alors que Wdasm 
        emploie la valeur réel <font color=#FF0000><b>ebp+0C</b></font>. <b>arg_4</b> 
        repr&eacute;sente ici tout simplement l'un des arguments de cette proc&eacute;dure 
        definie un peu plus haut:</font></p>
      <pre><font size="2" face="Courier New, Courier, mono">0040102B sub_40102B proc near                    ; DATA XREF: start+Eo<br>0040102B <br>0040102B arg_0   = dword ptr  8<br>0040102B <b>arg_4</b>   = dword ptr  <b>0C</b>h<br>0040102B arg_8   = dword ptr  10h<br>0040102B arg_C   = dword ptr  14h</font></pre> 
      <p><font size="2" face="Arial, Helvetica, sans-serif"><b>arg_4</b> repr&eacute;sente 
        bien la valeur <b>0C</b> d'ailleur si on clique droit sur <b>arg_4</b> 
        dans <font color=#FF0000 face="Courier New, Courier, mono"><b>cmp [ebp+arg_4], 
        111h</b></font>, un petit menu va apparaitre nous donnant la valeur exact 
        sous diff&eacute;rentes bases (hexa, decimal, binaire...).<br>
        Nous verrons plus tard que l'on peux renommer <b>arg_4</b> avec un nom 
        plus representatif.</font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif"><b>Les options</b></font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif">On peux afficher plus 
        ou moins de renseignements et organiser selon nos souhaits le listing.<br>
        Le menu /options permet d'acc&eacute;der à ces options. Depuis Options 
        générales on pourra définir tout un tas de renseignements pour personnaliser 
        l'affichage tel que les couleurs, la distance entre les differentes parties<br>
        <em> ( position ou le code commence, position ou les commentaires commence 
        , ou les Xref commence etc..)</em>, caract&eacute;ristique de nommage 
        des strings, afficher les opcodes (<em>valeur en hexa des instructions</em>),<br>
        afficher le pointeur de pile suivant chaque instruction (<em>tr&egrave;s 
        partiques parfois pour ne pas perdre de vue l'etat de la pile</em>).</font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif">Le nombre d'options 
        etant relativement important je ne peux pas toutes les décrires mais je 
        vous conseille de prendre quelques minutes afin d'explorer chacune d'elle 
        pour personaliser IDA selon vos désir.<br>
        Prenez du temps aussi pour d&eacute;couvrir l'interface, jouer avec les 
        menus et tester un peu tout ce qui se présente. </font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif"><b>Utilisation de 
        IDA - les commandes et fonctions de base</b></font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif">Déja on commence par 
        ouvrir le fichier que l'on souhaite via le menu File / Open file.. ou 
        le bouton raccourci dans la barre d'outil. Une fen&ecirc;tre appara&icirc;t 
        nous permettant de sp&eacute;cifier quelques options, on ne touche à rien 
        et on clique directement sur OK. On voit dans la petite fen&ecirc;tre 
        du bas l'&eacute;volution de l'analyse et on attend qu'il ait fini, ce 
        qui peut etre tr&egrave;s long pour des programmes cons&eacute;quents.</font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif"><b>Les zones</b></font></p>
      <font size="2" face="Arial, Helvetica, sans-serif">On obtient finalement 
      un listing que l'on peux diviser en diff&eacute;rentes zones comme suit 
      :<br>
      - le code o&ugrave; l'on voit les instructions<br>
      - les datas on l'on voit les d&eacute;clarations des variables comme en 
      asm par les pseudos instruction db, dd, dw <br>
      - Inexplor&eacute; que l'on reconnais car les segments d'offset sont gris&eacute;s 
      (partie de gauche), et &ccedil;a ressemble a des d&eacute;claration de variables 
      (ex : DB 82). Les zone inexplor&eacute;es sont des zones qui ne sont ni 
      r&eacute;f&eacute;renc&eacute;es dans le code ni dans les datas. On peux 
      modifier chaque zone en s&eacute;lectionnant les lignes ou la ligne et en 
      pressant :<br>
      '<strong>c</strong>' - pour code<br>
      '<strong>d</strong>' - pour data (si on se place seulement sur une ligne 
      qui d&eacute;fini d&eacute;j&agrave; une variable par db par ex on peut 
      changer le <font color="#000000">......</font>type en pressant 'd' et en 
      faisant d&eacute;filer les types)<br>
      '<strong>u</strong>' - pour unexplored</font><br> 
      <p><font size="2" face="Arial, Helvetica, sans-serif"><b>Les jumps et le 
        tracing</b></font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif">Sous IDA pour activer 
        des options etc.. tout dépend de la position du curseur, il faut placer 
        le curseur sur le nom d'une variable ou d'une fonction pour activer les 
        options propres aux modifications de ces valeurs.<br>
        On peux tracer le code avec les fleches haut / bas et déplacer le curseur 
        lateralement avec gauche / droite (ou la souris). Si on se place sur une 
        instruction ou il y a un jump / un call il suffit de mettre le curseur 
        sur le nom du label ou le nom de la fonction ou le jump / call sautera 
        et <strong>appuyer sur 'Enter' pour effectuer le saut</strong>, on peux 
        aussi double-cliquer directement.</font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif">On utilise la touche 
        'echap' pour revenir en arri&egrave;re autant de fois que l'on a avancé 
        (pratique pour revenir d'un jump ou d'un call). On peux aussi utiliser 
        les 2 petites fl&egrave;ches lat&eacute;rales de la barre d'outils.</font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif">Depuis le menu / jump 
        on a une foultitude de jump possibles, les plus utilisés etant '<strong>jump 
        to adress</strong>' accessibles directement via le raccourci clavier 'G', 
        '<strong>jump to entry-point</strong>' pour se rendre sur l'entry-point, 
        '<strong>Jump to function</strong>' etc... On a la possibilité aussi de 
        d&eacute;finir des points clés que l'on nomme par '<b>Mark position</b>'. 
        On tape la description de ce point et l'on pourra s'y rendre directement 
        en passant par "<b>jump to marked position</b>".</font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif"><b>Le File Offset 
        et adresse courante</b></font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif">Le File Offset nous 
        permet de nous rep&eacute;rer dans le fichier avec un éditeur hexadecimal 
        en vue de modification, on l'obtient en visualisant la barre d'etat muni 
        de plusieurs cases tout en bas de la fenetre. C'est la 4eme case, si on 
        laisse la souris dessus quelques instants nous verrons "current position 
        in the input file".<br>
        La case suivante nous indique l'adresse courante suivi du nom de la proc&eacute;dure 
        dans laquelle elle se trouve + le nombre à ajouter pour obtenir l'adresse 
        courante. </font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif"><b>Les commentaires</b></font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif">Il y a 2 types de 
        commentaires : les commentaires uniques et les commentaires r&eacute;p&eacute;titifs 
        :<br>
        </font><font size="2" face="Arial, Helvetica, sans-serif"><b>Unique</b>: 
        en pressant <b>':' </b>ce type de commentaire (unique) apparait l&agrave; 
        o&ugrave; on le place.<br>
        <b>R&eacute;p&eacute;titif</b> : en pressant <b>';' </b>ce type de commentaire 
        permet de se repercuter dans le code, si par exemple on place ce type 
        de commentaire sur une fonction nous le verrons à la suite de chaque call 
        qui appelle cette fonction.</font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif"><b>Les noms</b></font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif">C'est là la grande 
        force de l'interactivité de IDA on peux renommer n'importe quel variable, 
        fonction, valeur ou label et lui donner un nom bien plus explicite que 
        celui donné par d&eacute;faut.</font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif">Pour changer le nom 
        d'un label ou en ajouter un, on se place sur le label d&eacute;j&agrave; 
        existant ou à l'adresse souhaité et on presse '<strong>n</strong>'. Une 
        boite appara&icirc;t permettant de sp&eacute;cifier le nom à utiliser. 
        Le label sera changé et toutes les instructions qui y font references, 
        ainsi si nous avons par exemple:</font></p>
      <pre><font color=#FF0000 size="2" face="Courier New, Courier, mono">00401112 loc_401112: 		; CODE XREF: sub_40102B+116j
00401112 	mov al, [esi]
00401114 	test al, al
00401116 	jz short loc_401143</font></pre> 
      <p><font color=#FFFFFF size="2" face="Arial, Helvetica, sans-serif">nous 
        renommons <b>loc_401112</b> en <b>coucou</b>. Si on se rend au jump ( 
        par la ligne XREF ) qui r&eacute;f&eacute;rence ce label nous ne verrons 
        plus <b>jmp loc_401112</b> mais <b>jmp coucou. </b></font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif">Pour changer le nom 
        d'une fonction c'est un peu le meme procédé, la fonction etant déclaré 
        comme suit :<br>
        <b>call sub_4011A0</b> ( <b>sub_</b> pour fonction <b>loc_</b> pour label 
        ) et pour renommer la fonction il suffit de se rendre l&agrave; ou son 
        'label' est defini:</font> </p>
      <pre><font color=#FF0000 size="2" face="Courier New, Courier, mono">004011A0 sub_4011A0 proc near 		; CODE XREF: sub_401160+27p
004011A0 
004011A0 arg_0 = dword ptr 8h
004011A0 arg_4 = dword ptr 0Ch
004011A0 arg_8 = dword ptr 10h
004011A0 arg_C = dword ptr 14h
004011A0 
004011A0 	push ecx
004011A1 	push ebx</font></pre> 
      <p><font size="2" face="Arial, Helvetica, sans-serif">Et soit on presse 
        '<strong>n</strong>' pareil que pour un label et editer le nom soit on 
        peux passer par un menu sp&eacute;cifique au fonction en pressant '<strong>alt-p</strong>' 
        ou clic droit pour y acceder via un petit menu contextuel.<br>
        </font><font size="2" face="Arial, Helvetica, sans-serif"> Dans le Dialog 
        Edit Function nous pourrons renommer la fonction ainsi que son adresse 
        de base et de fin.<br>
        On peux aussi &eacute;diter le prototype de la fonction en choisissant 
        '<b>set fonction type</b>' depuis le menu contextuel, vous pourrez alors 
        nommer les arguments et IDA modifiera le code pour renommer toutes les 
        r&eacute;f&eacute;rences de ces arguments. Voici la m&ecirc;me fonction 
        une fois son prototype modifié:</font></p>
      <pre><font color=#FF0000 size="2" face="Courier New, Courier, mono">004011A0 ; int Calcul1(HWND hwnd,int var1,int var2,BOOL value)<br>004011A0 
004011A0 Calcul1 proc near             ; CODE XREF: sub_401160+27p<br>004011A0 <br>004011A0 hwnd    = dword ptr  8h<br>004011A0 var1    = dword ptr  0Ch<br>004011A0 var2    = dword ptr  10h<br>004011A0 value   = dword ptr  14h<br>004011A0 <br>004011A0         push    ecx<br>004011A1         push    ebx</font></pre> 
      <p><font size="2" face="Arial, Helvetica, sans-serif">On peux se servir 
        du nom de constante symbolique pour renommer des valeurs. Exemple dans 
        une procedure de gestion de message d'une fenetre, la constante <b>WM_INITDIALOG</b> 
        une fois désassemblé sera remplacé par sa valeur numerique <b>110</b>:</font></p>
      <pre><font color=#FF0000 size="2" face="Courier New, Courier, mono">.code:0040102E         cmp     [ebp+arg_4], 110h<br>.code:00401035         jz     short loc_401058</font></pre>
      <p><font size="2" face="Arial, Helvetica, sans-serif">Si on clique droit 
        sur 110h, on choisi '<b>use standard symbol constant</b>' une liste apparait 
        nous proposant les différentes constantes de Windows qui ont la valeur 
        110, apres il suffit de situer le contexte dans lequel nous sommes afin 
        de choisir la bonne, Ici c'est dans une procedure de gestion des messages 
        la constante que l'on recherche est donc un message celui qui nous est 
        proposé est bien<b> WM_INITDIALOG </b>( <b>WM_</b> pour Windows Message 
        ).<br>
        On le selectionne et on valide, 110 sera remplacé par <b>WM_INITDIALOG. 
        </b>On peut alors en profiter aussi pour renommer le label du jump qui 
        suit par <b>_Initdialog</b> par exemple puisque l'on sautera vers cette 
        routine si c'est bien ce message.</font></p>
      <p><font color=#FFFFFF size="2" face="Arial, Helvetica, sans-serif">Tant 
        qu'on y est on va pousser un peu plus loin en montrant la technique de 
        travail sous IDA,<br>
        <strong> mais avant tout un rappel sur la programmation assembleur:</strong></font></p>
      <p><font color=#0000FF size="2" face="Arial, Helvetica, sans-serif">Pour 
        passer des arguments à une fonction on les push dans la pile avant le 
        call de la fonction et en ordre inverse par rapport au prototype, la pile 
        est accessible via le registre esp, ensuite dans la proc&eacute;dure on 
        se sert de ebp pour recuperer les element de la pile selon ce shema :</font></p>
      <p><font color=#0000FF size="2" face="Courier New, Courier, mono">push 
        ebp ; sauvegarde valeur de ebp<br>
        mov ebp,esp ; place dans ebp, le pointeur de pile</font></p>
      <p><font color=#0000FF size="2" face="Courier New, Courier, mono">ebp+00 
        = esp = old ebp =&gt; viens d'etre sauvgardé<br>
        ebp+04 = esp avant le call contient adresse retour de la fonction<br>
        ebp+08 = 1er argument<br>
        ebp+0C = 2eme argument<br>
        ebp+10 = 3eme argument<br>
        ebp+14 = 4eme argument<br>
        etc...</font></p>
      <p><font color=#0000FF size="2" face="Courier New, Courier, mono">;fin de 
        la procedure</font></p>
      <p><font color=#0000FF size="2" face="Courier New, Courier, mono">mov esp,ebp 
        ; ebp contient l'ancienne valeur d'ebp<br>
        pop ebp ; on desempile pour revenir à l'etat initial de la pile qui contient 
        alors l'addresse de retour</font></p>
      <p><font color=#0000FF size="2" face="Courier New, Courier, mono">ret ; 
        retourne juste apres le call de la fonction</font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif"><strong>Revenons a 
        notre exemple: </strong> </font></p>
      <pre><font color=#FF0000 size="2" face="Courier New, Courier, mono">.code:0040102E 	cmp [ebp+arg_4], 110h
.code:00401035 	jz short loc_401058</font></pre> 
      <p><font size="2" face="Arial, Helvetica, sans-serif">L&agrave; on compare 
        <b>ebp+arg_4</b> qui represente <b>ebp+0C</b> qui lui m&ecirc;me est le 
        2eme argument de cette procedure de gestion de message si on examine la 
        prototype de la procedure de gestion des messages :</font></p>
      <pre><font size="2" face="Courier New, Courier, mono">BOOL CALLBACK DialogProc(HWND hwndDlg,UINT uMsg,WPARAM wParam,LPARAM lParam);</font></pre> 
      <p><font size="2" face="Arial, Helvetica, sans-serif">Le 2eme argument est 
        <b>uMsg</b> c'est une variable qui contient des valeurs numeriques (UINT 
        - unsigned int) représentées par des constantes symboliques comme <b>WM_INITDIALOG</b>, 
        c'est aussi en sachant que c'est ce 2eme argument que nous pouvons deduire 
        que la valeur qui suit est un Windows Message.<br>
        Nous pouvons donc renommer <b>ebp+arg_4</b> à sa juste valeur ce qui donne 
        finalement:</font></p>
      <pre><font color=#FF0000 size="2" face="Courier New, Courier, mono">.code:0040102E   cmp [uMsg], WM_INITDIALOG<br>.code:00401035   jz  short _InitDialogRoutine</font></pre>
      <p><font size="2" face="Arial, Helvetica, sans-serif">Pour ceux qui n'ont 
        rien compris je reprendrais plus en détail dans la 2eme partie de cette 
        serie de tutoriaux dont le th&egrave;me sera de d'analyser et modifier 
        un listing complet sur un petit programme tr&egrave;s simple. Ce qui permettra 
        de mettre en pratique et de pousser encore plus loin ce que nous venons 
        de voir. Cet exemple étant l&agrave; pour illustrer comment on travaille 
        sous IDA et avoir un apercu du r&eacute;sultat qui ne ressemble plus trop 
        à l'original, notez que l'exemple était sur 2 lignes de code. Imaginez 
        sur une source compl&egrave;te ou m&ecirc;me juste une fonction.</font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif">On peux aussi renommer 
        tout ce que l'on souhaite en choisissant '<b>Manuel</b>' depuis le menu 
        contextuel ou '<strong>alt-F1</strong>' et en cochant '<b>allow no matched 
        operand</b>' m&ecirc;me si c'est completement illogique ou rien à voir 
        donc <strong>prudence</strong> surtout si vous desirez plus tard exporter 
        votre code (voir part 2 et 3).</font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif"><b>Sauvegarder son 
        travail et l'exporter</b></font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif">Une fois qu'on a bien 
        bossé ou qu'on veux en laisser pour le lendemain, il suffit de sauvegarder 
        le listing qui sera sauvegardé avce l'extension .idb lequel on pourra 
        bien sur re-ouvrir et retrouver tout son boulot intact :)</font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif">Parmi les exports 
        ( menu / produce ) <strong>on peux exporter le listing en .asm</strong> 
        qui produira une source utilisable avec un assembleur, attention la source 
        obtenue ne sera pas forcement compilable tout de suite voir m&ecirc;me 
        pas du tout, il faudra la retravailler et l'adapter. La 3eme partie expliquera 
        la procedure à suivre.</font></p>
      <p><font size="2" face="Arial, Helvetica, sans-serif">On peux produire un 
        fichier .map qui fait la correspondance entre les labels, fonctions variables 
        et les adresses du programme, on s'en servira pour exporter le listing 
        sous Soft-ice ce qui alors ouvre une voie dans un debugging plus <font color="#FFFFFF">clair.</font></font></p>
      <p><img src="images/netix.jpg" width="96" height="32"></p>
</td>
  </tr>
</table>
</BODY>
<!-- Mirrored from frenchezines.free.fr/tries/shmeitcorp/5/Netix/ida1.htm by HTTrack Website Copier/3.x [XR&CO'2007], Thu, 07 Aug 2008 04:41:17 GMT -->
</HTML>
