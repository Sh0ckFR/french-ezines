<title>Initiation &agrave; Java</title>
<body bgcolor="#000000" text="#FF00FF">
<div align="center">
  <p><u><b><font size="6">Initiation &agrave; Java<br>
    </font></b></u><font size="6"><font size="2">aka Java RuleZ</font></font></p>
  <p align="left"><font size="2"><u>Edito</u><br>
    J'ai &eacute;cris ce document pour plusieurs raisons : Pour le faire avant 
    HZV<img src="../media/mdr.gif" width="67" height="46">, parce que l'on me 
    l'avait demand&eacute; et surtout parce que j'avais envie de la faire. Evidemment 
    il vient avec un autre article de cet opus sur les Applet Java (merci ki ?).<br>
    Pr&eacute;requis : Pour comprendre ce qui vas suivre il est n&eacute;cessaire 
    d'avoir acquis la 'logique' de programmation. Je veux dire par l&agrave; que 
    je n'analyserais pas les structures conditionnelles, les boucles, etc.<br>
    Ce document peut vous &ecirc;tre utile m&ecirc;me si vous ne comptez pas programmer 
    en Java car nous &eacute;tudierons le mod&egrave;le 'objet' (programmation 
    objet). Toutefois si vous savez programmer en C++ alors ces concepts ne vous 
    poserons aucune difficult&eacute;.</font></p>
  <p align="left"><font size="2"><u>Historique de Java</u><br>
    L'anc&ecirc;tre de Java est un langage appel&eacute; Oak, cr&eacute;e par 
    Joy Gosling, programmeur chez Sun, durant l'ann&eacute;e 90. Les caract&eacute;ristiques 
    de Java sont d&eacute;j&agrave; bien d&eacute;finies : le but est de faire 
    un langage qui puisse marcher sur toutes les plateformes ainsi que sur les 
    'syst&egrave;mes embarqu&eacute;s' (T&eacute;l&eacute;vision, Electro-M&eacute;nager, 
    T&eacute;l&eacute;phonie...). Le projet est finalement abandonn&eacute; en 
    92.<br>
    En 1996 le projet est relanc&eacute; sous le nom de Java et avec pour logo 
    une tasse de caf&eacute;. De nouveaux objectifs sont ajout&eacute;s : Java 
    doit &ecirc;tre orient&eacute; Web et secure (un point que l'on verra en d&eacute;tail 
    plus tard).</font></p>
  <p align="left"><font size="2"><u>Pr&eacute;sentation de Java</u><br>
    Java est un langage tr&egrave;s sp&eacute;cial dans sa fa&ccedil;on de fonctionner. 
    En effet comment Sun s'est t'il prit pour faire un langage qui puisse &ecirc;tre 
    aussi portable (la portabilit&eacute; est le fait de fonctionner sous diff&eacute;rentes 
    plateformes) ? Un fichier ex&eacute;cutable Windows (.exe) ne peut par exemple 
    pas fonctionner sous Linux qui n'accepte que le format ELF.<br>
    La solution n'est donc pas de faire du code ex&eacute;cutable. On pourrait 
    donc faire en sorte que le code source compile sous toutes les plates formes 
    (contrairement aux programmes win32 par exemple)... mais l&agrave; &ccedil;a 
    n'a rien d'un exploit car &eacute;norm&eacute;ment de programmes en sont capables.<br>
    Une solution est de faire un langage interpr&eacute;t&eacute; comme le perl, 
    le batch, le bash, le Tcl...<br>
    La solution adopt&eacute;e par Sun est un hybride des langages compil&eacute;s 
    et des langages interpr&eacute;t&eacute;s. En effet le compilateur Java ne 
    g&eacute;n&eacute;re pas du code natif (MZ pour Windows, ELF pour Linux...) 
    mais ce que l'on appelle du 'bytecode' ou 'pseudo-code' en Fran&ccedil;ais. 
    Ce bytecode prend la forme d'un fichier avec l'extension .class.<br>
    Pour ex&eacute;cuter ce bytecode il faut ensuite un programme qui puisse l'interpr&eacute;ter 
    : c'est le r&ocirc;le de la JVM, la Java Virtual Machine (Machine Virtuelle 
    Java).<br>
    L'avantage de cette m&eacute;thode hybride ? Honn&ecirc;tement je me suis 
    cass&eacute; la t&ecirc;te pour vous trouver un avantage... C'est vrai que 
    donner les sources reviendrait au m&ecirc;me puisque dans tous les cas le 
    code est interpr&eacute;t&eacute;... J'ai cherch&eacute; des avantages du 
    fait qu'avec Java il n'y a pas d'&eacute;dition de lien (avec les librairies 
    comme en C)... Mais est-ce qu'il y a des &eacute;ditions de liens dans les 
    langages interpr&eacute;t&eacute;s ? Me semble pas ! Alors d&eacute;sol&eacute; 
    mais j'ai pas trouv&eacute; pourquoi ils compilent du code source si c'est 
    pour en faire un programme interpr&eacute;table.<br>
    <img src="../media/rien_a_dire.gif" width="41" height="46"></font></p>
  <p align="left"><font size="2">Les caract&egrave;ristiques de Java sont la simplicit&eacute; 
    (on y reviendra), la sur&ecirc;t&eacute;, la portabilit&eacute;. Java est 
    aussi orient&eacute; objet, distribu&eacute; (r&eacute;seaux), interpr&eacute;t&eacute;, 
    multithread et surtout incroyablement riche en librairies.</font></p>
  <p align="left"><font size="2"><u>Comment &ccedil;a marche</u><br>
    Pour programmer en Java vous avez besoin du JDK : le Java Developper's Kit. 
    Ce kit de d&eacute;vellopement contient deux programmes principaux.<br>
    Le premier est javac, le compilateur java.<br>
    Pour compiler une source en java il faut tapper :<br>
    javac mon_programme.java<br>
    Ceci g&eacute;n&eacute;re un fichier mon_programme.class qui est du bytecode 
    (ne l'oubliez pas).<br>
    Le second programme est java, il s'agit de l'interpr&eacute;teur qui va faire 
    appel &agrave; la machine virtuelle Java pour ex&eacute;cuter le programme 
    que vous avez cr&eacute;&eacute;. Pour lancer son programme il faut taper 
    :<br>
    java mon_programme<br>
    Remarquez que l'on ne met pas l'extension du fichier.</font></p>
  <p align="left"><font size="2"><u>Java et la s&eacute;curit&eacute;</u><br>
    Je suppose que le titre en a fait rire certain car ils savent &agrave; quel 
    point il est facile de d&eacute;compiler un fichier .class.<br>
    Pourtant Java est vraiment s&eacute;cure. Mais par s&eacute;curit&eacute; 
    il faut plut&ocirc;t comprendre 'robustesse, efficacit&eacute;' etc.<br>
    D&eacute;j&agrave; le compilateur Java est un vrai miracle pour les programmeurs. 
    Pour chaque erreur il affiche le num&eacute;ro de ligne, la ligne, et souligne 
    le caract&egrave;re &agrave; partir duquel se situe l'erreur. Il rajoute m&ecirc;me 
    un commentaire pour expliquer la raison de l'erreur. Bref finis le d&eacute;buggage 
    interminable des programmes en C.<br>
    Java s'inspire beaucoup du C mais certains concepts on chang&eacute;s, apportant 
    plus de s&eacute;curit&eacute; &agrave; Java :<br>
    Pas de structures (struct), tout est objet en Java, on utilise des classes 
    avec un syst&egrave;me de droits (on verra plus tard).<br>
    Pas de pointeurs, pas de malloc(), pas de free(). Les acc&egrave;s en dehors 
    de la m&eacute;moire n'existe plus.<br>
    Comment tout cela est possible ?<br>
    On a vu que le compilateur effectuait une tonne de v&eacute;rification mais 
    ce n'est pas tout : lorsque vous lancez l'interpr&eacute;teur Java, la machine 
    virtuelle java effectue de nouveau des v&eacute;rifications, fait des tests 
    de m&eacute;moire etc..<br>
    La force de Java est sa gestion de la m&eacute;moire. Chaque fois que vous 
    d&eacute;clarez un objet vous faites un new(), comme en C++. Java va alors 
    r&eacute;server une place en m&eacute;moire pour cet objet. Mais contrairement 
    &agrave; C++ vous n'avez pas de delete() pour d&eacute;truire l'objet : Java 
    se charge de le d&eacute;truire tout seul. Ce concept se nomme le garbage 
    collector. D&egrave;s qu'un objet est inutilis&eacute; sa m&eacute;moire est 
    lib&eacute;r&eacute;e. De m&ecirc;me si un objet demande plus de m&eacute;moire 
    que n&eacute;cessaire, Java lui donne plus de m&eacute;moire. Dans tous les 
    cas Java utilise le minimum de m&eacute;moire possible.<br>
    Vous ne compreniez pas pourquoi Java est dit s&ucirc;r ? Et bien par exemple 
    les buffers overflows sont tout b&ecirc;tement impossibles.<br>
    De plus la machine virtuelle inclut un v&eacute;rificateur de bytecode qui 
    ne v&eacute;rifie pas b&ecirc;tement les instructions mais regarde minutieusement 
    si le code est malveillant etc.<br>
    Pour ce qui est des droits des objets nous allons voir cela dans quelques 
    instants. Pour les applets reportez vous &agrave; l'article d&eacute;di&eacute; 
    &agrave; ce sujet.<br>
    Petit r&eacute;sum&eacute; de ce que fait le v&eacute;rificateur de bytecode 
    :<br>
    V&eacute;rifie les acc&egrave;s m&eacute;moires : gestion de la pile, acc&egrave;s 
    au dehors d'un tableau<br>
    V&eacute;rification des param&ecirc;tres, de la fa&ccedil;on dont les fonctions 
    s'enchainent etc.<br>
    V&eacute;rification du typage afin d'&eacute;viter les conversion de donn&eacute;es 
    interdites<br>
    V&eacute;rification des acc&egrave;s aux objets (priv&eacute;s, public, prot&eacute;g&eacute;s...)<br>
    En dehors du v&eacute;rificateur de bytecode on trouve le class loader. On 
    verra plus en d&eacute;tail ce qu'est une classe. Pour l'instant il faut retenir 
    que la JVM poss&egrave;de un module appel&eacute; class loader qui donne plus 
    ou moins de droits &agrave; un programme Java selon qu'il vienne de votre 
    PC ou de l'internet etc.<br>
    Bref une Applet Java ne peut pas effacer votre disque dur ou installer un 
    cheval de Troie.</font></p>
  <p align="left"><font size="2"><u>Plus de s&eacute;curit&eacute;</u><br>
    Je ne suis pas encore un Java Guru et je ne souhaite pas aborder un sujet 
    trop vaste et trop technique. Cependant Java est, comme tous les logiciels, 
    faillible. Il existe queqlues virus en Java (AppletKiller.class) et il est 
    possible de passer par dessus les r&egrave;gles de s&eacute;curit&eacute; 
    de Java (pas des failles techniques mais des failles de r&eacute;glementation). 
    Je vous invite si cela vous int&eacute;resse &agrave; lire les documents &eacute;crits 
    par les Last Stage of Delirium (LSD), ceux qui ont d&eacute;couvert la faille 
    RPC. </font></p>
  <p align="left"><font size="2"><u>Les programmes pour Java</u></font><font size="2"><br>
    Pour coder en Java vous aurez besoin du JDK. La premi&egrave;re version de 
    JDK comportait seulement 6 packages (&eacute;quivalent des librairies). Maintenant 
    il est quasiment possible de tout faire : coder un client IRC, POP3, SMTP, 
    HTTP, faire un fichier Excell, acc&eacute;der &agrave; une base de donn&eacute;es 
    MySQL, Oracle ou MSSQL, Zipper un fichier ; ya des packages pour tout &ccedil;a 
    !!<br>
    Il existe des logiciels offrant toute une interface pour la programmation 
    Java. Par exemple il y a le JBuilder de Borland ou encore le SunOne de Sun.<br>
    Personnelement je dispose de SunOne et je ne vous le recommande pas. Il est 
    fait en Java et il faut avouer que Java est lent (du aux v&eacute;rifications 
    etc..). J'en parlerai &agrave; la fin. Mais bon, c'est le prix &agrave; payer 
    pour ne avoir les bugs et profiter de la portabilit&eacute;.<br>
    Si vous ne d&eacute;sirez pas programmer mais par exemple juste profiter des 
    applets sur Internet, alors vous devez t&eacute;l&eacute;charger le JRE (Java 
    Runtime Environment). Vous le trouverez un peu partout (sur le site de Sun, 
    de Netscape... plus difficilement sur le site de Microsoft car Microsoft et 
    Sun s'envoient r&eacute;guli&egrave;rement des proc&egrave;s).<br>
    Il est bien &eacute;videmment possible de programmer sous Unix, Linux et autres.<br>
    <img src="../media/pinguoin2.gif" width="32" height="32"><br>
    Le probl&egrave;me c'est que les ditributions donnent des versions de Java 
    qui apparemment ne fonctionnent pas (ya un ex&eacute;cutable java par d&eacute;faut 
    mais je sais pas &agrave; quoi il sert). Il vous faudra alors chercher un 
    JDK. Sous Linux le plus connu est le j2sdk : Java2 Standart Develloper's Kit 
    (Java est dans sa version 2 pour l'instant).<br>
    L'installation est assez &eacute;trange car il ne s'agit pas d'un tar.gz mais 
    d'un fichier bin. Si on regarde le contenu de ce fichier on comprend qu'il 
    y a une partie script au d&eacute;but du fichier puis ensuite du code binaire. 
    Ce fichier est un fichier auto extractible. Pour installer Java sous Linux 
    faites comme suit :<br>
    Loggez vous en root<br>
    Faites un r&eacute;pertoire du style /usr/local/java<br>
    Mettez vous dans ce r&eacute;pertoire<br>
    Copiez le fichier auto extractible (.bin) dans le r&eacute;prtoire<br>
    Lancez le ( ./j2sdk*.*-*.bin o&ugrave; les &eacute;toiles repr&eacute;sentent 
    la version)<br>
    Faites un ls pour savoir quel r&eacute;pertoire il a cr&eacute;&eacute; et 
    visitez le tant que vous y &ecirc;tes<br>
    Modifiez votre .bashrc ou votre .profile afin que la PATH aille chercher dans 
    le r&eacute;pertoire qui contient java et javac (/usr/local/java/j2sdk*.*-*/bin 
    je crois)<br>
    Relancez une console et tappez 'java' pour voir ce qu'il se passe<br>
    Sous Windows, si vous n'utilisez pas un logiciel avec interface, le j2sdk 
    est en g&eacute;n&eacute;ral acompagn&eacute; d'une doc d'install car il faut 
    cr&eacute;er des variables d'environnement : JAVA_HOME et CLASSPATH.<br>
    Sous XP pour acc&egrave;der aux variables d'environnement vous faites un click 
    droit sur le poste de travail &gt; Propri&eacute;t&eacute;s &gt; Avanc&eacute; 
    &gt; Variables d'environnement et vous tombez sur un panneau qui ressemble 
    &agrave; &ccedil;a :<br>
    <img src="../media/env.jpg" width="385" height="429"> <br>
    Evidemment chez vous les variables ne sont pas fix&eacute;es.</font></p>
  <p align="left"><font size="2">Maintenant vous &ecirc;tes pr&ecirc;ts pour d&eacute;velloper 
    votre premier programme Java<img src="../media/elgringo.gif" width="30" height="20"></font></p>
</div>
