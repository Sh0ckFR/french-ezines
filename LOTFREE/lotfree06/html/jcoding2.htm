<title>Java Coding : le retour</title>
<body bgcolor="#000000" text="#FF00FF">
<div align="center">
  <p><b><font size="6"><u>Java Coding suite</u></font></b></p>
  <p align="left"><font size="2">On reprend les classes, la classe animal :</font></p>
  <div align="left"> 
    <pre align="left"><font size="2" color="#FFFFFF">package p1;<br>public class animal{<br>	protected int age;<br>	int poids;<br>	String nom;<br>}</font></pre>
  </div>
  <p align="left"><font size="2">La classe kangourou :</font></p>
  <div align="left"> 
    <pre align="left"><font size="2" color="#FFFFFF">package p1;<br>public class kangourou extends animal{<br>	private int longueur_de_saut;<br>}</font></pre>
    <p><font size="2">Et le programme en lui m&ecirc;me :</font></p>
    <pre><font size="2" color="#FFFFFF">import p1.*;<br>public class prog{<br>	animal inconu;</font></pre>
    <pre><font size="2" color="#FFFFFF"> 	prog()<br>	{<br>		try{<br>			inconu = new animal();<br>			inconu.age=5;<br>			inconu.poids=25;<br>		}<br>		catch(Exception ex){System.out.println(ex);}<br>	}</font></pre>
    <pre><font size="2" color="#FFFFFF"> 	public static void main(String []args)<br>	{<br>		prog p=new prog();<br>	}<br>}</font></pre>
    <p><font size="2">Compilation :</font></p>
    <pre><font size="2" color="#00FF00">prog.java:13: age has protected access in p1.animal<br>			inconu.age=5;<br>                  ^<br>prog.java:14: poids is not public in p1.animal; cannot be accessed from outside package<br>			inconu.poids=25;<br>                  ^<br>2 errors</font></pre>
    <p><font size="2">Erreurs explicites non ? La premi&egrave;re du &agrave; 
      l'acc&egrave;s en protected et l'autre du &agrave; l'acc&egrave;s en friendly.<br>
      La solution la plus couremment utilis&eacute;e en Java consiste &agrave; 
      rendre les attributs inaccessibles pour la plupart des classes (pas en public) 
      et &agrave; mettre des m&eacute;thodes public qui acc&egrave;dent aux attributs 
      &agrave; notre place.<br>
      Par exemple nos classes devraient ressembler &agrave; &ccedil;a :<br>
      </font></p>
    <pre><font size="2" color="#FFFFFF">package p1;<br>public class animal{<br>	protected int age;<br>	int poids;<br>	public void setPoids(int x){poids=x;}<br>	String nom;<br>}</font><font size="2">
-------------------------<br><font color="#FFFFFF">package p1;<br>public class kangourou extends animal{<br>	private int longueur_de_saut;<br>	public void setAge(int x){age=x;}<br>}</font><br>-------------------------<br><font color="#FFFFFF">import p1.*;<br>public class prog{<br>	kangourou Kangoo;<br>	animal inconu;

	prog()<br>	{<br>		try{<br>			System.out.println(&quot;dans le constructeur&quot;);<br>			Kangoo = new kangourou();<br>			inconu = new animal();<br>			Kangoo.setAge(12);<br>			inconu.setPoids(25);<br>			Kangoo.setPoids(40);<br>		}<br>		catch(Exception ex){System.out.println(ex);}<br>	}
<br>	public static void main(String []args)<br>	{<br>		System.out.println(&quot;Entry Point&quot;);<br>		prog p=new prog();<br>	}<br>}</font>
----------------------------</font></pre>
    <p><font size="2">Comme &ccedil;a, malgr&eacute;que l'age soit protected et 
      le poids soit en friendly, on acc&egrave;de sans probl&egrave;me &agrave; 
      ces attributs par les m&eacute;thodes setPoids() et setAge().<br>
      Les m&eacute;thodes ne commencent pas obligatoirement par set ou get, c'est 
      juste une habitude (une convention koi).<br>
      Les m&eacute;thodes comme setAge() sont appel&eacute;es modificateurs et 
      les getAge() sont appel&eacute;es accesseurs.<br>
      Le fait de cacher les attributs et de ne montrer que les m&eacute;thodes 
      n'est pas une obligation mais tout le monde l'utilise (une m&eacute;ga convention 
      en quelque sorte).</font></p>
    <p><font size="2">J'avais oubli&eacute; des notions importantes, les voici.<br>
      Toutes les classes que l'on utilise, que ce soient celles incluses dans 
      le JDK ou celles que l'on d&eacute;clare, h&eacute;ritent de la classe de 
      base, la classe Objet (java.lang.Objet). Des fois on entend parler de 'superclasse' 
      pour d&eacute;signer la classe m&egrave;re (ou classe anc&egrave;tre). Si 
      vous avez bien suivi vous avez d&eacute;vin&eacute; que la classe Objet 
      est la superclasse de toutes les classes.<br>
      Cette classe est importante car elle poss&egrave;de quelques m&eacute;thodes 
      tr&egrave;s utiles, m&eacute;thodes qui seront utilisables par n'importe 
      quelle classe.<br>
      Parmis ces m&eacute;thodes il y a :<br>
      Objet clone()<br>
      La m&eacute;thode clone() renvoie une copie de l'objet en cours. Il faut 
      l'utiliser car une simple affectation ne marche pas. Si on fait :<br>
      kangourou k1=new kangourou();<br>
      kangourou k2=new kangourou();<br>
      k1=k2;<br>
      cela ne vas pas donner au kangourou k1 les propri&eacute;t&eacute;s du kangourou 
      k2. Cela va faire pointer k1 vers k2 (au niveau des adresses m&eacute;moires). 
      Si ce concept ne vous dit rien, je vous conseille d'&eacute;tudier un peu 
      l'assembleur ou les pointeurs en C. Si on veut avoir sa fonction de recopie 
      on peut d&eacute;clarer par exemple pour la classe kangourou :</font></p>
    <pre><font size="2">
<font color="#FFFFFF">public static void recopie(kangourou k1, kangourou k2)
{
  k1.age=k2.age;<br>  k1.poids=k2.poids;
  k1.nom=k2.nom;
}</font></font></pre>
    <p><font size="2">Bref le mot cl&eacute; static est tr&egrave;s utile :) Pour 
      revenir &agrave; notre m&eacute;thode clone(), on peut faire :<br>
      <font color="#FFFFFF">k1=k2.clone();</font></font></p>
    <p><font size="2">Il y a aussi la fonction boolean equals(Objet obj) qui permet 
      de comparer deux objets sur leurs contenus (car pour les m&ecirc;me raisons 
      (k1==k2) ne fait un test que sur les adresses m&eacute;moires).<br>
      Pour faire une vraie comparaison on va faire :<br>
      <font color="#FFFFFF">if (k1.equals(k2)){...</font></font></p>
    <p><font size="2">Une m&eacute;thode TR&Egrave;S utilis&eacute;e est la m&eacute;thode 
      toString(), elle renvoie une String qui contient la valeur de l'objet. C'est 
      souvent cette fonction qui nous lib&egrave;re des probl&egrave;mes de conversion.<br>
      Il reste d'autres m&eacute;thodes dans la classe Object mais je ne les pr&eacute;sente 
      pas.<br>
      Vous avez peut-&ecirc;tre remarqu&eacute; que Java respecte les conventions 
      avec les classes qu'il fournit :)</font></p>
    <p><font size="2">Une m&eacute;thode utile est la m&eacute;thode System.gc() 
      qui appelle le garbage collector (ramasse miette en Fran&ccedil;ais). Ne 
      l'utilisez pas comme un maniaque cela ne servirait &agrave; rien. Le garbage 
      collector est automatiquement lanc&eacute; en tant que thread (une tache 
      de fond en quelque sorte).Cest lui qui fait le m&eacute;nage dans la m&eacute;moire. 
      Il peut &ecirc;tre utile de l'appeler dans des programmes qui font des &eacute;normes 
      calculs de fa&ccedil;on continue car dans ce cas les calculs ne laissent 
      pas au garbage collector le temps d'intervenir. A utiliser que dans les 
      brute forceur de mot de passe :)</font></p>
    <p><font size="2">-- je fais une pause ici. demain constructeurs, surcharge, 
      tableaux puis on &eacute;tudiera un programme sympa pour nous :) --</font></p>
    <p><font size="2"><u>Le polymorphisme</u><br>
      Le polymorphisme est une notion li&eacute;e &agrave; l'h&eacute;ritage. 
      Le polymorphisme fait que lorsque l'on instance un objet, celui-ci est vu 
      comme une instance de sa classe et de ses sous classes.<br>
      Par exemple quand on d&eacute;clare un kangourou, on d&eacute;clare en m&ecirc;me 
      temps un animal et un Object (superclasse). Le polymorphisme permet des 
      affectations telles que :<br>
      <font color="#FFFFFF">animal a=new kangourou();</font><br>
      ou encore<br>
      <font color="#FFFFFF">animal a=new animal();<br>
      kangourou k=new kangourou();<br>
      a=k;</font></font></p>
    <p><font size="2">Evidemment cela ne marche pas dans l'autre sens (kangourou 
      k=new animal()) car un kangourou poss&egrave;de des caract&egrave;ristiques 
      suppl&eacute;mentaires que la classe animal ne poss&egrave;de pas.</font></p>
    <p><font size="2"><u>La red&eacute;finition</u><br>
      Il peut arriver que l'on ai besoin de red&eacute;finir une m&eacute;thode. 
      Qu'est-ce que cela veut dire ? Cela veut dire que par exemple on a une classe 
      A : </font></p>
    <pre><font size="2" color="#FFFFFF">class A<br>{<br>  public A()<br>  {<br>    System.out.println(&quot;Dans le constructeur de la classe A&quot;);<br>  }</font></pre>
    <pre>  <font size="2" color="#FFFFFF">public void oukon&eacute;()
  {
    System.out.println(&quot;On est dans la classe A&quot;);
  }
}</font></pre>
    <p><font size="2">Ensuite on cr&eacute;e une classe B, fille de A dans laquelle 
      on red&eacute;finit la m&eacute;thode oukon&eacute; :</font></p>
    <pre><font size="2" color="#FFFFFF">class B extends A<br>{<br>	public B()<br>	{<br>		System.out.println(&quot;Dans le constructeur de la classe B&quot;);<br>	}

	public void oukon&eacute;()<br>	{<br>		//super.oukon&eacute;();<br>		System.out.println(&quot;On est dans la classe B&quot;);<br>	}<br>}</font></pre>
    <p><font size="2">Evidemment on fait notre programme principal &agrave; part 
      :</font></p>
    <pre><font size="2" color="#FFFFFF">class Prog<br>{<br>	A a;<br>	B b;


	Prog()<br>	{<br>		System.out.println(&quot;+ new A&quot;);<br>		a=new A();<br>		System.out.println(&quot;+ new B&quot;);<br>		b=new B();<br>	}


	public void run()<br>	{<br>		System.out.println(&quot;+ a.oukon&eacute;()&quot;);<br>		a.oukon&eacute;();<br>		System.out.println(&quot;+ b.oukon&eacute;()&quot;);<br>		b.oukon&eacute;();<br>	}


	public static void main(String args[])<br>	{<br>		Prog p=new Prog();<br>		p.run();<br>	}<br>}</font></pre>
    <p><font size="2">Vous avez l&agrave; une fa&ccedil;on de programmer en Java 
      on ne peut plus classique. Tout d'abord on d&eacute;clare les attributs 
      de la classe. Ensuite dans le constructeur on s'occupe des allocations et 
      enfin on appelle une m&eacute;thode run() qui se charge des instructions 
      principales du programme. Voyons ce qu'il se passe losrque nous lan&ccedil;ons 
      le programme :</font></p>
    <pre><font size="2" color="#00FF00">+ new A<br>Dans le constructeur de la classe A<br>+ new B<br>Dans le constructeur de la classe A<br>Dans le constructeur de la classe B<br>+ a.oukon&eacute;()<br>On est dans la classe A<br>+ b.oukon&eacute;()<br>On est dans la classe B</font></pre>
    <p><font size="2">D'abord la m&eacute;thode que l'on appelle le constructeur 
      est celle qui est lan&ccedil;&eacute;e lorsque on utilise la new(); Le constructeur 
      n'a pas de type et porte exactement le m&ecirc;me nom que la classe. Si 
      on ne d&eacute;clare pas de constructeur pour une classe, c'est le constructeur 
      de la classe Object qui est appel&eacute;. Ce dernier se charge de faire 
      une allocation m&eacute;moire tout ce qu'il y a de plus typique.<br>
      Mais &eacute;tudions l'output du programme. La premi&egrave;re ligne (comme 
      toutes les lignes que j'ai pr&eacute;c&eacute;d&eacute; du signe +) permet 
      de savoir o&ugrave; on est dans le programme (affichage sur la sortie standard). 
      La seconde ligne correspond &agrave; l'instruction a=new A();<br>
      Ensuite on passe dans le constructeur de A puis de B. Cela correspond &agrave; 
      l'instruction b=new B();<br>
      Le constructeur de la classe d&eacute;riv&eacute;e appelle automatiquement 
      le constructeur de la classe m&egrave;re. Il y a comme un syst&egrave;me 
      de poup&eacute;es russes. Cela est tout &agrave; fait normal si on veut 
      que l'objet soit convenablement cr&eacute;e.</font></p>
    <p><font size="2">Passons &agrave; ce qui suit. On appelle la m&eacute;thode 
      a.oukon&eacute;() qui nous dit que l'on est dans la classe A. Quand on appelle 
      le b.oukon&eacute;() on remarque que contrairement &agrave; pr&eacute;c&eacute;demment 
      on ne passe pas par la classe A. En effet le fait de remonter les classes 
      ne marche qu'avec les constructeurs.<br>
      On remarque aussi que A et B ont une m&eacute;thode du m&ecirc;me nom. On 
      dit que l'on a 'red&eacute;fini' la m&eacute;thode oukon&eacute;().<br>
      Java marche de la fa&ccedil;on suivante : si on appelle la m&eacute;thode 
      oukon&eacute;() de l'objet b, Java va regarder si cet objet poss&egrave;de 
      effectivement une m&eacute;thode oukon&eacute;(). Si c'est le cas, il l'ex&eacute;cute 
      et s'arr&ecirc;te sinon il remonte d'une classe et recommence &agrave; chercher...</font></p>
    <p><font size="2">Maintenant imaginons que l'on veuille que notre fonction 
      marche de la m&ecirc;me fa&ccedil;on que les constructeurs. Pour cela on 
      utilise le mot cl&eacute; super. super d&eacute;signe la classe m&egrave;re. 
      On enl&egrave;ve donc le '//', qui sert de commentaire, dans la classe B 
      afin que l'instruction <font color="#FFFFFF">super.oukon&eacute;()</font> 
      soit effectu&eacute;. On a alors :</font></p>
    <pre><font size="2" color="#00FF00">+ b.oukon&eacute;()
On est dans la classe A
On est dans la classe B</font></pre>
    <p><font size="2">Si vous faites appel au super, vous devez le faire en premier 
      lieu, sans quoi la compilation ne marchera pas.</font></p>
    <p><font size="2"><u>Les tableaux</u><br>
      Ben finalement vous y avez droit (bande de ptits veinards :)<br>
      Si on veut d&eacute;clarer un tableau de 10 entiers on &eacute;crit :<br>
      <font color="#FFFFFF">int [] tab=new int [10];</font><br>
      L'utilisation de new est obligatoire.<font color="#FFFFFF"> int tab[10]</font> 
      ne marchera pas.<br>
      Pour savoir la taille d'un tableau il y a l'attribut length. Par exemple<font color="#FFFFFF"> 
      tab.length</font> vaut 10.<br>
      Tableau avec des valeurs p&eacute;d&eacute;finies :<font color="#FFFFFF"> 
      int tab[] = {1,2,3,4,5,6}</font><br>
      Une matrice : <font color="#FFFFFF">int atb [][] = new int [4][];</font> 
      On est oblig&eacute; de fournir la taille de la premi&egrave;re dimension.<br>
      <font color="#FFFFFF">int [] x, y[];</font> correspond &agrave; <font color="#FFFFFF">int 
      x[];</font> et<font color="#FFFFFF"> int y[][];</font></font></p>
    <p><font size="2"><u>La surcharge</u><br>
      Cela consiste &agrave; mettre dans une m&ecirc;me classe deux fois ou plus 
      la m&ecirc;me m&eacute;thode mais avec des profil diff&eacute;rents.<br>
      A quoi &ccedil;a sert ? Et bien si on fait une classe Point et qu'on veut 
      avoir plusieurs fa&ccedil;on de d&eacute;clarer un point, par exemple :<br>
      <font color="#FFFFFF">Point p1=new Point();<br>
      Point p2=new Point(x, y);<br>
      Point p3=new Point(p2);</font><br>
      Dans ce cas il faudra d&eacute;clarer les fonctions :<br>
      <font color="#FFFFFF">Point()<br>
      Point(int a,int b)<br>
      Point(Point p)</font><br>
      La encore c'est un concept super pratique car on est pas oblig&eacute; de 
      retenir quarante noms de fonctions...</font></p>
    <p><font size="2">Petit ajout que j'avais oubli&eacute; lors de l'&eacute;criture 
      :<u> les exceptions</u><br>
      La classe Exception permet de g&eacute;rer les &eacute;ventuelles erreurs 
      et poss&egrave;de des m&eacute;thodes permettant de savoir explicitement 
      quelle erreur a &eacute;t&eacute; provoqu&eacute;.<br>
      Il n'est pas n&eacute;cessaire de mettre des exceptions partout : quand 
      cela est n&eacute;cessaire le compilateur Java le dit de fa&ccedil;on tr&egrave;s 
      compr&eacute;hensible.<br>
      Une fois un syst&egrave;me d'exception inclus dans notre programme et si 
      une erreur se produit dans la section de notre exception, on dit que une 
      exception a &eacute;t&eacute; 'lev&eacute;e'.<br>
      Au niveau programmation Java, une exception est un objet qui dialogue avec 
      la JVM (machine virtuelle Java pour les distraits).<br>
      Il y a un tas de types d'exceptions, toutes h&eacute;ritent de la super 
      classe Exception.<br>
      Il y a deux fa&ccedil;ons de g&eacute;rer les exceptions :</font></p>
    <p><font size="2">- avec les try, catch, et finally</font></p>
    <pre><font size="2">try
{
    le_code_qui_peut_&eacute;ventuellement_lever_une_exception
}
catch(le_type_d'exception)
{
    traitement_de_l'exception
}
finally
{
    que_tout_se_passe_bien_ou_non_on_passe_ici
}
</font></pre>
    <p><font size="2">- avec un throw</font></p>
    <pre><font size="2">type fonction_qui_contient_le_code_&agrave;_exception() throws le_type_d'exception{<br>Bref on rajoute cela &agrave; la ligne de d&eacute;claration de la fonction</font></pre>
    <p><font size="2">Que faire dans un catch(Exception e) ? Soit un System.out.println(e.toString()) 
      soit un System.out.println(e.printStackTrace()). Je vous laisse un peu fouiller 
      sur Internet quand m&ecirc;me ;)</font></p>
    <font size="2"></font>
    <p><font size="2"><u>R&eacute;sum&eacute; et quelques notes suppl&eacute;mentaires</u><br>
      Toutes les classes h&eacute;ritent de la classe de base, la classe Object 
      (la superclasse).<br>
      Cette classe poss&egrave;de des m&eacute;thodes qui peuvent s'av&egrave;rer 
      tr&egrave;s utiles (clone() et toString()).<br>
      Par convention on cache les attributs et on ne montre que les m&eacute;thodes. 
      L'ensemble des m&eacute;thodes visibles constituent &quot;l'interface&quot;.<br>
      Le polymorphisme est le fait qu'un objet d'une classe donn&eacute;e peut 
      &ecirc;tre vu comme une instance d'une de ses classes m&egrave;re.<br>
      La red&eacute;finition est le fait de recr&eacute;er une m&eacute;thode 
      d&eacute;j&agrave; d&eacute;finie dans la classe m&egrave;re.<br>
      Le mot cl&eacute; this d&eacute;signe la classe en cours et le mot cl&eacute; 
      super d&eacute;signe la classe m&egrave;re.<br>
      Le constructeur d'une classe commence par appeler les constructeurs des 
      classes dont il h&eacute;rite.<br>
      La surcharge consiste &agrave; donner le m&ecirc;me nom &agrave; des fonctions 
      d'une m&ecirc;me classe mais avec des profils (type et nombre d'arguments) 
      diff&eacute;rents.</font></p>
    <p><font size="2">Voil&agrave;, j'ai pas tout expliqu&eacute; et il se peut 
      que j'ai dit quelques conneries mais vous avez l&agrave; les notions importantes 
      de la POO en Java.<br>
      Passez maintenant &agrave; l'&eacute;tude d'un petit programme Java histoire 
      de mettre en pratique ce que l'on a vu.</font></p>
  </div>
</div>
