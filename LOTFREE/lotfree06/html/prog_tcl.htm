<html>
<head>
<title>Programmation avec Tcl - sirius_black</title>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
</head>

<body bgcolor="#000000" text="#FF00FF" link="#00FF00">
<div align="center">
  <p><font size="6"><b><u>Programmation Tcl</u></b></font></p>
  <p><font size="2">Et c'est reparti pour de la prog !! Ouais !! <img src="../media/comic.gif" width="175" height="75"></font></p>
  <p align="left"><font size="2">Tcl est un langage de programmation dont vous 
    avez s&ucirc;rement d&eacute;j&agrave; entendu parler. Mais pas tout seul 
    : on entend parler plus souvent de Tcl/Tk ou de Tcl/Expect etc.<br>
    Il faut l'avouer Tcl est loin d'&ecirc;tre un langage &eacute;volu&eacute;, 
    il peut &ecirc;tre tr&egrave;s int&eacute;ressant pour d&eacute;buter en programmation 
    mais ses capacit&eacute;s sont tr&egrave;s limit&eacute;es. Tcl est la langage 
    utilis&eacute; pour coder les eggdrops (j'entre pas plus dans ce sujet que 
    je ne ma&icirc;trise pas).<br>
    Cet article est une suite de trois articles : maintenant nous allons &eacute;tudier 
    le langage Tcl, ensuite nous utiliserons Expect qui peut &ecirc;tre vu comme 
    une &quot;extension&quot; de Tcl et pour finir, l'objectif final : nous essayerons 
    de coder un vers avec ces langages.<br>
    Pourquoi choisir Tcl pour faire un worm plut&ocirc;t que le C ? Premi&egrave;rement 
    parce que l'objectif &eacute;tait avant tout de faire un article pas forc&eacute;ment 
    technique sur les worms. Il s'agissait plut&ocirc;t de comprendre la fa&ccedil;on 
    dont ils fonctionnent, les diff&eacute;rentes &eacute;tapes etc. Ensuite c'est 
    mon premier worm donc faut pas s'attendre &agrave; une version en C#31337 
    (c'est une nouvelle version du C LoL).</font></p>
  <p align="left"><b>C parti : les variables</b><font size="2"><br>
    Je le r&eacute;p&egrave;te : vous n'avez pas besoin d'avoir d&eacute;j&agrave; 
    programm&eacute; pour faire du Tcl. C'est un langage tr&egrave;s intuitif 
    (les instructions sont parlantes). A part &ccedil;a Tcl est surtout un langage 
    interpr&eacute;t&eacute;, tout comme le Perl, le Bash, le PHP. Bref pas de 
    compilation comme en C, C++... On appelle un programme en Tcl un script.<br>
    Pour faire du Tcl vous avez besoin d'un interpr&eacute;teur Tcl. Celui-ci 
    se nomme Tclsh. Il peut &ecirc;tre utilis&eacute; comme un shell, ce qui explique 
    le 'sh' &agrave; la fin de Tclsh.<br>
    Tcl est &agrave; priori dispo pour Windows, il suffit de le t&eacute;l&eacute;charger. 
    Pour les utilisateurs de Linux, il est d&eacute;j&agrave; install&eacute; 
    (faites un 'whereis tclsh' pour savoir ou se trouve l'interpr&eacute;teur).<br>
    Tcl signifie Tool Command Language. C'est donc un programme qui ne fait qu'appeler 
    des commandes, tout comme le fait un programme bash ou batch.<br>
    Tcl ne manipule que des cha&icirc;nes de caract&egrave;res. Bien s&ucirc;r 
    on peut g&eacute;n&eacute;rer des nombres, les additionner... mais Tcl les 
    conserve en m&eacute;moire comme &eacute;tant des cha&icirc;nes de caract&egrave;res.</font></p>
  <p align="left"><font size="2">La syntaxe du langage est tr&egrave;s simple 
    ;-) :<br>
    <font color="#FFFFFF"><b>commande</b> arg arg arg ...</font><br>
    Bref c comme si vous tappiez une commande sous Unix.<br>
    Il n'est pas n&eacute;cessaire de d&eacute;clarer les variables en Tcl (comme 
    pour le PHP). Les variables commencent par le caract&egrave;re dollar ($). 
    Lorsque l'on fait r&eacute;f&eacute;rence &agrave; une variable, Tcl la remplace 
    par sa valeur et ex&eacute;cute la commande demand&eacute;e. L'affectation 
    d'une valeur &agrave; une variable ne demande pas la pr&eacute;sence du $.<br>
    Exemple :</font></p>
  <p align="left"><font size="2" color="#FFFFFF"><b>set</b> nom<font color="#00FFFF"> 
    &quot;Alice&quot;</font><br>
    <b>puts</b> <font color="#00FFFF">&quot;Mon nom est $nom&quot;</font></font></p>
  <p align="left"><font size="2">Donnera l'affichage : <font color="#0000FF">Mon 
    nom est Alice</font><br>
    A la premi&egrave;re ligne, la variable 'nom' est cr&eacute;e et la valeur 
    'Alice' lui est attribu&eacute;e. A la seconde ligne, Tcl remplace '<font color="#FFFFFF">$nom</font>' 
    par '<font color="#00FFFF">Alice</font>' (substitution) et lance la commande 
    puts qui permet l'affichage de texte &agrave; l'&eacute;cran.<br>
    Deuxi&egrave;me exemple :</font></p>
  <p align="left"><font size="2" color="#FFFFFF"><b>set</b> jour 23<br>
    <b>set</b> mois 11<br>
    <b>set</b> annee 2003<br>
    <b>set</b> date <font color="#00FFFF">&quot;$jour:$mois:$annee&quot;</font><br>
    <b>puts</b> $date</font></p>
  <p align="left"><font size="2">Provoque l'affichage : <font color="#0000FF">23:11:2003</font></font></p>
  <p align="left"><b>Les commandes</b><font size="2"><br>
    Maintenant que nous avons vu la substitution des variables, pourquoi ne pas 
    &eacute;tudier la substitution des commandes. Cette m&eacute;thode, tr&egrave;s 
    utilis&eacute;e en Tcl, fonctionne de la m&ecirc;me fa&ccedil;on que pour 
    les variables : Tcl commence par faire les calculs demand&eacute;s par la 
    ou les commandes. Le r&eacute;sultat est une cha&icirc;ne de caract&egrave;re 
    qui vient remplacer les commandes qui l'ont g&eacute;n&eacute;r&eacute;es. 
    Tcl effectue ensuite la commande principale. Cela passera mieux avec un exemple 
    ;-)</font></p>
  <p align="left"><font size="2" color="#FFFFFF"><b>set</b> ope <font color="#00FFFF">&quot;<b>puts</b> 
    HelloWorld&quot;</font><br>
    <b>eval</b> $ope</font></p>
  <p align="left"><font size="2">On obtient : <font color="#0000FF">HelloWorld</font>. 
    La commande eval permet comme son nom l'indique d'&eacute;valuer une commande. 
    Ici on d&eacute;clare une variable 'ope' qui contient la commande '<font color="#FFFFFF"><b>puts</b> 
    HelloWorld</font>'.<br>
    La deuxi&egrave;me &eacute;tape est l'&eacute;valuation de cette commande. 
    Tcl voit qu'il doit &eacute;valuer la variable 'ope'. Comme c'est une variable, 
    il la substitue par sa valeur : '<font color="#FFFFFF"><b>puts</b> HelloWorld</font>' 
    puis il lance la commande obtenue. <br>
    Une autre fa&ccedil;on de faire des substitutions de commandes est d'utiliser 
    des crochets. Dans l'exemple suivant nous appelons la commande expr qui permet 
    d'effectuer des op&eacute;rations math&eacute;matiques.</font></p>
  <p align="left"><font size="2" color="#FFFFFF"><b>set</b> euros 15<br>
    <b>set</b> francs [<b>expr</b> $euros*6.55957]<br>
    <b>puts</b> $francs</font></p>
  <p align="left"><font size="2">donne <font color="#0000FF">98.39355</font>. 
    Les crochets remplacent donc une commande par son r&eacute;sultat.<br>
    Quelques pr&eacute;cisions &agrave; apporter sur la syntaxe de Tcl : tous 
    les arguments doivent &ecirc;tre des cha&icirc;nes de caract&egrave;res. Les 
    arguments doivent &ecirc;tre s&eacute;par&eacute;s par un espace ou une tabulation. 
    Les commandes sont soit s&eacute;par&eacute;es par un point virgule ou un 
    retour &agrave; la ligne.</font></p>
  <p align="left"><b>Les caract&egrave;res sp&eacute;ciaux</b><font size="2"><br>
    Il suffit de mettre un backslash devant un caract&egrave;re pour lui enlever 
    ou lui rajouter un sens sp&eacute;cial.</font></p>
  <p align="left"><font size="2" color="#FFFFFF"><b>set</b> phrase <font color="#00FFFF">&quot;J'ai 
    20\$ dans\nmon portefeuille&quot;</font><br>
    <b>puts</b> $phrase</font></p>
  <p align="left"><font size="2">donnera :<br>
    <font color="#0000FF">J'ai 20$ dans<br>
    mon portefeuille</font></font></p>
  <p align="left"><font size="2">Vous trouverez les caract&egrave;res sp&eacute;ciaux 
    dans <a href="Tcl-Tk%20Tables.htm#HDR1.1">cette annexe</a>.</font></p>
  <p align="left"><font size="2">La commande expr permet d'effectuer beaucoup 
    d'expressions arithm&eacute;tiques.<br>
    <font color="#FFFFFF"><b>expr</b> 1 == 0</font> donnera<font color="#0000FF"> 
    0</font> (op&eacute;ration bool&eacute;enne) <font color="#FFFFFF"><b>expr</b> 
    5+4</font> renverra<font color="#0000FF"> 9</font>.<br>
    Les op&eacute;rateurs arithm&eacute;tiques et fonctions math&eacute;matiques 
    disponibles sont list&eacute;es<a href="Tcl-Tk%20Tables.htm#HDR1.2"> ici</a>.</font></p>
  <p align="left"><font size="2">Une m&eacute;thode utilis&eacute;e pour emp&eacute;cher 
    la substitution des caract&egrave;res sp&eacute;ciaux et donc des variables 
    etc. est l'utilisation des accolades. Les accolades emp&egrave;chent la substitution. 
    Tout ce qui se trouve entre accolades est pris tel quel, m&ecirc;me les passages 
    &agrave; la lignes. Reprenons la phrase suivante :</font></p>
  <p align="left"><font size="2" color="#FFFFFF"><b>set</b> phrase {<font color="#00FFFF">J'ai 
    20$ dans<br>
    mon portefeuille</font>}</font></p>
  <p align="left"><font size="2">donne le m&ecirc;me r&eacute;sultat que tout 
    &agrave; l'heure.</font></p>
  <p align="left"><b>Les commentaires</b><font size="2"><br>
    Ils commencent par le cacarct&egrave;re di&egrave;se (#). Si ils se trouvent 
    apr&egrave;s une instruction cette instruction doit se terminer par un point-virgule.<br>
    <font color="#FF9900">#Ce script affiche la longueur de la chaine &quot;Hello&quot; 
    additionn&eacute; &agrave; la valeur 7</font><font color="#FFFFFF"><br>
    <b>set</b> len [<b>expr</b> [<b>string</b> <b>length</b> <font color="#00FFFF">Hello</font>] 
    + 7] ; <font color="#FF9900">#deux &eacute;valuations de commande</font><br>
    <b>puts</b> $len ;<font color="#FF9900"># Affiche 12</font></font></font></p>
  <p align="left"><font size="2">Ne vous inquietez pas pour les commandes, elles 
    sont toutes dans l'annexe.</font></p>
  <p align="left"><b>D'autres commandes</b><font size="2"><br>
    unset permet la destruction d'une variable : <font color="#FFFFFF"><b>unset</b> 
    phrase</font> (on ne met pas le dollar)<br>
    append permet de concat&eacute;ner des variables<br>
    <font color="#FFFFFF"><b>set</b> phrase<font color="#00FFFF"> &quot;LOTFREE&quot;</font><br>
    <b>append</b> phrase <font color="#00FFFF">&quot; n&deg;6&quot;</font><br>
    <b>puts</b> $phrase</font></font></p>
  <p align="left"><font size="2">donne <font color="#0000FF">LOTFREE n&deg;6</font></font></p>
  <p align="left"><font size="2">La commande format permet de choisir un format 
    d'affichage de la m&ecirc;me fa&ccedil;on que les commandes printf en C<br>
    <font color="#FFFFFF"><b>set</b> a 24.236784; <b>set</b> b secondes<br>
    <b>puts</b> [<b>format</b> <font color="#00FFFF">&quot;a = %5.3f %s&quot;</font> 
    $a $b]</font><br>
    donne <font color="#0000FF">a = 24.237 secondes</font></font></p>
  <p align="left"><font size="2">Il existe bien d'autres commandes ce serait trop 
    long de toutes les passer en revue.</font></p>
  <p align="left"><b>Les listes</b><font size="2"><br>
    Les listes constituent une des capacit&eacute;s int&eacute;ressantes de Tcl. 
    Les commandes d&eacute;di&eacute;es aux listes commencent g&eacute;n&eacute;ralement 
    par la lettre 'l'.<br>
    Une liste n'est rien de plus qu'un ensemble de cha&icirc;nes de caract&egrave;res 
    s&eacute;par&eacute;es par des blancs.<br>
    <font color="#FFFFFF"><b>set</b> a 5;</font><font color="#FF9900"># a=5</font><br>
    <font color="#FFFFFF"><b>set</b> liste1 {<font color="#00FFFF">un deux trois</font>} 
    ;</font><font color="#FF9900"># liste1=&quot;un deux trois&quot;</font><br>
    <font color="#FFFFFF"><b>set</b> liste2 <font color="#00FFFF">&quot;4 $a 6&quot;</font> 
    ;</font><font color="#FF9900"># liste2=&quot;4 5 6&quot;</font><br>
    <font color="#FFFFFF"><b>set</b> liste3 [<b>list</b> $liste1 $liste2]</font><br>
    <font color="#FFFFFF"><b>puts</b> liste3 ;</font><font color="#FF9900"># Donne 
    {un deux trois} {4 5 6}</font></font></p>
  <p align="left"><font size="2">Les listes permettent d'ajouter des &eacute;l&eacute;ments 
    de fa&ccedil;ons dynamique et d'y acc&egrave;der simplement etc.<br>
    Malheureusement &ccedil;a permet pas de tuer ce con de Pikachu !! <img src="../media/pikacreve.gif" width="75" height="32"></font></p>
  <p align="left"><b>Les tableaux</b><font size="2"><br>
    <font color="#FFFFFF"><b>set</b> montableau(0)<font color="#00FFFF"> &quot;Z&eacute;ro&quot;</font><br>
    <b>set</b> montableau(1) <font color="#00FFFF">&quot;Un&quot;</font><br>
    <b>set</b> montableau(2)<font color="#00FFFF"> &quot;Deux&quot;</font><br>
    <b>for</b> {<b>set</b> i 0}{i &lt; 3}{<b>incr</b> i 1}{<br>
    &nbsp;&nbsp;&nbsp;<b>puts</b> $montableau($i)<br>
    }</font></font></p>
  <p align="left"><font size="2">donne :<br>
    <font color="#0000FF">Z&eacute;ro<br>
    Un<br>
    Deux</font></font></p>
  <p align="left"><font size="2">Comme pour le PHP un tableau peut avoir des indices 
    non num&eacute;riques : <font color="#FFFFFF"><b>set</b> montableau(animal) 
    <font color="#00FFFF">&quot;Kangourou&quot;</font></font> ;-)</font></p>
  <p align="left"><font size="2">Les variables d'environnement sont accessibles 
    &agrave; travers le tableau pr&eacute;d&eacute;finis 'env'. Ex : <b><font color="#FFFFFF">puts</font></b><font color="#FFFFFF"> 
    $env(DISPLAY)</font></font></p>
  <p align="left"><b>Les tests</b><font size="2"><br>
    Comme dans tout langage de programmation il est possible de faire des branchements 
    conditionnels.<br>
    Les structures possibles sont les suivantes :<br>
    <font color="#FFFFFF"><b>if</b> {<i>test</i>} {<br>
    &nbsp;&nbsp;&nbsp;instructions_&agrave;_effectuer_si_la_condition_est_v&eacute;rifi&eacute;e<br>
    }</font></font></p>
  <p align="left"><font size="2">Il est possible d'ex&eacute;cuter des instructions 
    si la condition n'est pas vrai :<br>
    <font color="#FFFFFF"><b>if</b> {<i>test</i>}{<br>
    &nbsp;&nbsp;&nbsp;instructions_&agrave;_effectuer_si_la_condition_est_v&eacute;rifi&eacute;e<br>
    } <b>else</b> {<br>
    &nbsp;&nbsp;&nbsp;instructions_&agrave;_effectuer_si_la_condition_n'est_pas_v&eacute;rifi&eacute;e<br>
    }</font></font></p>
  <p align="left"><font size="2">Enfin avec plusieurs tests &agrave; la suite 
    :<br>
    <font color="#FFFFFF"><b>if</b> {<i>test_1</i>}{<br>
    &nbsp;&nbsp;&nbsp;instructions_&agrave;_r&eacute;aliser_si_la_condition_test_1_est_vrai<br>
    } <b>elseif</b> {<i>test_2</i>}{<br>
    &nbsp;&nbsp;&nbsp;instructions_&agrave;_r&eacute;aliser_si_la_condition_test_1_n'est_pas_r&eacute;alis&eacute;_mais_que_la_condition_test_2_est_bonne<br>
    }<b> else</b> {<br>
    &nbsp;&nbsp;&nbsp;instructions_&agrave;_effectuer_si_aucune_des_conditions_ne_s'est_r&eacute;alis&eacute;e<br>
    }</font></font></p>
  <p align="left"><font size="2"><b>Attention !!</b> On ne peut ins&eacute;rer 
    de sauts de ligne qu'&agrave; l'int&eacute;rieur des accolades alors utilisez-les 
    toujours de la fa&ccedil;on que l'on vient de voir.</font></p>
  <p align="left"><font size="2">Pour ce qui est des conditions, ce doit &ecirc;tre 
    des variables dites 'bool&eacute;ennes' (qui prennent comme valeur, soit vrai, 
    soit faux).<br>
    Pour obtenir une valeur bool&eacute;enne on peut par exemple comparer deux 
    chiffres.<br>
    Inf&eacute;rieur : <font color="#FFFFFF">$a &lt; $b</font><br>
    Sup&eacute;rieur : <font color="#FFFFFF">$a &gt; $b</font><br>
    Egal : <font color="#FFFFFF">$a == $b</font><br>
    Diff&eacute;rent : <font color="#FFFFFF">$a != $b</font><br>
    Sup&eacute;rieur ou &eacute;gal :<font color="#FFFFFF"> $a &gt;= $b</font><br>
    Inf&eacute;rieur ou &eacute;gal : <font color="#FFFFFF">$a &lt;= $b</font></font></p>
  <p align="left"><font size="2">Vous n'&ecirc;tes pas oblig&eacute; de comparer 
    des variables (ouf !!), vous pouvez comparer une variable avec une valeur 
    ou deux variables ensembles etc.<br>
    <font color="#FFFFFF"><b>if</b> {$nom == <font color="#00FFFF">&quot;sirius&quot;</font> 
    } {<br>
    ...<br>
    } <b>elseif</b> { $val &lt; 5}{ ...</font></font></p>
  <p align="left"><b>Les boucles</b><br>
    <font size="2">La fa&ccedil;on dont les boucles sont form&eacute;es n'est 
    pas si &eacute;loign&eacute;es des structures conditionnelles. Commen&ccedil;ont 
    par la boucle for :<br>
    <font color="#FFFFFF"><b>for</b> <i>{initialisations</i>} {<i>test_de_fin_de_boucle</i>} 
    {<i>incr&eacute;mentations</i>}{<br>
    &nbsp;&nbsp;&nbsp;corps_de_la_boucle<br>
    } </font></font></p>
  <p align="left"><font size="2">Exemple :<br>
    <font color="#FFFFFF"><b>for</b> {<b>set</b> i 0} {$i &lt; 6} {<b>incr</b> 
    i}{<br>
    &nbsp;&nbsp;&nbsp;<b>puts</b> -nonewline $i<br>
    }</font><br>
    donnera comme r&eacute;sultat :<font color="#0000FF"> 012345</font><br>
    L'option nonewline permet simplement de ne pas passer &agrave; la ligne &agrave; 
    chaque affichage.</font></p>
  <p align="left"><font size="2">La boucle while, permet de r&eacute;p&eacute;ter 
    une instruction (ou une suite d'instructions) tant que la condition g&eacute;n&eacute;rale 
    est v&eacute;rifi&eacute;e.<br>
    <font color="#FFFFFF"><b>set</b> i 10<br>
    <b>while</b> {$i &gt; 0}{<br>
    &nbsp;&nbsp;&nbsp;<b>puts</b> $i<br>
    &nbsp;&nbsp;&nbsp;<b>incr</b>&nbsp; i &nbsp;-1<br>
    }</font><br>
    feras passer la variable $i de 10 &agrave; 0.</font></p>
  <p align="left"><font size="2">Une commande d&eacute;riv&eacute;e de la boucle 
    for est la boucle foreach qui permet de traiter tous les &eacute;l&egrave;ments 
    d'une liste.<br>
    <font color="#FFFFFF"><b>foreach</b> variable {liste_de_variables_&agrave;_prendre}{<br>
    &nbsp;&nbsp;&nbsp;corps_de_boucle<br>
    }</font><br>
    exemple :<br>
    <font color="#FFFFFF"><b>puts</b><font color="#00FFFF"> &quot;Les distribs 
    Linux sont :&quot;</font><br>
    <b>foreach</b> nom {<font color="#00FFFF">Mandrake RedHat Debian Knoppix Slackware 
    Suse Caldera</font>}{<br>
    &nbsp;&nbsp;&nbsp;<b>puts</b> $nom<br>
    }</font><br>
    Affichera les diff&eacute;rentes distrib Linux. Cette commande est tr&egrave;s 
    int&eacute;ressante avec les variables de type liste.<br>
    Comme on a pu le constater, &agrave; chaque passage dans la boucle la variable 
    apr&egrave;s le mot cl&eacute; foreach prend pour valeur l'&eacute;l&eacute;ment 
    suivant de la liste. L'affectation peut se faire avec deux valeurs :<br>
    <font color="#FFFFFF"><b>foreach</b> {style artiste} <font color="#00FFFF">&quot;Punk 
    Rancid&nbsp;&nbsp; Ska Ska-p &nbsp;Rap Svinkels&quot;</font> {<br>
    &nbsp;&nbsp;<b>&nbsp;puts</b> <font color="#00FFFF">&quot;$artiste joue du 
    $style&quot;</font><br>
    }</font></font></p>
  <p align="left"><b>Les branchements &agrave; choix multiples</b><font size="2"><br>
    Ils permettent de comparer une variable &agrave; un grand nombre de valeurs.<br>
    La syntaxe est : switch cha&icirc;ne valeur_1 bloc_1 valeur_2 bloc_2 ... valeur_n 
    bloc_n default bloc_default<br>
    Un bloc est le mot pour d&eacute;signer une suite d'instructions. Voici un 
    exemple type :<br>
    <font color="#FFFFFF"><b>switch</b> $val {<br>
    &nbsp;&nbsp;0 {<b>puts</b> <font color="#00FFFF">&quot;Z&eacute;ro&quot;</font>}<br>
    &nbsp;&nbsp;1 {<b>puts</b> <font color="#00FFFF">&quot;Un&quot;</font>}<br>
    &nbsp;&nbsp;2 {<b>puts</b> <font color="#00FFFF">&quot;Deux&quot;</font>}<br>
    &nbsp;&nbsp;<b>default</b> {<b>puts</b> <font color="#00FFFF">&quot;D&eacute;sol&eacute; 
    je ne sais pas traduire ce nombre&quot;</font>}<br>
    }</font><br>
    La principale diff&eacute;rence avec les autres langages de programmation 
    c'est qu'il n'y a pas besoin de mettre un &quot;break&quot; &agrave; la fin 
    de chaque bloc.<br>
    Toutefois les commandes 'break' et 'continue' existent. 'break' permet de 
    quitter une boucle for, while ou foreach et 'continue' permet de passer au 
    prochain tour de boucle sans terminer la boucle en cours.</font></p>
  <p align="left"><img src="../media/krishna.gif" width="43" height="28"></p>
  <p align="left"><b>Les proc&eacute;dures</b><br>
    <font size="2">Pour ce qui connaissent pas le mot 'proc&eacute;dure', et bien 
    en fait ce sont des fonctions qui renvoient un r&eacute;sultat. Du moins dans 
    le langage Tcl c'est comme &ccedil;a puisque les fonctions n'existent pas 
    chez lui.<br>
    <font color="#FFFFFF"><b>proc</b> nom_de_la_proc&eacute;dure {arguments}{<br>
    &nbsp;&nbsp;&nbsp;corps_de_la_proc&eacute;dure<br>
    }</font><br>
    Bien que les arguments soient entre accolades, il ne s'agit pas forc&eacute;ment 
    de listes. Cela peut &ecirc;tre tout type de variable. Voici une proc&eacute;dure 
    qui prend un nombre en arguments et renvoie sa valeur au carr&eacute; :<br>
    <font color="#FFFFFF"><b>proc</b> carre {valeur}{<br>
    &nbsp;&nbsp;&nbsp;<b>set</b> resultat [<b>expr</b> <b>pow</b>($valeur,2)]<br>
    &nbsp;&nbsp;&nbsp;<b>return</b> $resultat<br>
    }</font><br>
    Pour appeler cette fonction on peut par exemple faire :<br>
    <font color="#FFFFFF"><b>set</b> x 2<br>
    <b>puts</b> [carre $x];</font><font color="#FF9900">#La substitution de commandes, 
    vous vous rappelez j'esp&egrave;re ;-)</font><br>
    et on obtient : <font color="#0000FF">4.0</font></font></p>
  <p align="left"><font size="2">On aurait obtenu le m&ecirc;me r&eacute;sultat 
    si on n'avait pas mis la commande return. Pourquoi ? Parce que en l'absence 
    de valeur de retour, Tcl renvoie le r&eacute;sultat de la derni&egrave;re 
    commande.<br>
    Une proc&eacute;dure qui calcule une moyenne &agrave; partir des chiffres 
    d'une liste :<br>
    <font color="#FFFFFF"><b>proc</b> moyenne {liste}{<br>
    &nbsp;&nbsp;&nbsp;<b>set</b> longueur [llength $liste]; <font color="#FF9900">#On 
    r&eacute;cup&egrave;re le nombre de chiffres dans la liste</font><br>
    &nbsp;&nbsp;&nbsp;if {$longueur &gt; 0}{<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>set</b> somme 0<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>for</b> {<b>set</b> i 0} {$i &lt;= 
    [<b>expr</b> $longueur-1]} {<b>incr</b> i}{<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>&nbsp;incr</b> somme [<b>lindex</b> 
    $liste $i]; <font color="#FF9900">#On fait la somme de tous les chiffres de 
    la liste</font><br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>append</b> longueur .0 ;<font color="#FF9900">#Un 
    'truc' pour obtenir un r&eacute;el au final</font><br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>return</b> [<b>expr</b> $somme/$longueur] 
    ;<font color="#FF9900">#Moyenne = somme_des_chiffres / nombre_de_chiffres</font><br>
    &nbsp;&nbsp;&nbsp;}<br>
    }</font></font></p>
  <p align="left"><font size="2">Bon l&agrave; on a fait une bonne partie. Passons 
    aux Flux.<br>
    D&eacute;j&agrave; on connait la commande d'&eacute;criture sur un flux : 
    <b> <font color="#FFFFFF">puts</font></b><br>
    La commande de lecture est<b><font color="#FFFFFF"> gets</font></b><br>
    Ok on sait lire et &eacute;crire mais avant tout il faut ouvrir le flux, pour 
    cela on utilise la commande <b><font color="#FFFFFF">open</font></b>. Quand 
    on a fini les traitements on appelle la commande <b><font color="#FFFFFF">close</font></b> 
    pour fermer ce flux. Voici un exemple pour illustrer tout cela :<br>
    <font color="#FFFFFF"><b>set</b> f [<b>open</b> <font color="#00FFFF">&quot;l33t.txt&quot;</font> 
    <font color="#00FFFF">&quot;w&quot;</font>]<br>
    <b>puts</b> $f <font color="#00FFFF">&quot;It\'s a l33t text&quot;</font><br>
    <b>puts</b> $f <font color="#00FFFF">&quot;Enjoy it&quot;</font><br>
    <b>close</b> $f </font></font></p>
  <p align="left"><font size="2">Commen&ccedil;ons par la commande '<b><font color="#FFFFFF">open</font></b>' 
    : le premier argument est le fichier &agrave; ouvrir et le second est le mode 
    d'ouverture. Voici les diff&eacute;rents modes d'ouverture d'un fichier :<br>
    * r : ouvre le fichier en lecture seulement, le fichier doit d&eacute;j&agrave; 
    exister.<br>
    * r+ : ouvre le fichier en lecture et &eacute;criture, le fichier doit d&eacute;j&agrave; 
    exister.<br>
    * w : ouvre le fichier en &eacute;criture seulement, il le remet &agrave; 
    0 si il existe d&eacute;j&agrave; sinon il cr&eacute;e un nouveau fichier<br>
    * w+ : ouvre le fichier en lecture et &eacute;criture, il le remet &agrave; 
    0 si il existe d&eacute;j&agrave; sinon il cr&eacute;e un nouveau fichier<br>
    * a : ouvre le fichier en &eacute;criture seulement, cr&eacute;e un nouveau 
    fichier vide s'il n'existe pas, se positionne &agrave; la fin du fichier.<br>
    * a+ : ouvre le fichier en lecture et &eacute;criture, cr&eacute;e un nouveau 
    fichier vide s'il n'existe pas, se positionne &agrave; la fin du fichier.</font></p>
  <p align="left"><font size="2">La commande <b><font color="#FFFFFF">open</font></b> 
    renvoie un 'canal', c'est lui qui repr&eacute;sente le flux sur lequel on 
    va &eacute;crire. Bref c'est un 'file descriptor'. La suite du programme est 
    simple : on &eacute;crit deux lignes et on ferme le fichier.<br>
    Un exemple de lecture dans un fichier :<br>
    <font color="#FFFFFF"><b>set</b> &nbsp;f&nbsp; [<b>open</b> <font color="#00FFFF">"l33t.txt" 
    "r"</font>]<br>
    <b>set</b> &nbsp;ligne1&nbsp; [<b>gets</b> $f]<br>
    <b>set</b>&nbsp; long_ligne2&nbsp; [<b>gets&nbsp;</b> $f&nbsp; ligne2]<br>
    <b>close&nbsp;</b> $f</font></font></p>
  <p align="left"><font size="2" color="#FFFFFF"><b>puts</b> <font color="#00FFFF">"ligne 
    1 : $ligne1&quot;</font><br>
    <b>puts</b> <font color="#00FFFF">"ligne 2 : $ligne2"</font><br>
    <b>puts</b> <font color="#00FFFF">"Longueur de la ligne 2 : $long_ligne2"</font></font></p>
  <p align="left"><font size="2">On obtient :<br>
    <font color="#0000FF">ligne 1 : It's a l33t text<br>
    ligne 2 : Enjoy it<br>
    Longueur de la ligne 2 : 8</font></font></p>
  <p align="left"><font size="2">Et une lecture au clavier :<br>
    <font color="#FFFFFF"><b>puts</b> &nbsp;-nonewline&nbsp; <font color="#00FFFF">&quot;Entrez 
    votre nom :&quot;</font><br>
    <b>gets&nbsp;</b> sdtin&nbsp; nom</font></font></p>
  <p></p>
  <p align="left"><font size="2"> L'utilisation des sockets est presque similaire. 
    Il suffit d'utiliser la commande socket &agrave; la place de open.<br>
    Utilisez les nouvelles sections des manpages pour avoir plus d'infos sur les 
    commandes Tcl. Par exemple faites un &quot;man n socket&quot; sous Linux.<br>
    <img src="../media/correct.gif" width="55" height="46"> <br>
    Bon on va pouvoir passer &agrave; expect maintenant :-)</font></p>
</div>
</body>
</html>
