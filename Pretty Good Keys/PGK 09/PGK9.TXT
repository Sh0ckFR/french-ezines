******************************************************************************
************************P.G.K n¯9: Novembre 99 version 1.1********************
******************************************************************************

          ‹ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ‹    ‹ﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂﬂ‹‹ﬂﬂﬂﬂﬂﬂﬂﬂ‹   ‹ﬂﬂﬂﬂﬂﬂﬂﬂﬂ‹
          € €€€€€€‹‹€€€€‹ ﬂ‹‹ﬂ ‹€€€€‹‹€€€€€€ €€ €€€€€€ €  ‹ﬂ €€€€€€€ €
          € €€≤≤€€€€€€≤€€€ €€ €€€≤€€€€€€≤≤€€ €€ €€≤≤€€ € ‹ﬂ €≤≤≤≤≤€ ‹ﬂ
          € €≤≤€≤€ﬂ €≤€≤€€ €€ €€≤€≤€ ﬂ€≤€≤≤€ €€ €≤≤€≤€ €‹ﬂ €≤±≤≤≤€ ‹ﬂ
          € €±≤≤€€  €±≤≤≤€ €€ €≤≤≤±€  €€≤≤±€ €€ €±≤≤€€ €ﬂ €±≤≤±≤€ ‹ﬂ
          € €≤≤±≤€  €≤±±≤€ €€ €≤±±≤€  €≤±≤≤€ €€ €≤≤±≤€ ﬂ €±≤±≤≤€ ‹ﬂ
          € €±≤±±€  €±±≤±€ €€ €±≤±±€  €±±≤±€ €€ €±≤±±€  €±±≤±±€ ‹ﬂ
          € €±±≤≤€  €≤±±≤€ €€ €≤±±≤€  €≤≤±±€ €€ €±±≤≤€ €±±±±±€ ‹ﬂ
          € €≤±±±€  €±∞±±€ €€ €±±∞±€  €±±±≤€ €€ €≤±±±€€±±∞±±€ ‹ﬂ
          € €±∞±≤€  €∞±±∞€ €€ €∞±±∞€  €≤±±∞€ €€ €∞±±≤€€±∞±±±€ ﬂ‹
          € €±±∞±€€‹€∞∞∞±€ €€ €±∞∞∞€‹€€±∞±±€ €€ €±±∞±€ €∞∞±∞±€ ﬂ‹
          € €±∞±∞€ﬂ€€€ﬂﬂﬂ ‹ﬂﬂ‹ ﬂﬂﬂ€€€ﬂ€±±∞±€ €€ €±∞±∞€  €±∞±±∞€ ﬂ‹
          € €∞∞∞∞€ ‹‹‹‹ﬂﬂﬂ  € ‹‹‹‹‹‹  €±∞±∞€ €€ €∞∞∞∞€ ‹ €∞±∞∞∞€ ﬂ‹
          € €∞±∞∞€ €        € €±±∞±€  €∞∞∞∞€ €€ €∞±∞∞€ €‹ €∞∞±∞∞€ ﬂ‹
          € €∞∞∞∞€ €        € €∞±±∞€  €∞±∞∞€ €€ €∞∞∞∞€ €ﬂ‹ €∞∞∞∞∞€ ﬂ‹
          € €∞∞∞∞€ €        € €±∞∞∞ﬂﬂﬂﬂ∞∞∞∞€ €€ €∞∞∞∞€ € ﬂ‹ €∞∞∞∞∞€ ﬂ‹
          € €‹‹‹‹€ €        ﬂ‹ ﬂﬂﬂ€‹‹‹‹‹‹‹‹€ €€ €‹‹‹‹€ €  ﬂ‹ €‹‹‹‹‹€ €
          ﬂ‹‹‹‹‹‹‹‹ﬂ          ﬂﬂﬂ‹‹‹‹‹‹‹‹‹‹‹‹ﬂﬂ‹‹‹‹‹‹‹‹ﬂ   ﬂ‹‹‹‹‹‹‹‹‹ﬂ

                  w w w . m u l t i m a n i a . c o m / p g k

                                       Asphyx


            "Travailler pour un P.G.K. meilleur, c'est travailler
                          pour un monde meilleur!"
                                  Bug-in


******************************************************************************
**********************************Disclaimer**********************************
******************************************************************************

  Quelles que soient les conneries que vous pourriez faire suite Ö la lecture  
de cet e-zine ou Ö la consultation du site de Pretty Good Keys (www.multimania  
.com/pgk), les deux principaux auteurs que sont NONO (nono_18_02@hotmail.com)
et Johann__3 (johann__3@hotmail.com) ne sauraient en àtre tenus responsables.
  En effet, de par la nature màme des lois qui tentent vainement de rÇgir 
notre putain de pays de merde, vous àtes libres de poursuivre ou non votre 
lecture, en sachant cependant que si vous continuez plus loin, les auteurs 
respectifs de tout ce qui suit n'encouragent personne Ö rÇaliser les actions 
dÇcrites ci-dessous, mais les dÇcrivent uniquement Ö titre informatif.
  Cependant, les lois ne sont bien Çvidemment pas les màmes dans tous les
pays, et donc, si chez vous, votre droit d'accÇs aux informations que vous
pourriez trouver ici est encore plus restreint qu'en France, vous vous
devez de prendre vos responsabilitÇs.    
  Ainsi, en lisant ceci, ou plus simplement, rien que par le simple fait d'
avoir chargÇ ce site (et donc cette page et ce texte), vous prenez
connaissance de ces principes et de la "dÇresponsabilisation" des auteurs de
tout ce que vous pourrez trouver ici. Ce n'est pas du tout un manque de
courage de notre part, mais tout simplement un simple avertissement: apräs
tout, rien ne vous invite Ö lire, croire, et encore moins Ö reproduire les
actions dÇcrites ici.
  De plus, bien que vous pouvez trouver ici des rÇfÇrences Ö des substances
qui peuvent àtre prohibÇes dans votre pays (notamment des substances
psychotropes), et qui le sont hÇlÖs ici en France, cela ne constitue en aucun
cas un encouragement de quelque nature que ce soit Ö consommer ou màme
cultiver ces substances qui peuvent avoir des effets parfois incontrìlables,
et qui peuvent s'avÇrer quelquefois dangereux (surtout pour ceux qui n'en
ont pas l'habitude).    
  Pour finir, en continuant votre lecture, vous acceptez ainsi de prendre
vos responsabilitÇs et ainsi, en cas de problämes avec la justice (un malheur
est si vite arrivÇ, et puis il faut dire que les keufs sont partout), nous
ne saurions en aucun cas àtre impliquÇs dans vos problämes...    

******************************************************************************
**********************************Introduction********************************
******************************************************************************

  Je sais, ce numÇro sort avec deux mois de retard... Alors pour un soi-disant
numÇro anniversaire, c'est plutìt ratÇ... Mais j'ai une excuse: pendant
environ un mois-et-demi, j'avais pas de PC Ö ma disposition pour Çcrire ce
numÇro ni pour m'occuper du site. Donc, je ne l'ai pas mis Ö jour comme je
l'avais promis, et en fait, il y a plein de choses que je n'ai pas eu le temps
de faire. Mais, pour me faire pardonner, si cela se peut, ce numÇro est le
plus gros de tous les P.G.K., alors voilÖ.
  Et comme je n'ai plus vraiment le temps de m'occuper de P.G.K., hÇlÖs, je
suis en train de rÇflÇchir Ö la seule solution que j'ai trouvÇe (si vous en
voyez d'autres, Çcrivez-moi): je vais peut-àtre arràter P.G.K.. Oh, rassurez-
vous, je serais encore prÇsent, mais je crois que cela sera träs limitÇ. Et
je ne m'occuperais màme plus du site.
  Si cela doit se faire, je pense que je me dÇchargerais de mon "fardeau"
(en fait, je dois dire que j'ai rÇellement pris du plaisir Ö faire P.G.K.
pendant un an, mais je garde áa pour la conclusion) sur (roulement de tambour)
Bug-in, qui, ces temps-ci, s'est montrÇ particuliärement actif et qui s'est
spontanÇment proposÇ pour reprendre le flambeau... Car Johann__3 ne peut pas
non plus le faire, et j'en suis dÇsolÇ...

                                       NONO, nono_18_02@hotmail.com

******************************************************************************
************************************Sommaire**********************************
******************************************************************************

  - Courrier des lecteurs
  - W95.CIH (t00nx)
  - Quelques idÇes (Bug-in)
  - Les codes barres de la norme EAN 13 (Raffaelo)
  - Lettre au Procureur de Justice (Bug-in)
  - Cours d'Assembleur (suite) (Adam - traduit par NONO)
  - Le nihilisme (King Fisher)
  - Cryptage (Bug-in)
  - Cours d'Assembleur (suite) (Adam - traduit par NONO)
  - La gravure (Pyton51)

  Eh bien voilÖ ce que j'appelle un numÇro exceptionnellement riche et
imposant, non?

                                       NONO, nono_18_02@hotmail.com

******************************************************************************
******************************Courrier des lecteurs***************************
******************************************************************************

From: Raffaelo <raffaelo@ifrance.com>
To: nono_18_02@hotmail.com 
Subject: P.G.K. ezine 
Date: Sun, 5 Sep 1999 11:25:00 +0200 

Salut,

j'ai fondÇ un groupe de crackers franáais dÇbut juillet, et on est environ 20.
Le site est http://zone14.cjb.net. Bon, áa c'Çtait pour la pub ;-].

  En fait, c'est pour dire que je suis un cracker d'origine, et que je
m'intÇresse depuis 2/3 jours au H/P et j'ai lu une bonne quantitÇ de mags, et
le votre a l'air le plus vivant et motivÇ. Je sais pas encore grand-chose, et
j'ai encore jamais hackÇ, mais je me dÇbrouille pas mal en crack, je connais
comment les codes barres, les cartes de crÇdits marchent, et comment Çviter
les banniäres sur certains hÇbergeurs gratuits... et quelques autres trucs
bien marrants.

  Quand j'ai fondÇ mon groupe, j'ai recherchÇ des gens motivÇs, et ils Çtaient
tous des dÇbutants. Je n'ai pas cherchÇ des Çlites, qui savent tout faire mais
ne sont plus motivÇs. C'est pour áa que mon groupe bouge bien aujourd'hui.

Quel rapport? J'ai choisi ton groupe parce qu'il est motivÇ, et moi aussi.
Donc, si tu veux bien, je serai content de faire partie de ton groupe si áa
dÇrange personne, et aussi participer aux articles du super e-zine. Je te
joins un tutorial sur les codes barres que j'ai fait il y a quelques temps.

VoilÖ, j'espäre que tu me rÇpondras vite, parce que c'est bientìt la rentrÇe
des classes pour moi, et áa va bien me faire chier pour mon temps libre.

Atchao bonsoir, et merci!

  Raffaelo

[NONO: salut! Tu sais quoi, ta motivation fait plaisir Ö voir! Si si je t'
assure. Je dirais pas que áa me rappelle mes propres dÇbuts, car áa ferait un
peu prÇtentieux, mais c'est vrai. Màme si P.G.K. n'est pas un groupe Ö
proprement parler. En effet, au dÇbut, je me suis contentÇ d'Çcrire un e-zine,
avec l'aide plus ou moins rÇguliäre de Johann__3. Ensuite, des gens ont
commencÇ Ö m'Çcrire, pour me dire qu'ils aimaient bien ce que je faisais.
Alors áa m'a poussÇ Ö continuer, comme le fait aujourd'hui ta lettre et ton
excellent article sur les codes barres. Non, franchement, j'ai vraiment
apprÇciÇ. J'avais dÇjÖ lu des trucs sur les codes barres, mais rien d'aussi
prÇcis... Alors, pas de probläme, tu es le bienvenu... HÇlÖs, c'est la
rentrÇe... Peu de monde y Çchappe... A+]
         
From: Nicky HAckRRIS <toonx@caramail.com>
To: nono_18_02@hotmail.com 
Subject: article;) 
Date: Thu, 12 Aug 1999 17:57:11 GMT+1 

Salut NONO,

Je t'envoie un p'tit article pour P.G.K.! Je sais pas si tu le publieras, Ö
toi de voir ;) !

Tiens, en tant que newbie, j'essaye, grÉce Ö tes explications, de dÇplomber un
prog dont je me sers au boulot. Je t'embàterais avec áa plus tard! 

RESPECT.

[NONO: Bon, je crois qu'il n'y a pas grand-chose Ö dire sinon que c'est
exactement le genre de mails que j'adore recevoir... Voici donc l'article en
question. Et au fait, si vous avez des problämes pour le cracking ou quoi que
ce soit, n'hÇsitez pas Ö m'Çcrire, je me ferais une joie d'essayer de vous
aider.]

******************************************************************************
***********************************W95.CIH************************************
******************************************************************************

  Ayant eu devant mes yeux cet e-zine sympa qu'est P.G.K., je me suis dit:
"tiens, áa serait sympa d'Çcrire un petit article pour eux!". Je me prÇsente:
tOOnx, certains d'entre vous me connaissent via le web, d'autres (pour les
plus vieux, j'ai 27 ans!;) ) me connaissent sous le pseudo zeus/Z.F.K. (sur
Amiga!) ou encore Crystal Angel! J'ai Çgalement contribuÇ au Swap de AGNUS, un
petit zine sur disk qui existait sur Amiga... Nostalgie, quand tu nous tiens..

  Bon, si NONO est d'accord, j'Çcrirais d'autres articles traitant de sujets
divers, mais bon, on verra áa plus tard...

  Je vais vous causer d'un virus, et pas n'importe lequel:
W95.CIH.
  Plus connu par les mÇdias sous le nom de Tchernobyl, cette saloperie de
virus infecte tous les fichiers .exe de votre disque dur, quand il ne le
crashe pas, et vous nique le bios "manu militari"! J'ai, Çvidemment, eu
affaire Ö cette grosse merde, apräs avoir pompÇ un prog sur le net. Ce virus
est vicieux, il ne se dÇclenche que le 26 de chaque mois, d'oó son appellation
"Tchernobyl" par les mÇdias, le 26 Çtant la date de cette catastrophe...

  Le pire, c'est que la bÇcane infectÇe Çtait celle que j'utilise pour bosser,
du coup il me fallait rÇcupÇrer mon prÇcieux disque, et refoutre ma bÇcane en
route! Je fonce chez un revendeur informatique, et je change ma carte märe.
  J'utilise Norton 5.0 sur disk en b0oo sur mon premier disque: 6 go - Norton
a mis 03 h 15 Ö le scanner, il Ö analysÇ 5868 fichiers dont 262 infectÇs et
heureusement rÇparÇs. Pour le second de 4 go, il a mis 01 H 50, a analysÇ 4946
fichiers parmi lesquel 162 Çtaient infectÇs... :(

  Bref, j'ai rÇussi Ö rÇcupÇrer mes deux disques, et ma bÇcane fonctionne Ö
nouveau, c'est d'ailleurs par le biais de celle-ci que je vous Çcris ;) [NONO:
comme quoi, Ö quelque chose malheur est bon. En effet, si t'avais pas chopÇ ce
putain de virus, t'aurais pas Çcrit cet article, et peut-àtre que ton
intervention va sauver d'autres lecteurs de ce vÇritable flÇau... En plus, áa
m'aurait fait un article de moins :-) .].

  Les gars, faites gaffe Ö ce putain de virus, c'est le pire que je connaisse
:( .

  Le 26 mai dernier, il a infectÇ 18 bÇcanes d'un lycÇe, je vous explique pas
la gueule du service technique!! ;)

  Si vous avez NORTON 5.0, utilisez le AVANT le 26, sinon vous courrez droit Ö
la catastrophe !

  La seule solution pour pouvoir conserver sa carte märe, d'apräs mon
revendeur, c'est de pouvoir rÇcupÇrer une EPROM identique Ö la sienne, booter
sur Norton pour nettoyer son disque de cette saloperie de virus. Ensuite, il
faut copier le contenu de l'eprom; si vous avez un copieur d'eprom, et que par
une chance formidable, vous avez copiÇ votre bios, tant mieux pour vous ;) -
sinon vous devez faire une manip risquÇe: vous bootez avec un bios identique
au vìtre, une fois sous DOS, vous remplacez le BIOS par celui qui est flambÇ,
et vous flashez ce dernier... unique solution :( Grr..

  Evidemment, cette solution n'est possible que si vous avez un bios dit "Ö
pattes", sinon si c'est un bios comme celui qui Çquipe certaines cartes märe
ASUS (c'est une puce carrÇe qui s'emboåte dans un compartiment ÇtudiÇ pour),
vous renvoyez votre carte märe chez votre revendeur, qui devrait,
thÇoriquement, pouvoir rÇsoudre le probläme en renvoyant la carte märe chez le
constructeur. Si votre carte märe est trop ancienne, laissez tomber, c'est
foutu!
  Par contre, si vous avez une carte märe rÇcente, vous devriez pouvoir
activer la protection de votre bios, soit par cavalier, soit directement par
le bios lui-màme [NONO: cette manip consiste Ö empàcher la modification
(volontaire ou non) des informations contenues dans le BIOS (Basic Input
Output System) et qui contient de prÇcieux renseignements sur votre matÇriel.]
!

  A part áa, il existe, Ö ma connaissance, plusieurs antivirus qui permettent
de l'Çradiquer:
CLEANCIH, KILL CIH, remove_cih, NORTON 5.0...

  Voili, voilou, si vous avez d'autres infos sur cette grosse merde de virus,
mailez-moi Ö:
t00nx@caramail.com

  J'attends maintenant la rÇponse de NONO, Ö savoir si je peux Çcrire d'autres
articles pour P.G.K., qui traiteront de divers sujets [NONO: tu rigoles ou
quoi? Depuis quand je refuse de l'aide?]!

*** FREE CONDOR *** NEWBIES RULEZ *** FUCK W95.CIH *** CHOCHON RULEZ ***
C4rD1n9 RuLeZ***

                                       tOOnx, t00nx@caramail.com
                                                                
******************************************************************************
**************************Quelques idÇes (Bug-in)*****************************
******************************************************************************

  Lors du numÇro 8, je finissais mon article (sur le concept de "monde
virtuel"), en parlant des diffÇrentes drogues, je continue donc Ö partir de
lÖ.

  L'alcool, le tabac, et la TV font partie des drogues lÇgales, tandis que le
cannabis ne l'est pas, et en voici la raison, que l'on peut dÇduire:

  Quand une personne boit de l'alcool, sur le coup, elle ne sera pas en Çtat
de faire tout correctement, et ainsi, jusqu'au lendemain, au rÇveil, le
travail peut ainsi àtre repris quasiment normalement et donc, vous àtes
toujours productif, ainsi l'Çtat autorise l'alcool, car on peut toujours
produire (bien qu'on puisse se demander ce que signifie production dans l'Ége
de la simulation), contrairement au cannabis; je m'explique: l'alcool, une
fois pris, libäre des barriäres mentales que la personne s'est fixÇe, et
abaisse aussi son attention (ainsi qu'un massacre du foie et de l'estomac),
tandis que le cannabis permet Ö certaine personne de se reposer et de fuir le
stress de la vie, et durant ce temps, elle reflechit Ö elle-màme, Ö sa place
dans la societe, et áa, le gouvernement, áa lui plaåt pas.
  Le gouvernement ne vous demande pas de rÇflÇchir mais de travailler. Quand
vous allez Ö l'ecole, au lycÇe, Ö la fac, on vous apprend Ö travailler et
avoir des bases culturelles, et de l'histoire, on ne nous apprend pas Ö
rÇflÇchir, Ö se poser des questions; il est imposÇ un systäme, avec certains
problämes connus, qui ont des rÇponses connues. En aucun cas, on ne vous
demande de rÇflÇchir Ö une meilleure solution ou de trouver de nouveaux
problämes.
  Seulement voilÖ, le cannabis a un inconvÇnient comme expliquÇ dans P.G.K. 8,
il permet de rÇflÇchir Ö soi et c'est tout. Il n'apporte pas de solution
miracle, et pire, vous met en situation latente, voire vous Çnerve, parce que
vous vous dites que la sociÇtÇ est mal faite, mais vous n'agissez pas donc...
  Comme beaucoup de gens, on se retrouve alors vite en mauvaise posture, c'est
Ö dire critiquer, sans savoir, sans pouvoir donner de solution ou d'aider Ö
cette recherche, ou d'expliquer clairement le probläme, certains critiquent
màme parce que áa leur semble a la mode!
  Quand vous regardez la tÇlÇ, le taux de passivitÇ est Ö son maximum, vous ne
faites plus rien. Vous n'agissez pas, vous ne faites que recevoir, certains
regardent des documentaires, soit, mais prenez au moins des notes pendant que
vous les regardez; je sais, áa paraåt chiant et con, mais au moins vos
neurones rÇagissent. De màme, quand vous lisez un journal, vous ne voyez
qu'une partie des choses, il en faut plus; quand on ràve, le cerveau dÇpense
plus de kilojoules que quand on lit un livre (au cours de notre vie, on
dÇpense 2,4 kilojoules en lisant et 4 kilos joules en ràvant [ce qui peut nous
faire penser qu'en fait, au cours du ràve, l'esprit peut enfin se libÇrer de
la viande, pour s'Çvader en des lieux oó il n'y a ni temps ni espace, lÖ se
rÇunissent les idees, et ainsi elles se diffusent, et atterrissent dans
notre inconscient]). Car quand on ràve, le cerveau travaille, alors qu'en
lisant, il ne rÇflÇchit pas beaucoup, il lit la rÇalitÇ, ou du moins la vÇritÇ
que l'on lui impose, sauf certains livres rÇactionnaires (ou les e-zines ;-))
...

                                       Bug-in,
                                       buginutopia@multimania.com
                                       http://www.multimania.com/buginutopia/  

******************************************************************************
********************Les codes barres de la norme EAN 13***********************
********************************(Raffaelo)************************************
******************************************************************************

Introduction:

  Ca y est, je suis revenu tout bronzÇ de vacances, et en pleine forme.
  Aujourd'hui, nous allons apprendre Ö cracker les codes barres... Comment?
Les codes barres? Je croyais qu'on crackait les sharewares...
  Ben voyons, àtre un crackeur, c'est pas avoir des sharewares sans payer...
C'est tout un style de vie: un crackeur est curieux, mais pas curieux pour les
choses sans valeur (ce que fait le voisin...), curieux pour savoir comment les
choses marchent! N'avez-vous jamais ÇtÇ curieux de savoir comment les codes
barres marchent?
  Peut-àtre avez-vous dÇjÖ fait des recherches sur internet et que vous avez
trouvÇ des milliers de rÇponses sans intÇràt... Et le fonctionnement n'est
pas träs mÇdiatisÇ! Eh bien, le bon vieux Raffaelo va vous apprendre Ö les
dÇchiffrer et Ö en crÇer!

RÇflexions:

  Si vous avez dÇjÖ observÇ attentivement un code barre, vous avez sñrement
remarquÇ que le màme chiffre n'est pas toujours codÇ par la màme sÇrie de
barres...
  Ensuite, les gens pensent souvent que le prix est inscrit dans le code barre
,  ce qui est totalement faux! Si on rÇflÇchit un peu, on se rend compte que
le code barre est diffÇrent pour chaque produit (deux produits diffÇrents de
màme prix n'ont pas le màme code).
  Et comment font les caisses pour afficher la dÇsignation du produit sur
l'Çcran et sur le ticket de caisse? Le code barre doit àtre unique pour chaque
produit et ne contient aucune information: c'est seulement un nombre... Alors,
quand on passe Ö la caisse, le lecteur optique dÇchiffre et envoie le code Ö
la machine, qui consulte une Çnorme base de donnÇes qui contient la
description et le prix associÇ Ö chaque code.
  C'est träs pratique, et c'est pour áa que le code barre a ÇtÇ crÇÇ. Pour
changer le prix d'un produit, il n'y a pas besoin de changer toutes les
Çtiquettes des boåtes concernÇes (comme dans une petite Çpicerie par exemple),
il suffit de changer le prix dans la base de donnÇes! Autre avantange, on
embrouille le client qui est censÇ ne rien comprendre aux codes barres.
  Enfin, áa doit servir Ö gÇrer les stocks en enregistrant les quantitÇs de
tel ou tel produit vendu...

ThÇorie:

Bon, alors, je commence par oó??? E.A.N. veut dire European Article Numbering
system, et le 13 signifie que le code a 13 chiffres! Cette norme est
utilisÇe en Europe et un peu partout dans le monde. Par contre, aux USA, ils
utilisent la norme U.P.C. qui signifie Universal Product Code... On va bien
sñr parler de la norme utilisÇe en France plus particuliärement, qui est la
màme partout en Europe. Prenez n'importe quel objet, et vous verrez ces
petites barres sur le paquet, ou la couverture, etc... Sauf pour les magazines
et journaux qui utilisent une autre norme qui ne fait pas l'objet de ce
tutorial.
  Alors, les codes barres sont composÇs de barres et de chiffres. Les barres
sont la transcription des chiffres pour que le lecteur optique puisse lire le
code. Les chiffres servent juste aux humains et ne sont d'aucune utilitÇ pour
la machine, incapable de reconnaåtre les chiffres. Donc, il y a 13 chiffres,
et chaque chiffre est codÇ par 7 barres verticales. Ces barres sont soit
blanches, soit noires. La machine ne comprend que des 0 ou des 1, alors le
blanc code 0 et le noir 1. Les chiffres sont sÇparÇs en 3 groupes par des
barres plus longues. Le premier chiffre est tout seul Ö l'extÇrieur des barres
Ö gauche, alors que les autres sont regroupÇs par 6 Ö l'intÇrieur des barres.
Le premier chiffre n'est pas codÇ par des barres.
  Chaque code barre a 13 valeurs, des chiffres de 0 Ö 9, #0 Ö #12. #0 et #1
indiquent l'origine du produit, #2 Ö #11 donnent le code de l'article et #12
(le 13äme et dernier) est une somme de contrìle (checksum) qui vÇrifie la
validitÇ des autres valeurs.
  Voici les 4 Çtapes du calcul de #12: 


VALEUR A : somme des chiffres en position impaire, donc A = #0 + #2 + #4 + #6
+ #8 + #10


VALEUR B : somme des chiffres en position paire, puis multiplier par 3, donc
B = (#1 + #3 + #5 + #7 + #9 + #11) x 3


VALEUR C : somme de A et B, donc C = A + B


VALEUR D : C modulo 10 (on divise par 10 et on garde le reste de la division,
ce qui revient Ö garder seulement le chiffre des unitÇs de C) puis on
retranche le rÇsultat Ö 10 si le rÇsultat est diffÇrent de 0, donc
D = C (mod 10); if D <> 0 then; 10 - D; endif


  Les codes barres ont des zones vides blanches tout autour, en gÇnÇral 10
fois la largeur d'une petite barre. Ces zones sont indispensables, et sans
elles, le code peut àtre illisible. Ensuite, il y a 3 groupes de barres
noir/blanc/noir de chaque cìtÇ du code et au milieu. Les barres sont plus
longues que les autres et dÇpassent vers le bas. Elles servent au lecteur Ö se
caler et s'adapter Ö la taille du code barre.
  Voici maintenant la partie magique. Accrochez-vous bien... Je vous avais dit
que le màme chiffre n'est pas forcÇment codÇ par les màmes barres, et ben
c'est normal: áa a ÇtÇ fait pour que le consommateur n'y comprenne rien, et
voici comment áa marche: les codes barres utilisent diffÇrents jeux de
caractäres pour reprÇsenter les valeurs de 0 Ö 9. Cela devrait rendre
impossible pour les gens de comprendre ce qui se passe, comme d'habitude, dans
cette sociÇtÇ, les esclaves n'ont pas besoin de s'inquiÇter du fonctionnement
des choses. Voici les codes graphiques des 3 jeux de caractäres:

⁄ƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
≥Valeur ≥Code A         ≥Code B (xor C) ≥Code C (not A)≥
√ƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¥
≥0      ≥0001101 (13)   ≥0100111 (39)   ≥1110010 (114) ≥
≥1      ≥0011001 (25)   ≥0110011 (51)   ≥1100110 (102) ≥
≥2      ≥0011001 (19)   ≥0011011 (27)   ≥1101100 (108) ≥
≥3      ≥0111101 (61)   ≥0100001 (33)   ≥1000010 (66)  ≥
≥4      ≥0100011 (35)   ≥0011101 (29)   ≥1011100 (92)  ≥
≥5      ≥0110001 (49)   ≥0111001 (57)   ≥1001110 (78)  ≥
≥6      ≥0101111 (47)   ≥0000101 (05)   ≥1010000 (80)  ≥
≥7      ≥0111011 (59)   ≥0010001 (17)   ≥1000100 (68)  ≥
≥8      ≥0110111 (55)   ≥0001001 (09)   ≥1001000 (72)  ≥
≥9      ≥0001011 (11)   ≥0010111 (23)   ≥1110100 (116) ≥
¿ƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ

  Les barres plus longues des bords sont reprÇsentÇs par 101 et celle du
centre par 01010.
  Ensuite, ce n'est pas fini! Les chiffres Ö gauche de la barre du milieu et
ceux Ö droite n'utilisent pas les màmes jeux de caractäres... La premiäre
moitiÇ du code barre (Ö gauche) est codÇe avec les jeux A et B, alors que la
deuxiäme moitiÇ (Ö droite) est codÇe uniquement avec le jeu C. En plus, les
jeux A et B sont utilisÇ avec une combinaison qui dÇpend de la valeur du
premier chiffre du code barre, #0:

⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒ¬ƒƒƒƒƒƒƒ¬ƒƒø
≥Valeur de #0   ≥#1     ≥#2     ≥#3     ≥#4     ≥#5     ≥#6≥
√ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒ≈ƒƒƒƒƒƒƒ≈ƒƒ¥
≥0              ≥A      ≥A      ≥A      ≥A      ≥A      ≥A ≥
≥1              ≥A      ≥A      ≥B      ≥A      ≥B      ≥B ≥
≥2              ≥A      ≥A      ≥B      ≥B      ≥A      ≥B ≥
≥3              ≥A      ≥A      ≥B      ≥B      ≥B      ≥A ≥
≥4              ≥A      ≥A      ≥B      ≥B      ≥B      ≥A ≥
≥5              ≥A      ≥B      ≥B      ≥A      ≥A      ≥B ≥
≥6              ≥A      ≥B      ≥B      ≥B      ≥A      ≥A ≥
≥7              ≥A      ≥B      ≥A      ≥B      ≥A      ≥B ≥
≥8              ≥A      ≥B      ≥A      ≥B      ≥B      ≥A ≥
≥9              ≥A      ≥B      ≥B      ≥A      ≥B      ≥A ≥
¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒ¡ƒƒƒƒƒƒƒ¡ƒƒŸ

  Ah, les stupides consommateurs ne comprendrons jamais pourquoi les màmes
valeurs donnent des barres diffÇrentes! Rien n'est aussi fiable que les codes
barres! =¯]. Nous allons voir concrätement maintenant comment dÇchiffrer un
code barre...
  Prenons comme exemple le livre "Assembleur" de chez Marabout. Le code est
9 782501 011761. Alors, on a 9 78 donc c'est un livre. Le premier chiffre est
9 donc la combinaison des jeux de caractäres A et B pour les valeurs #1 Ö #6
est ABBABA, et pour les valeurs #7 Ö #12, c'est toujours CCCCCC. La somme des
chiffres en position impaire est 9 + 8 + 5 + 1 + 1 + 7 = 31, et la somme des
chiffres en position paire multipliÇe par 3 est (7 + 2 + 0 + 0 + 1 + 6) x 3 =
48. Ensuite, 31 + 48 = 79 et donc 79 (mod 10) = 9. Enfin, comme 9 est
diffÇrent de 0 (si si, j'vous jure...), on fait 10 - 9 = 1 et le dernier
chiffre, la somme de contrìle, est 1.
  Deuxiäme exemple, on prend le livre "AccÇder Ö tout l'internet par e-mail",
de chez Marabout lui aussi. On a le code, et on voudrait gÇnÇrer les barres...
Le code est 9 782501 031752. On regarde le premier chiffre, qui est un 9, et
on jette un coup d'oeil dans le petit tableau. La combinaison est donc
ABBABA CCCCCC. On fait afficher le 9 Ö gauche des barres, puis la longue barre
Ö gauche: 101 mais qui dÇpasse vers le bas. Ensuite, on va coder les 6
premiers chiffres #1 Ö #6: on regarde dans le premier tableau. #1 est codÇ
avec le jeu A, et c'est un 7, donc áa donne 0111011. #2 est un 8, mais il est
codÇ avec le jeu B, donc il faut mater dans la deuxiäme colonne: 0001001...etc
...#6 est un 1, et il est codÇ avec le jeu A, donc on a 0001101. Maintenant
qu'on a transcrit les chiffres en barres, on affiche toutes les traductions en
0 et 1 Ö la suite. Lorsqu'on a un 0, on affiche une barre blanche, et quand
c'est un 1, c'est une barre noire. On affiche alors les barres de #1 Ö #6, ce
qui donne 011101100010010011011011000101001110011001 pour la premiäre moitiÇ.
Ensuite on fait afficher la longue barre du milieu: 01010, puis on continue
avec les 6 derniers chiffres. Enfin, on fait afficher la longue barre Ö droite
: 101 et on affiche les chiffres sous le code barre. Surtout, il ne faut pas
oublier les espaces vierges blancs tout autour du code barre. Et voilÖ, on
peut construire n'importe quel code barre Ö partir des chiffres!

Pratique:

  Ben maintenant que vous savez la thÇorie, la pratique ne devrait pas poser
de probläme particulier... Vous savez dÇchiffrer et gÇnÇrer les codes barres,
alors áa devrait aller. Je vais quand màme vous donner quelques petits
conseils.
  D'abord, vous n'allez pas faire vos codes Ö la main! Il vous faut un
logiciel... Il y en a un inclus dans Corel Draw 8 (màme dans la version dÇmo)
qui fait des codes dans pas mal de normes, mais vous pouvez aussi chercher
sur internet. Pour vous Çpargner du temps, je vous dis quand màme comment
ils s'appellent: AnyLabel (pour Çtiquettes mais fait aussi les codes barres
dans plusieurs normes) et CodeBar (uniquement des codes barres EAN 13). Je
vous apprends pas Ö chercher efficacement, vous devriez savoir... Si vous
savez chercher par e-mail, c'est encore mieux.
  Sinon, ce qui est franchement le mieux, c'est de programmer son propre
logiciel de code barres dans votre langage prÇfÇrÇ. Si vous ne savez pas
programmer, faites-en un en Visual Basic en träs peu de temps, le VB est träs
nul, fait des programmes lents et gros mais c'est facile...
  Personnellement, j'en ai fait un sur ma calculatrice (j'avais pas accäs Ö
l'ordinateur quand je l'ai fait), la TI-89. Pour l'imprimer, je connecte la
TI-89 Ö l'ordinateur et je fait une capture d'Çcran. Je vais bientìt en faire
un en Delphi aussi, quand j'aurai le temps...
  VoilÖ, maintenant vous avez fait un code barre et vous l'avez imprimÇ sur
une Çtiquette autocollante, et vous vous demandez bien s'il marche... Pas
d'inquiÇtude Ö avoir! Les lecteurs optiques ont une grande tolÇrance: ils
doivent reconnaåtre des codes barres träs diffÇrents sur chaque produit!
Certains sont petits, d'autres gros, certains hauts et fins, d'autres
dÇformÇs parce qu'ils sont collÇs sur des bouteilles rondes... Ils
reconnaåtraient màme les codes barres vert et rouge fluo avec des chiffres
Çcrits Ö la main, mais c'est pas träs discret pour passer Ö la caisse! Une
fois que vous avez imprimÇ un code barre, passez le sur une borne
"information" au supermarchÇ. Ca marche Ö chaque fois, mais il vaut mieux
vÇrifier quand màme, et áa rassure...
  Ensuite, essayez le code barre sur le produit qu'il dÇsigne et passez Ö la
caisse avec. La caissiäre ne devrait rien remarquer, et il n'y a pas d'
inquiÇtude Ö avoir du cìtÇ du lecteur optique. Franchement, la caissiäre qui
passe toute sa journÇe Ö faire dÇfiler des produits ne devrait pas se rendre
compte qu'un code barre a ÇtÇ collÇ par-dessus le vrai. Normalement, les
vrais sont directement imprimÇs sur l'emballage. Si jamais elle remarquait
(träs improbable) quelque chose, personne ne peut savoir que c'est vous qui
avez collÇ l'Çtiquette par-dessus. Comment un simple consommateur saurait
comment les codes barres marchent? Il y a eu une erreur, et vous avez
simplement pris la mauvaise boåte dans le rayon...
  Ensuite, vous pouvez passer aux choses sÇrieuses: vous trouvez un bon livre,
mais bien cher. Qu'Ö cela ne tienne: vous cherchez un livre moins cher, et
vous relevez son code barre. Vous rentrez chez vous et vous imprimez une
Çtiquette avec le code barre du livre pas cher. Vous retournez au magasin et
collez l'Çtiquette sur le livre cher qui vous intÇresse. Vous paierez le livre
cher au prix du pas cher! C'est bien sñr illÇgal, mais vous prenez vos
responsabilitÇs, et de toute faáon, vous n'àtes pas au courant des codes
barres, hein? ;-]
  Autre chose, ne collez pas le code barre d'un livre sur une bouteille de
champagne! DÇbrouillez-vous pour trouver une bouteille de champagne moins
chäre que celle que vous dÇsirez... La seule chose "risquÇe" est que les deux
produits doivent avoir presque la màme description sur l'Çcran de la caisse
pour ne pas attirer l'attention. Dernier conseil: ne changez qu'un code barre
Ö la fois, et achetez quelques autres articles avec... C'est tout, vous voilÖ
savant!

Le mot de la fin:

  Ben j'espäre que vous avez pas eu trop de mal Ö suivre ce tutorial assez
inhabituel, parce que j'ai eu un peu de mal Ö expliquer et Ö organiser mes
idÇes. Si je n'ai pas ÇtÇ assez clair sur un point, envoyez-moi un message, et
je me ferais un plaisir de vous rÇpondre... Ca fait toujours plaisir de savoir
qu'on n'a pas passÇ du temps pour rien, et que áa sert Ö quelqu'un.
  Bon, peut-àtre que je parlerai dans un prochain tutorial des codes barres
des magazines, mais pour l'instant, je sais pas trop comment áa marche... Mais
je vais les Çtudier! Comme je rÇpäte souvent, il faut avoir l'esprit libre,
cracker dans la vie de tous les jours... Pour moi, cracker ne signifie pas
pirater ni illÇgal, mais apprendre et comprendre.

Allez, Ö + et bon crack !

Ecrivez-moi Ö raffaelo@ifrance.com pour vos critiques, compliments, conseils,
autres mÇthodes, demande d'Çclaircissement, demande de crack sur un programme
particulier...
                                       Raffaelo, raffaelo@ifrance.com
                                       http://zone14.cjb.net

******************************************************************************
***********************Lettre au Procureur de Justice*************************
********************************(Bug-in)**************************************
******************************************************************************

"Mr. ou Mme. le Procureur de Justice,
Je vous demande dans la prÇsente lettre, les 3 choses suivantes:

1. Pourquoi doit-t-on payer pour connaåtre l'information [Moi màme par le
prÇsent courrier, j'ai payÇ plus de 20 Francs pour àtre informÇ] (de toutes
sortes, sur tout support)? A qui appartient-elle? Pourquoi doit-on payer pour
que justice soit faite? N'est-t-il pas logique que la Justice soit rendue
gratuitement, permettant ainsi Ö chacun le droit d'àtre, d'attaquer ou d'àtre
dÇfendu contre les injustices.

2. Dans le màme ordre d'idÇes, pouvez-vous me faire parvenir gratuitement le
CODE CIVIL dans son intÇgralitÇ afin que je puisse connaåtre mes droits et
devoirs, car une des seules choses que l'on m'a apprise Ö l'Çcole, c'est les
droits de l'Hommes; hors ceux-ci prÇcisent que nul ne peut ignorer la loi, si
la loi me force Ö la connaåtre, en toute logique, un exemplaire du CODE CIVIL
devrait àtre donnÇ Ö la naissance de chaque enfant.

  DÇsirant combler cette lacune de connaissance, qui me mettrait hors-la-loi,
je vous demande par la prÇsente lettre de me l'envoyer. Tenez compte, je vous
prie, du fait que si vous ne me l'envoyez pas, vous serez dans l'illÇgalitÇ,
puisce que vous m'empàchez de connaåtre mes droits et devoirs. Dans ce cas,
vous me verrez dans l'obligation de vous attaquer en justice pour non-respect
des droits de l'Homme et de la loi (je prendrai comme ÇchÇance: pas de
rÇponse en 1 an).

3. Dans un tout autres genre d'idÇe, je voudrais savoir quand vous prendrez
les mesures d'obliger d'imposer une màme calculatrice Ö ceux qui passent leur
bac, de maniäre Ö ce qu'ils soient tous sur le màme pied d'ÇgalitÇ; en effet,
vous remarquerez que tout le monde n'est pas issu de la màme classe sociale,
et que personne n'a la màme somme Ö mettre dans une calculatrice, certaines
permettant des calculs plus performants que d'autres, l'inÇgalitÇ devant les
problämes Ö rÇsoudre s'amenuise.

  Est-il prÇvu, donc, d'imposer une calculatrice commune Ö tous les bacheliers
, si non, vous remarquerez qu'il y a ici une inÇgalitÇ, et que tant qu'elle ne
sera pas rÇsolue, je ferai parvenir une lettre du màme type.

  Evidemment, il est logique de choisir pour une calculatrice commune la moins
chäre des plus performantes, oó d'avoir des prix pour que chacun puisse se la
procurer.

  Conscient que vous ne pourrez peut-àtre pas rÇpondre Ö toutes ces questions
(surtout la n¯3), je vous demande de les faire parvenir aux services
compÇtents (ce qui ne vous coñtera rien).

  Ou de me faire parvenir leurs adresse Internet (de prÇfÇrence), ou Çcrite si
il n'y en a pas.

  Cela ne fera que ralentir les procÇdures, de toutes faáons, de la part de
votre HiÇrarchie et de l'Administration, áa ne serai pas Çtonnant, je me
contenterai de mettre la màme chose dans que dans la prÇsente lettre en
prÇcisant bien sñr que vous n'avez pas pu (ou voulu) les faire parvenir vous-
màme, me rendant la tÉche plus difficile.

  Je tiens Ö prÇciser que la copie de cette lettre sera exposÇe sur Internet,
au public, et que vos rÇponses Ö mes propos aussi.

  Dans l'attente d'une rÇponse, veuillez recevoir mes salutations les plus
respectueuses."

                                       buginutopia@multimania.com 
                                       http://wwww.multimania.com/buginutopia

  Cette lettre a donc ÇtÇ envoyÇe par Bug-in, et il attend toujours une
rÇponse, sans grand espoir...
                             
******************************************************************************
***************************Cours d'assembleur (suite)*************************
****************************(ADAM - traduit par NONO)*************************
******************************************************************************


          …ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕª
          ∫             Cours d'Assembleur par Adam                «ƒø
          ∫                                                        ∫ ≥
          ∫                       PARTIE V                         ∫ ≥
          »Õ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº ≥
            ¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ


         ⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
         ≥                                                          ≥
         ≥                RESUME DU JEU D'INSTRUCTIONS              ≥
         ≥                                                          ≥
         ¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ



   ˛ ADC <DEST>, <SOURCE>        - Nom : Ajout + DÇplacement
                                   Type: 8086+

                                   Description: Cette instruction ajoute la   
                                   valeur de <SOURCE> dans <DEST>, de màme que
                                   celle du carry flag, qui sera un 1 ou un 0.

                                   Logiquement, DEST = DEST + SOURCE + CF

                                   Ex: ADC AX, BX


   ˛ ADD <DEST>, <SOURCE>        - Nom : Ajout
                                   Type: 8086+

                                   Description: Cette instruction ajoute les
                                   valeur de <SOURCE> et <DEST>, et stocke le
                                   rÇsultat en <DEST>.

                                   Ex: ADD AX, BX


   ˛ AND <DEST>, <SOURCE>        - Nom : ET BoolÇen 
                                   Type: 8086+

                                   Description: Cette instruction rÇalise une
                                   comparaison bit Ö bit de <DEST> et <SOURCE>
                                   , et Çcrit le rÇsultat dans <DEST>.

                                   Ex: AND 0, 0     = 0
                                       AND 0, 1     = 0
                                       AND 1, 0     = 0
                                       AND 1, 1     = 1


   ˛ BT <DEST>, <NUMERO DE BIT>  - Nom : Test de Bit
                                   Type: 80386+

                                   Description: Cette instruction teste le bit
                                   <NUMERO DE BIT> de <DEST>, qui peut àtre
                                   aussi bien un  registre 16 ou 32 bit, ou
                                   màme une adresse mÇmoire. Si <DEST> est un
                                   nombre 16 bit, alors le bit <NUMERO DE BIT>
                                   est compris entre 0 et 15, et si <DEST> est
                                   un nombre 32 bit, le bit <NUMERO DE BIT>
                                   est compris entre 0 et 31.

                                   La valeur contenue dans le bit <NUMERO DE
                                   BIT> de <DEST> est ensuite copiÇe dans le
                                   carry flag.

                                   Ex: BT   AX, 3
                                       JC   EgalA1


   ˛ CALL <DEST>                 - Nom : Appel de ProcÇdure
                                   Type: 8086+

                                   Description: Cette instruction appelle
                                   simplement une sous-routine. En des termes
                                   plus techniques, elle met l'adresse de la
                                   prochaine instruction, IP, en haut de la
                                   pile, et ensuite, met le Pointeur d'
                                   Instruction, IP, Ö la valeur spÇcifiÇe par
                                   <DEST>.

                                   Ex: CALL MaProcÇdure


   ˛ CBW                          - Nom : Convertir un octet en word
                                    Type: 8086+

                                    Description: Cette instruction Çtent
                                    l'octet de AL Ö AX.

                                    Ex: MOV   AL, 01h
                                        CBW
                                        ADD   BX, AX   ; N'importe quoi avec 
                                                         AX


   ˛ CLC                          - Nom : Efface le Carry Flag
                                    Type: 8086+

                                    Description: Cette instruction efface le 
                                    carry flag dans le registre des flags en
                                    le mettant Ö 0.

                                    Ex: CLC


   ˛ CLD                          - Nom : Efface le Direction Flag
                                    Type: 8086+

                                    Description: Cette instruction efface le
                                    direction flag dans le registre des flags
                                    en le mettant Ö 0. Quand le direction
                                    flag est Ö 0, n'importe quelle chaåne
                                    d'instructions augmente les registres
                                    d'index SI et DI.

                                    Ex: CLD


   ˛ CLI                          - Nom : Efface l'Interrupt Flag
                                    Type: 8086+

                                    Description: Cette instruction efface l' 
                                    interrupt flag dans le registre des flags
                                    en le mettant Ö , puis en dÇsactivant les
                                    interruptions hardware.

                                    Ex: CLI


   ˛ CMC                          - Nom : Compläte le Carry Flag
                                    Type: 8086+

                                    Description: Cette instruction vÇrifie la
                                    valeur dans le carry flag. Si c'est 0 - áa
                                    passe Ö 1, et si c'est 1 - áa passe Ö 0.

                                    Ex: BT   AX, 1    ; Teste le premier bit
                                                        de AX
                                        JC   EgalA1
                                        JMP  Done

                                        EgalA1:
                                        CMC           ; Met le CF Ö 0

                                        Done:


   ˛ CMP <VALEUR1>, <VALEUR2>     - Nom : Compare deux entiers
                                    Type: 8086+

                                    Description: Cette instruction compare
                                    <VALEUR1> et <VALEUR2> et refläte la
                                    comparaison dans les flags.

                                    Ex: CMP AX, BX

                                    Voir aussi l'instruction Jcc.


   ˛ CWD                          - Nom : Convertir un Word en Doubleword
                                    Type: 8086+

                                    Description: Cette instruction Çtend le
                                    word dans AX Ö une paire en DX:AX.

                                    Ex: CWD


   ˛ DEC <VALEUR>                 - Nom : Diminue
                                    Type: 8086+

                                    Description: Cette instruction soustrait
                                    1 du nombre dans <VALEUR> et y stocke
                                    le rÇsultat.

                                    Ex: DEC AX


   ˛ DIV <VALEUR>                 - Nom : Division Relative
                                    Type: 8086+

                                    Description: Cette instruction divise 
                                    <VALEUR> par soit AX pour un octet, soit
                                    DX:AX pour un word ou EDX:EAX pour un
                                    doubleword.

                                    Pour un octet, le quotient est inscrit en
                                    AL et le reste (de la division) en AH;
                                    pour un word, le quotient est inscrit en
                                    AX et le reste en DX; et pour un DWORD
                                    (doubleword), le quotient est inscrit en
                                    EAX et le reste en EDX.

                                    Ex: MOV   AX, 12
                                        MOV   BH, 5
                                        DIV   BH
                                        MOV   Quotient, AL
                                        MOV   Reste, AH


   ˛ IN <ACCUMULATEUR>, <PORT>    - Nom : EntrÇe du port I/O (Input/Output:
                                          EntrÇe/Sortie)
                                    Type: 8086+

                                    Description: Cette instruction lit une
                                    valeur d'un des 65536 ports matÇriels dans
                                    l'accumulateur spÇcifiÇ.

                                    AX et AL sont gÇnÇralement utilisÇs pour
                                    les ports d'entrÇe, et DX pour identifier
                                    le port.

                                    Ex: IN    AX, 72h

                                        MOV   DX, 3C7h
                                        IN    AL, DX


   ˛ INC <VALEUR>                 - Nom : Augmente 
                                    Type: 8086+

                                    Description: Cette instruction ajoute 1 au
                                    nombre contenu dans <VALEUR>, et y Çcrit
                                    le rÇsultat.

                                    Ex: MOV   AX, 13h   ; AX = 13h
                                        INC   AX        ; AX = 14h


   ˛ INT <INTERRUPTION>           - Nom : GÇnäre une Interruption
                                    Type: 8086+

                                    Description: Cette instruction sauvegarde
                                    les flags courants et le pointeur d'
                                    instruction sur la pile, et ensuite
                                    appelle l'<INTERRUPTION> basÇe sur la
                                    valeur en AH.

                                    Ex:   MOV   AH, 00h   ; Passe en mode
                                                            vidÇo
                                          MOV   AL, 13h   ; Mode vidÇo 13h
                                          INT   10h       ; GÇnäre une
                                                            interruption


   ˛ Jcc                          - Nom : Saut si Condition
                                    Type: 8086+

   Je ne vais pas me rÇpÇter pour les 32, vous n'avez qu'Ö regarder dans le
   Tutorial 3 pour avoir la liste compläte. Gardez Ö l'esprit que ce serait
   une bonne idÇe d'utiliser CMP, OR, DEC ou quelque chose de semblable avant
   d'utiliser une de ces instructions :) .

   Ex: DEC   AX
       JZ    AX_A_Atteint_0


   ˛ JMP <DEST>                   - Nom : Saut
                                    Type: 8086+

                                    Description: Cette instruction charge
                                    simplement une nouvelle valeur, <DEST>,
                                    dans l'IP, puis transfäre le programme
                                    Ö une autre partie du code.

                                    Ex: JMP   MyLabel


   ˛ LAHF                         - Nom : Remplit AH avec des flags
                                    Type: 8086+

                                    Description: Cette instruction copie les
                                    bas octets des registres de flags dans AH.
                                    Le contenu d'AH ressemblera Ö áa apräs
                                    que l'instruction ait ÇtÇ exÇcutÇe:


              ⁄ƒƒƒƒƒƒ¬ƒƒƒƒ¬ƒƒƒƒ¬ƒƒƒƒ¬ƒƒƒƒ¬ƒƒƒƒ¬ƒƒƒƒ¬ƒƒƒƒ¬ƒƒƒƒø
              ≥ Flag ≥ SF ≥ ZF ≥ -- ≥ AF ≥ -- ≥ PF ≥ -- ≥ CF ≥
              √ƒƒƒƒƒƒ≈ƒƒƒƒ≈ƒƒƒƒ≈ƒƒƒƒ≈ƒƒƒƒ≈ƒƒƒƒ≈ƒƒƒƒ≈ƒƒƒƒ≈ƒƒƒƒ¥
              ≥ Bit  ≥ 07 ≥ 06 ≥ 05 ≥ 04 ≥ 03 ≥ 02 ≥ 01 ≥ 00 ≥
              ¿ƒƒƒƒƒƒ¡ƒƒƒƒ¡ƒƒƒƒ¡ƒƒƒƒ¡ƒƒƒƒ¡ƒƒƒƒ¡ƒƒƒƒ¡ƒƒƒƒ¡ƒƒƒƒŸ

            Vous pouvez maintenant tester les bits individuellements, ou
          rÇaliser une instruction similaire Ö la suivante pour obtenir un
          flag individuel:

          Ex: LAHF
              SHR   AH, 6
              AND   AH, 1   ; AH contaient maintenant le flag ZF


   ˛ LEA <DEST>, <SOURCE>         - Nom : Charge une Adresse Effective
                                    Type: 8086+

                                    Description: Cette instructrion charge
                                    l'adresse mÇmoire dans laquelle est
                                    <SOURCE>, dans <DEST>.

                                    Ex: J'utilise LEA   SI, Str dans une de
                                        mes procÇdure qui affiche träs
                                        rapidement une chaåne Ö l'Çcran.


   ˛ LOOP <LABEL>                 - Nom : Diminue CX et effectue un
                                          Branchement
                                    Type: 8086+

                                    Description: Cette instruction est une 
                                    forme de la boucle "For... Do" qui existe
                                    dans de nombreux langages haut-niveau.
                                    En fait; cela renvoie a un label (nom
                                    donnÇ Ö une sÇrie d'instructions), ou
                                    une adresse mÇmoire, jusqu'Ö ce que
                                    CX = 0.

                                    Ex: MOV   CX, 12

                                        PeuImporte:
                                           ;...
                                           ;...
                                           ;... Ca va àtre rÇpÇtÇ 12 fois

                                        LOOP PeuImporte


   ˛ Lseg <DEST>, <SOURCE>        - Nom : Charge le registre de segment
                                    Type: 8086+

                                    Description: Cette instruction existe
                                    sous plusieurs formes. Toutes acceptent la
                                    màme syntaxe, dans laquelle <SOURCE> est
                                    un pointeur 48 bit, constituÇ d'un offset
                                    32 bit et d'un sÇlecteur 16 bit. L'offset
                                    32 bit est chargÇ dans <DEST>, et le
                                    sÇlecteur est chargÇ dans le registre de
                                    segment spÇcifiÇ par seg.

                                    Les formes suivantes existent:

                                    LDS
                                    LES
                                    LFS     * 32-bit
                                    LGS     * 32-bit
                                    LSS

                                    Ex: LES   SI, Un_Pointeur


   ˛ MOV <DEST>, <SOURCE>         - Nom : DÇplacement de donnÇes
                                    Type: 8086+

                                    Description: Cette instruction copie
                                    <SOURCE> dans <DEST>.

                                    Ex: MOV   AX, 3Eh
                                        MOV   SI, 12h


   ˛ MUL <SOURCE>                 - Nom : Multiplication Relative
                                    Type: 8086+

                                    Description: Cette instruction multiplie
                                    <SOURCE> par l'accumulateur, qui dÇpend de
                                    la taille de <SOURCE>.

                                    Si <SOURCE> est un octet:  

                                    * AL est le multiplicateur;
                                    * AX est le produit.

                                    Si <SOURCE> est un word:   

                                    * AX est le multiplicateur;
                                    * DX:AX est le produit.

                                    Si <SOURCE> est un doubleword:   

                                    * EAX est le multiplicateur;
                                    * EDX:EAX est le produit.

                                    Note: Les flags sont laissÇs tels quels
                                    sauf pour OF et CD, qui sont remis Ö 0
                                    si le haut octet, le word ou le dword du
                                    produit est 0.

                                    Ex: MOV   AL, 3
                                        MUL   10
                                        MOV   RÇsultat, AX


   ˛ NEG <VALEUR>                 - Nom : NÇgation
                                    Type: 8086+

                                    Description: Cette instruction soustrait
                                    <VALEUR> Ö 0, donnant une nÇgation Ö 2
                                    complÇments de <VALEUR>.

                                    Ex: MOV   AX, 03h
                                        NEG   AX       ; AX = -3


   ˛ NOT <VALEUR>                 - Nom : ComplÇment BoolÇen
                                    Type: 8086+

                                    Description: Cette instruction inverse  
                                    l'Çtat de chaque bit de <VALEUR>.

                                    Ex: NOT   CX


   ˛ OR <DEST>, <SOURCE>          - Nom : OU BoolÇen
                                    Type: 8086+

                                    Description: Cette instruction rÇalise une
                                    opÇration de OU BoolÇen entre chaque bit
                                    de <DEST> et de <SOURCE>, et Çcrit le
                                    rÇsultat dans <DEST>.

                                    Ex: OR 0, 0     = 0
                                        OR 0, 1     = 1
                                        OR 1, 0     = 1
                                        OR 1, 1     = 1


   ˛ OUT <PORT>, <ACCUMULATEUR>   - Nom : Sortie vers un Port
                                    Type: 8086+

                                    Description: Cette instruction envoye la 
                                    valeur Ö l'accumulateur dans <PORT>. En
                                    utilisant le registre DX pour passer le
                                    port avec OUT, vous pouvez accÇder Ö
                                    65536 ports.

                                    Ex: MOV   DX, 378h
                                        OUT   DX, AX


   ˛ POP <REGISTRE>               - Nom : Remplir Registre
                                    Type: 8086+

                                    Description: Cette instruction enläve la
                                    valeur courante de la pile et la place
                                    dans <REGISTRE>.

                                    Ex: POP   AX


   ˛ POPA                         - Nom : Remplir tous les Registres GÇnÇraux
                                    Type: 80186+

                                    Description: Cette instruction remplit
                                    tous les registres 16 bit gÇnÇraux Ö
                                    l'aide de la pile, sauf SP.

                                    C'est la màme chose que:

                                    POP   AX
                                    POP   BX
                                    POP   CX
                                    ...

                                    Ex: POPA


   ˛ POPF                         - Nom : SÇparer la Pile en Flags
                                    Type: 8086+

                                    Description: Cette instruction Çclate les
                                    bas octets de la pile en flags.

                                    Ex: POPF


   ˛ PUSH <REGISTRE>              - Nom : Mettre un Registre en haut
                                    Type: 8086+

                                    Description: Cette instruction pousse
                                    <REGISTRE> en haut de la pile.

                                    Ex: PUSH  AX


   ˛ PUSHA                        - Nom : Mettre tous les Registres GÇnÇraux
                                          sur la Pile
                                    Type: 80186+

                                    Description: Cette instruction pousse tous
                                    les registres 16 bit gÇnÇraux en haut de
                                    la pile.

                                    C'est la màme chose que:

                                    PUSH  AX
                                    PUSH  BX
                                    PUSH  CX
                                    ...

                                    Ex: PUSHA


   ˛ PUSHF                        - Nom : Mettre les Flags dans la pile
                                    Type: 8086+

                                    Description: Cette instruction met les
                                    bas octets des flags dans la pile.

                                    Ex: PUSHF


   ˛ REP                          - Nom : RÇpÇter l'instruction suivante
                                    Type: 8086+

                                    Description: Cette instruction rÇpäte
                                    la suivante le nombre de fois spÇcifiÇ
                                    dans le registre CX.

                                    Ex: MOV   CX, 6
                                        REP   STOSB    ; Stocke 6 octets


   ˛ RET                          - Nom : Renvoi au plus proche      
                                    Type: 8086+

                                    Description: Cette instruction met dans IP
                                    la valeur qu'il contenait avant le dernier
                                    CALL. RET, ou RETF pour un saut, doit
                                    àtre utilisÇ lorsqu'on programme
                                    uniquement en assembleur.

                                    Ex: RET


   ˛ ROL <DEST>, <VALEUR>         - Nom : Effectue une rotation vers la gauche
                                    Type: 8086+

                                    Description: Cette instruction effectue
                                    une rotation de <DEST> <VALEUR> fois. Une
                                    rotation consiste Ö dÇplacer <DEST> une
                                    fois, ensuite transfÇrer le bit dÇplacÇ
                                    de la plus haute Ö la plus basse position
                                    de <DEST>.

                                    Ex: ROL   AX, 3


   ˛ ROR <DEST>, <VALEUR>         - Nom : Effectue une rotation vers la droite
                                    Type: 8086+

                                    Description: Cette instruction effectue
                                    une rotation de <DEST> <VALEUR> fois. Une
                                    rotation consiste Ö dÇplacer <DEST> une
                                    fois, ensuite transfÇrer le bit dÇplacÇ
                                    de la plus basse Ö la plus haute position
                                    de <DEST>.

                                    Ex: ROR    BX, 5


   ˛ SAHF                         - Nom : Stocke Ah dans les flags
                                    Type: 8086+

                                    Description: Cette instruction charge le
                                    contenu du registre AH dans les bits
                                    7, 6, 4, 2 et 0 du registre des flags.

                                    Ex: SAHF


   ˛ SBB <DEST>, <SOURCE>         - Nom : Soustraction avec Emprunt
                                    Type: 8086+

                                    Description: Cette instruction soustrait
                                    <SOURCE> Ö <DEST>, et diminue <DEST> de 1
                                    si le carry flag est Ö 1, stockant le
                                    rÇsultat dans <DEST>.

                                    Donc, <DEST> = <DEST> - <SOURCE> - CF

                                    Ex: SBB   AX, BX


   ˛ SHL <DEST>, <VALEUR>        - Nom : DÇplacement vers la gauche
                                   Type: 8086+

                                   Description: Cette instruction dÇplace
                                   <DEST> vers la gauche de <VALEUR>. Je vais
                                   pas recommencer Ö expliquer la thÇorie des
                                   dÇplacements. Si vous n'àtes pas sñr de
                                   comprendre, cette instruction, rÇfÇrez-vous
                                   au tutorial 4.

                                   Ex: SHL   AX, 5


   ˛ SHR <DEST>, <VALEUR>        - Nom : DÇplacement vers la droite
                                   Type: 8086+

                                   Description: Cette instruction dÇplace
                                   <DEST> vers la droite de <VALEUR>. RÇfÇrez-
                                   vous au tutorial 4 pour la thÇorie des
                                   dÇplacements.

                                   Ex: SHR   DX, 1


   ˛ STC                         - Nom : Active le Carry Flag
                                   Type: 8086+

                                   Description: Cette instruction donne au
                                   Carry flag la valeur de 1.

                                   Ex: STC


   ˛ STD                         - Nom : Active le Direction Flag
                                   Type: 8086+

                                   Description: Cette instrucion donne au
                                   carry flag la valeur de 1 [NONO: ne serait-
                                   ce pas plutìt au direction flag?]. Cela
                                   ordonne de diminuer les registres d'index.

                                   Ex: STD
                                       REP STOSB   ; DI est diminuÇ


   ˛ STI                         - Nom : Active l'Interrupt Flag
                                   Type: 8086+

                                   Description: Cette instruction donne Ö l'
                                   interrupt flag la valeur de 1, ce qui
                                   permet des interruptions matÇrielles.

                                   Ex: CLI      ; Stoppe les interruptions
                                       ...      ; RÇalise une fonction
                                                  importante
                                       STI      ; Permet les interruptions


   ˛ STOS                        - Nom : Stocke une chaåne
                                   Type: 8086+

                                   Description: Cette instruction existe sous
                                   les formes suivantes:

                                   STOSB      - Stocke un octet      - AL
                                   STOSW      - Stocke un word       - AX
                                   STOSD      - Stocke un doubleword - EAX

                                   Cette instruction Çcrit le contenu de
                                   l'accumulateur Ö l'adresse mÇmoire
                                   indiquÇe par ES:DI. Ensuite, elle augmente
                                   ou diminue DI suivant les instructions,
                                   et suivant la valeur dans le direction
                                   flag.

                                   Ex: MOV   AX, 0A000h
                                       MOV   ES, AX
                                       MOV   AL, 03h
                                       MOV   DI, 0
                                       STOSB           ; Stocke 03 en ES:DI,
                                                       ; ce qui est en fait
                                       ; le haut de l'Çcran en mode 13h


   ˛ SUB <DEST>, <SOURCE>        - Nom : Soustraire
                                   Type: 8086+

                                   Description: Cette instruction soustrait
                                   <SOURCE> de <DEST>, stockant le rÇsultat
                                   dans <DEST>.

                                   Ex: SUB   ECX, 12


   ˛ TEST <DEST>, <SOURCE>       - Nom : Test des Bits
                                   Type: 8086+

                                   Description: Cette instruction rÇalise une
                                   opÇration ET bit-Ö-bit sur <SOURCE> et
                                   <DEST>. Le rÇsultat est refletÇ dans les
                                   flags, et ils sont activÇs comme apräs
                                   une opÇration ET.

                                   Ex: TEST   AL, 0Fh   ; VÇrifie si il y a
                                                        ; des bits dans le bas
                                                        ; nibble d'AL


   ˛ XCHG <VALEUR1>, <VALEUR2>   - Nom : Echange
                                   Type: 8086+

                                   Description: Cette instruction Çchange les
                                   valeurs dans <VALEUR1> et <VALEUR2>.

                                   Ex: XCHG   AX, BX


   ˛ XOR <DEST>, <SOURCE>        - Nom : OU BoolÇen Exclusif
                                   Type: 8086+

                                   Description: Cette instruction rÇalise une
                                   opÇration de OU exclusif bit-Ö-bit entre
                                   <SOURCE> et <DESt>. L'opÇration est la
                                   suivante:

                                   XOR   0, 0    = 0
                                   XOR   0, 1    = 1
                                   XOR   1, 0    = 1
                                   XOR   1, 1    = 0

                                   Ew: XOR   AX, BX


 ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ

Ouf! Il y en a beaucoup, et on a seulement vu les basiques! Vous n'àtes pas
censÇ tous les comprendre. Vous avez probablement vu des choses comme
"nÇgation Ö 2 complÇments" et pensÇ: "Qu'est ce que áa veut bien dire?".

Mais ne vous en inquiÇtiez pas pour le moment. On va continuer Ö notre rythme
habituel, and introduire les nouvelles instructions une Ö une, en les
expliquant. Si vous avez dÇjÖ tout compris, eh bien considÇrez ceci comme un
bonus. Vous remarquerez aussi qu'il y avait de nombreuses instructions 8086.
Il y a pour le moment peu de situations nÇcessitant l'emploi d'instructions
386 ou 486, sans parler des pour les Pentium [NONO: Çvidemment, cela n'est
plus träs vrai aujourd'hui. Tout au plus on peut dire que les instructions
KNI pour le Pentium III ne sont sans doute pas trop utilisÇes pour le moment].

De toute faáon, avant de passer au VGA, je vais juste lister la vitesse Ö
laquelle chacune des instructions ci-dessus s'exÇcute, pour que vous
ayez une idÇe de la vitesse de vos routines en Assembleur.


 ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ

 Instruction      Battements d'horloge    Battements d'horloge
                        386                    486

 ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ

    ADC                  2                     1
    ADD                  2                     1
    AND                  2                     1
    BT                   3                     3
    CALL                 7+m                   3
    CBW                  3                     3
    CLC                  2                     2
    CLD                  2                     2
    CLI                  5                     3
    CMC                  2                     2
    CMP                  2                     1
    CWD                  2                     3
    DEC                  2                     1
    DIV                  -                     -
        - Octet          9-14                  13-18
        - Word           9-22                  13-26
        - DWord          9-38                  13-42
    IN                   12/13                 14
    INC                  2                     1
    INT                  dÇpend                dÇpends
    Jcc                  -                     -
        - Branchement    7+m                   3
        - Pas de Branch. 3                     1
    JMP                  7+m                   3
    LAHF                 2                     3
    LEA                  2                     1
    LOOP                 11                    6
    Lseg                 7                     6
    MOV                  2                     1
    MUL                  -                     -
        - Octet          9-14                  13-18
        - Word           9-22                  13-26
        - DWord          9-38                  13-42
    NEG                  2                     1
    NOT                  2                     1
    OR                   2                     1
    OUT                  10/11                 16
    POP                  4                     1
    POPA                 24                    9
    POPF                 5                     9
    PUSH                 2                     1
    PUSHA                18                    11
    PUSHF                4                     4
    REP                  dÇpend                dÇpend
    RET                  10+m                  5
    ROL                  3                     3
    ROR                  3                     3
    SAHF                 3                     2
    SBB                  2                     1
    SHL                  3                     3
    SHR                  3                     3
    STC                  2                     2
    STD                  2                     2
    STI                  3                     5
    STOS                 4                     5
    SUB                  2                     1
    TEST                 2                     1
    XCHG                 3                     3
    XOR                  2                     1

 Note: m = Nombre de composants dans la prochaine instruction exÇcutÇe.

Oh, je ne veux plus jamais voir un tableau comme celui-ci! Maintenant, passons
Ö la partie "amusante" - le VGA!


 ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ

Vous avez probablement remarquÇ que votre carte vidÇo a plus de 256K de RAM.
Màme si vous avez seulement 256K de RAM, comme c'est le cas sur mon vieux 386,
vous pouvez accÇder au mode 13h - 320x200x256. Cependant, cela souläve
quelques problämes.

Multipliez 320 par 200 et vous remarquerez que vous avez seulement besoin de
64000 octets pour stocker un simple Çcran.

Eh bien, le VGA est disposÇ en plans, comme ceci:


                     ⁄ƒƒƒƒƒƒƒƒ3ƒƒƒƒƒƒƒø
                   ⁄ƒ¡ƒƒƒƒƒƒ2ƒƒƒƒƒƒƒø ≥
                 ⁄ƒ¡ƒƒƒƒƒƒ1ƒƒƒƒƒƒƒø ≥ ≥
               ⁄ƒ¡ƒƒƒƒƒƒ0ƒƒƒƒƒƒƒø ≥ ≥ ≥
               ≥                ≥ ≥ ≥ ≥
               ≥                ≥ ≥ ≥ ≥
               ≥     64,000     ≥ ≥ √ƒŸ
               ≥                ≥ √ƒŸ
               ≥                √ƒŸ
               ¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ

Chaque plan fait 64000 octets. Voici comment áa marche:

 Un pixel en 0, 0 est dÇfini dans le plan 0 Ö l'offset 0;
 Un pixel en 1, 0 est dÇfini dans le plan 1 Ö l'offset 0;
 Un pixel en 2, 0 est dÇfini dans le plan 2 Ö l'offset 0;
 Un pixel en 3, 0 est dÇfini dans le plan 3 Ö l'offset 0;
 Un pixel en 4, 0 est dÇfini dans le plan 0 Ö l'offset 1...et ainsi de suite..

Parce que les pixels sont enchaånÇs sur les quatre okans, il est impossible
d'utiliser plusieurs pages en mode 13h sans recourir Ö un Çcran virtuel ou
quelque chose dans le genre.

La rÇpartition (mapping) automatique des pixels est complÇtement effectuÇe par
la carte vidÇo, aussi vous pouvez tranquillement travailler dans rien
connaåtre Ö ce sujet, si áa vous chante.

On verra áa plus tard, en utilisant un mode spÇcial, connu sous le nom de
Mode X, mais pour le moment, voyons voir ce que l'on peut dÇjÖ faire avec ce
bon vieux mode 13h.


 ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ

         ⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
         ≥                                                          ≥
         ≥                     DESSINER DES LIGNES                  ≥
         ≥                                                          ≥
         ¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ


Bon, on a un peu dÇpassÇ la taille prÇvue pour ce tutorial, et j'avais prÇvu
de voir l'Algorithme de Bresenham pour des Lignes, mais áa devra attendre la
semaine prochaine. Cependant, on va dÇjÖ voir comment dessiner une ligne en
Assembleur.


  Un Routine pour afficher une Ligne Horizontale en Assembleur:
 ---------------------------------------------------------------

DÇjÖ, on va envoyer ES en VGA.

Ceci devrait faire l'affaire:

   MOV   AX, 0A000h
   MOV   ES, AX

Maintenant, on doit lire X1, X2 et les valeurs de Y dans les registres, avec
quelque chose comme áa:

   MOV   AX, X1    ; AX vaut maintenant X1
   MOV   BX, Y     ; BX vaut maintenant Y
   MOV   CX, X2    ; CX vaut maintenant X2

Il est nÇcessaire de prÇciser la longueur de la ligne, aussi on va utiliser
CX pour la stocker: i) CX contient dÇjÖ X2, et ii) on va utiliser une
instruction REP, pour faire de CX un compteur.

   SUB   CX, AX    ; CX = X2 - X1

Maintenant on va utiliser DI pour le premier pixel Ö afficher, donc on va se
servir de la routine PutPixel vue prÇcÇdemment:

   MOV   DI, AX    ; DI = X1
   MOV   DX, BX    ; DX = Y
   SHL   BX, 8     ; DÇplacer Y de 8 vers la gauche
   SHL   DX, 6     ; DÇplacer Y de 6 vers la gauche
   ADD   DX, BX    ; DX = Y SHL 8 + Y SHL 6
   ADD   DI, DX    ; DI = Y x 320 + X

On a maintenant l'offset du premier pixel, donc il ne nous reste plus qu'Ö
prÇciser la couleur, dans AL, et utiliser STOSB pour afficher le reste de la
ligne.

   MOV   AL, Couleur ; DÇplacer la couleur dans AL
   REP   STOSB       ; Afficher les pixels de CX

Remarquez qu'on a utilisÇ STOSB car il va incrÇmenter DI pour nous, pour
Çconomiser des instructions MOV et INC. Maintenant, suivant le langage que
vous utilisez, vous aurez quelque chose comme áa:


   void Draw_Horizontal_Line(int x1, int x2, int y, char color);
   {
   asm {
      mov   ax, 0xa000
      mov   es, ax        ; Mettre ES en VGA

      mov   ax, x1        ; AX = X1
      mov   bx, y         ; BX = Y
      mov   cx, x2        ; CX = X2

      sub   cx, ax        ; CX = DiffÇrence entre X2 et X1

      mov   di, ax        ; DI = X1
      mov   dx, bx        ; DX = Y
      shl   bx, 8         ; Y SHL 8
      shl   dx, 6         ; Y SHL 6
      add   dx, bx        ; DX = Y SHL 8 + Y SHL 6
      add   di, dx        ; DI = Offset du premier pixel

      mov   al, color     ; Stocke la couleur en AL
      rep   stosb         ; Dessine la ligne
            }
   }

                                       Adam Hyde, blackcat@faroc.com.au

******************************************************************************
***********************Le nihilisme (King Fisher)*****************************
******************************************************************************

  Dans P.G.K. n¯1, j'ai passÇ le fameux texte "la conscience d'un hacker".
  Bug-in m'a dit qu'il avait ÇtÇ inspirÇ par le texte suivant (pourtant datÇ
de 1995!), Çcrit par King Fisher, et que je n'avais jamais lu (mais je dois
reconnaåtre que je n'ai plus le temps de lire tout ce que je trouve sur le
net...).

                                       NONO, nono_18_02@hotmail.com

  "Ils disent qu'un nihiliste est une personne qui renie les valeurs. Ce n'est
pas tout Ö fait vrai. Un nihiliste est quelqu'un qui renie certaines valeurs,
et en construit de nouvelles. Quelqu'un qui ne fait que renier les valeurs,
et ne veut que dÇtruire la sociÇtÇ, est plutìt un anarchiste, ou un pur et
simple vandale, un prophäte de l'absence de valeurs.
  Pour moi, je prÇfäre me dire un adhÇrent de la philosophie Zen, le
Faillibilisme, ou simplement: une personne qui croit qu'il n'y a pas d'entitÇs
fixes telles que "Le Bien", "Le Mal" ou "La PropriÇtÇ PrivÇe", tous concepts
qui ne sont que des constructions momentanÇes de l'esprit humain. Je suis du
cìtÇ de Nietzsche, en un sens, mais je veux aller au-delÖ de Nietzsche, car le
Nihilisme est toujours crÇatif.
 
  Ils disent que les crackers sont des cafards malÇfiques qui veulent ruiner
les compagnies de logiciels et voler les sous qui reviennent aux malheureux
programmeurs. Moi, ce que je dis, c'est que l'information est Ö tout le monde,
comme l'air qui nous entoure, et que personne n'a le droit de la mettre
derriäre des murs. Si vous pensez que les hackers ne sont qu'une bande
d'anarchistes pràts Ö tout mettre Ö feu et Ö sang parce que áa les amuse, vous
vous trompez du tout au tout.
  Nous sommes bien pires que áa. 
 
  Nous mettons Ö bas, oui, mais nous en sommes fiers, et nous le faisons parce
que nous devons le faire. Quelqu'un doit libÇrer l'information. Je ne hacke
pas parce que je hais la sociÇtÇ, mais parce que je l'aime et que je souhaite
qu'elle Çvolue. Je considäre le hack comme une action hautement politique, et
je suis fermement convaincu qu'il est JUSTE de hacker! 
 
  Maintenant vous àtes troublÇs. Laissez-moi encore vous expliquer. 
 
  Cette annÇe, en 1995, je peux entrer dans n'importe quelle bibliothäque,
prendre N'IMPORTE QUEL livre, aller Ö la photocopieuse et copier toutes les
pages si je le souhaite. Tout ceci est parfaitement lÇgal, du moins ici en
Suäde. L'Çtat suÇdois (comme beaucoup d'autres) a dÇcidÇ que ses citoyens
avaient le droit de copier des livres.
 
  Maintenant, je rentre Ö la maison. Je regarde mon lecteur de CD. Je n'ai pas
le droit de me faire une cassette de mes morceaux favoris. C'est illÇgal. Je
regarde mes cassettes vidÇo. Je n'ai pas le droit de les copier. C'est illÇgal
. Je regarde mes boåtes de disquettes qui contiennent des logiciels Microsoft
que j'ai achetÇs. Eh bien, j'ai le droit de me faire des copies de sauvegarde,
mais pas de les donner Ö mes amis. C'est illÇgal.
 
  Ca me rend malade! Quelle diffÇrence entre des logiciels, des CD, des
cassettes vidÇo et les livres que j'emprunte Ö la bibliothäque du quartier?
Tout cela est de l'information, grands dieux! Le probläme dans ce cas n'est
pas l'information en elle-màme. Le probläme est que cette sociÇtÇ m'a
conditionnÇ Ö croire qu'on avait le droit de possÇder l'information, comme la
terre ou l'argent, ou comme les Grecs ou les Çleveurs de coton sudistes purent
croire qu'on avait le droit de possÇder DES GENS. Ils appelaient áa
l'esclavage. Je rÇalise que je suis un esclave de la sociÇtÇ qui contrìle
l'information. Parce que c'est de cela qu'il est question. De contrìle.
Complet, absolu, et indiscutable contrìle.
 
  Je ne suis pas en train de vous dire que je veux que les lois sur les droits
d'auteur soient remplacÇes par le chaos. Si je souhaitais le chaos, je serais
une bàte destructrice et pas un citoyen constructif. J'aime notre sociÇtÇ, et
je pense qu'elle est une des meilleures au monde. J'aime encore plus les
communautÇs du cyberespace comme la Scäne ou Use Net, parce qu'elles sont
internationales et multiculturelles. C'est pourquoi je veux dire Ö la sociÇtÇ
qu'il y a quelque chose qui ne va pas. Je veux souffler dans mon sifflet
pendant qu'il est encore temps.
 
  Je n'ai rien contre les compagnies de logiciels et je ne les hais pas. En
fait, je veux qu'il existe des compagnies de logiciels. Ce que je n'aime pas,
c'est la structure sociale et le cadre Çconomique qui gouvernent les gens
comme les entreprises, et auxquelles ils doivent obÇir. Je crois les
entreprises et les gens Çgalement prisonniers de ce systäme.
  Vous dites que quelqu'un doit payer. Pourquoi? En quoi consiste ce paiement,
de toute faáon? Qu'est ce que le "savoir sous licence" et le "savoir dans le
domaine public"? Ou, pour utiliser le langage lui-màme de l'autoritÇ: en quoi
consiste cette arnaque de la "propriÇtÇ intellectuelle" autour de laquelle
vous faites tant de bruit? Quelle information ai-je le droit de possÇder ?
Quelle information ai-je le droit de transporter dans ma tàte ?
 
  Pour les partisans de l'Çconomie post-moderne, la propriÇtÇ et le droit sur
l'information sont une religion. Ils suivent les dieux de l'Çconomie et
pensent qu'ils seront au paradis le jour oó ils deviendront des yuppies avec
la cravate et le costume. Pour eux, le gars qui mourra en laissant le plus de
voitures et de gadgets Çlectroniques derriäre lui aura ÇtÇ le plus malin de la
bande. Mon dieu, je dÇteste ces demi-dieux. Il n'y a rien qui ne soit de
l'information, yuppies Ö la tàte carrÇe. William Gibson a peut-àtre ÇtÇ le
premier Ö le rÇaliser en 1982. Pourtant, bien peu de gens ont compris ce qu'il
voulait vraiment dire. Peut-àtre n'en Çtait-il pas tout Ö fait conscient
lui-màme ?
 
  Le changement nÇcessaire dans cette sociÇtÇ, c'est d'arracher le savoir du
contrìle des grandes compagnies et de l'Çtat pour le rendre aux gens Ö qui il
appartient, faute de quoi le monde a toutes les chances de ressembler Ö celui
que dÇcrivait Gibson dans "Neuromancien". 
 
  C'est pourquoi nous prenons le nom de cyberpunks. Nous sommes des
hors-la-loi, branchÇs et connectÇs. Nous ferons naåtre une äre nouvelle. A nos
yeux, l'information Çlectronique n'est pas un symbole ou un statut, ou une
faáon de gagner de l'argent et la considÇration gÇnÇrale, mais une extension
de l'esprit humain.
  C'est pourquoi Timothy Leary a appelÇ le micro-ordinateur le LSD des annÇes
90 - les ordinateurs semblent Çlargir le champ de vision des gens.
 
  Nous ne voulons pas voler les entreprises. Diable non. Nous voulons juste
qu'on nous rende nos droits de citoyens. Si je possäde un bout d'information,
je veux avoir le droit de le copier. Et si vous essayez de m'en empàcher,
c'est sñr que je vais mordre. Ne touchez pas ma vie privÇe ! Foutez le camp de
ma vie!
 
  Mon idÇologie brñle pour moi comme une lanterne dans la nuit. Ce n'est pas
une idÇologie de libÇralisme, ni le socialisme, le conservatisme, le
communisme ou toutes ces idÇologies qu'on vous apprend Ö l'Çcole. Mon
idÇologie s'appelle Cyberpunk.
 
  Les mafias qui s'accaparent la terre, les pirates qui gagnent des fortunes
en vendant des jeux Ö des pauvres dingues de l'ordinateur, ceux qui gagnent
leur vie en parasites de la sociÇtÇ, tous ceux-lÖ, vous pouvez les pourchasser
et les tuer si áa vous plait. Personne ne les regrettera. MAIS NE TOUCHEZ PAS
LES HACKERS ET LES SWAPPERS, car ceux-ci ne sont pas vos ennemis. Un vrai
cyberpunk ne ferait jamais payer une information. Il Çchange seulement, et je
pense qu'il en a le droit. D'autres ne le pensent pas. 
 
  Je ne veux pas dÇtruire. 
  Je veux crÇer." 
 
                                       King Fisher

******************************************************************************
******************************Cryptage (Bug-in)*******************************
******************************************************************************

  Bon, dans ce texte, je ne vais pas vous dire comment dÇcrypter un code en x
bits, ni comment áa marche, non rien de tout áa. Juste vous dire quel est le
type de cryptage le plus sñr pour l'envoi de mail, et comment bien s'en servir
et le crÇer.

  Donc, voilÖ. Ce n'est pas nouveau, le courrier Çlectronique est filtrÇ grÉce
Ö de petits programmes recherchant des mots-clÇs...mais il ne font pas que áa.
Tout courrier apparemment Çtrange, ne contenant que des chiffres, aucun espace
entre les lettres, un fichier attachÇ sous forme exe... sera repÇrÇ.

  La technique est donc simple: pour que votre mail soit cryptÇ, il ne faut
utiliser que des phrases courantes, mais ayant un sens totalement diffÇrent.
En plus, je vous rappelle que si on trouve un courrier cryptÇ, l'Etat a le
droit de vous demander la clÇ de cryptage si il vous soupáonne de quoi que ce
soit (surtout de terrorisme).
  Il faut donc employer des mots normaux, ou envoyer un .jpg, oó lÖ tu peux
t'amuser Ö crypter un truc avec des dessins, parce que lÖ, c'est plus dur Ö
dÇcrypter qu'un message codÇ avec des chiffres, le hacking en est la preuve
màme... N'employez PAS DE NOMBRE de plus de 10 chiffres.

  Donc vous crÇez votre dico de mots Çquivalents et l'envoyez par la poste ou
autre Ö votre correspondant.

  Le message peut-àtre reáu ainsi:
"Bonjour Vitali, c'est Fox. Vous savez le Mozart Institure... Je vous appelle
pour une modification d'ordinateur. Pour un client Ö Dîsseldorf.
Il faudrait se voir, disons, demain Ö 16 heures? Au 38?... Ah aussi pendant
que j'y pense, vous pourriez penser Ö me ramener le livre de Voltaire que je
vous ai pràtÇ?"

  Toujours àtre poli dans les messages, comme si vous connaissiez juste la
personne. Pour les plus littÇraires, vous aurez reconnu ici le code de Ari,
utilisÇ dans le livre "La siräne rouge" ,de "Maurice G. Dantec" (le code ari
n'existe pas en fait, ce n'est que pour le livre qu'il est citÇ).
  Dans cet extrait, "le livre de Voltaire" signifie qu'il faut se servir du
dÇcodage de Voltaire pour le comprendre. Le 16h peut signifier 19h, 38
apräs-demain, et demain signifie et-demi, donc: apräs demain Ö 19h30 sera le
dÇcodage de cette unique ligne.

  C'est tout bàte mais c'est le seul moyen rÇel de dÇfense.

  Bon, je vous rappelle aussi qu'il y des mots Ö ne pas employer, Ö savoir:

"FBI CIA NSA IRS ATF BATF DOD WACO RUBY RIDGE OKC OKLAHOMA CITY MILITIA
GUN HANDGUN MILGOV ASSAULT RIFLE TERRORISM BOMB DRUG HORIUCHI KORESH 
DAVIDIAN KAHL POSSE COMITATUS RANDY WEAVER VICKIE WEAVER SPECIAL FORCES
LINDA THOMPSON SPECIAL OPERATIONS GROUP SOG SOF DELTA FORCE CONSTITUTION
BILL OF RIGHTS WHITEWATER POM PARK ON METER ARKANSIDE IRAN CONTRAS OLIVER
NORTH VINCE FOSTER PROMIS MOSSAD NASA MI5 ONI CID AK47 M16 C4 MALCOLM X
REVOLUTION CHEROKEE HILLARY BILL CLINTON GORE GEORGE BUSH WACKENHUT 
TERRORIST TASK FORCE 160 SPECIAL OPS 12TH GROUP 5TH GROUP SF"

  Puisque ce sont les mots clef de recherche de la machine Echelon, une
protection gouvernementale amÇricaine qui traque les e-mails.

  VoilÖ, Ö vous de jouer.

  En attendant, voici un codage d'exemple, qui Çvidement ne sera plus du tout
sñr däs que P.G.K. sera sorti, donc j'en donne un facile pour la base, apräs
vous pouvez le dÇriver comme bon vous semble.

A|B|C \J/ Pour le reste, rajouter un point dans le symbole, en faisant tourner 
----- L|M les lettres dans le màme sens. Ainsi on peut obtenir ceci (ce code
D|E|F /K\ est träs dur Ö reprÇsenter sur un fichier .TXT,  mais Ö l'Çcrit
-----     c'est beaucoup mieux).
G|H|I        

                    S   A   L   U      T
                   __       \   __    __
                   |.    |   | |. |   . |
                   --  --   /


  VoilÖ, bonne chance Ö tous; je crois que NONO le dit souvent, mais áa a pas
l'air de vous bouger: les gars, si vous nous aidez pas, on n'ira pas loin,
n'attendez pas, rÇagissez, envoyez vos articles. Ne passer pas votre temps
comme áa se voit en ce momment Ö crÇer des tonnes d'e-zines diffÇrents un peu
partout, essayez plutìt de rejoindre un dÇjÖ existant, je crois que NONO sera
d'accord avec áa [NONO: tout Ö fait... Par exemple, j'ai entendu parler d'un
e-zine assez sympa, qui cherchait des volontaires.. Je crois qu'il s'appelle
P.G.K., quelque chose comme áa... :-) Non, plus sÇrieusement, je ne vous
conseille guäre de crÇer votre propre e-zine, Ö moins d'àtre sÇrieusement
motivÇ et d'avoir beaucoup d'idÇes. Je crois qu'aucun e-zine ne refusera de
l'aide.]. Il faut s'unir pour y parvenir. Avec une tonne de petits e-zines
par-ci par-lÖ, vous voyez bien que ce n'est pas träs enrichissant.

  Enfin, allez ciao tout le monde.

                                       Bug-in, buginutopia@multimania.com

******************************************************************************
***************************Cours d'assembleur (suite)*************************
****************************(ADAM - traduit par NONO)*************************
******************************************************************************


          …ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕª
          ∫             Cours d'Assembleur par Adam                «ƒø
          ∫                                                        ∫ ≥
          ∫                       PARTIE VI                        ∫ ≥
          »Õ—ÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕÕº ≥
            ¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ


 ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ

La derniäre fois, on a vu la routine pour dessiner une ligne -

      mov   ax, 0xa000
      mov   es, ax        ; Mettre ES en VGA

      mov   ax, x1        ; AX = X1
      mov   bx, y         ; BX = Y
      mov   cx, x2        ; CX = X2

      sub   cx, ax        ; CX = DiffÇrence entre X2 et X1

      mov   di, ax        ; DI = X1
      mov   dx, bx        ; DX = Y
      shl   bx, 8         ; Y SHL 8
      shl   dx, 6         ; Y SHL 6
      add   dx, bx        ; DX = Y SHL 8 + Y SHL 6
      add   di, dx        ; DI = Offset du premier pixel

      mov   al, color     ; Stocke la couleur en AL
      rep   stosb         ; Dessine la ligne


Bien que cette routine Çtait plus rapide que celles en langage "classique",
elle peut àtre largement amÇliorÇe. Si on utilise cette routine et la liste
des cycles d'horloges fournie prÇcÇdemment, vous verrez que l'on perd pas
mal de cycles.

Je vous laisse le soin de l'optimisation pour le moment (on verra cela plus
tard), mais dÇjÖ remplacer STOSB par un MOV ES:[DI], AL ou STOSW augmentera
dÇjÖ la cadence. N'oubliez pas que si vous dÇcidez d'utiliser une boucle,
vous devrez diminuer CX de 1.

Maintenant, attaquons-nous Ö une ligne verticale. On doit calculer l'offset
du premier pixel comme pour la ligne horizontale, avec quelque chose comme:


   mov   ax, 0A000h      ; Met le segment VGA dans AX 
   mov   es, ax          ; Met ES en VGA

   mov   ax, Y1          ; DÇplace la premiäre valeur Y en AX
   shl   ax, 6           ; Y x 2 puissance 6
   mov   di, ax          ; Met la nouvelle valeur d'Y dans DI
   shl   ax, 2           ; On a donc: Y = Y x 320
   add   di, ax          ; Ajoute cette valeur dans DI
   add   di, X           ; Ajoute X Ö DI


Un peu de bricolage par-dessus...


   mov   cx, Y2          ; Stocke Y2 dans CX
   mov   al, Color       ; Stocke la couleur Ö afficher en AL
   sub   cx, Y1          ; CX = hauteur de la ligne


Et maintenant la boucle finale...


Plot:
   mov   es:[di], al     ; Affiche un pixel Ö l'offset courant
   add   di, 320         ; Descend Ö la colonne suivante
   dec   cx              ; Diminue CX de un
   jnz   Plot            ; Si CX <> 0, alors continuer d'afficher


Ce n'est pas une super routine, mais c'est dÇjÖ pas mal. Remarquez qu'il est
possible de faire une comparaison apräs DEC CX. C'est träs utile, aussi ne
l'oubliez pas.

Amusez-vous un peu avec ce code, et essayez de l'accÇlerer. Essayez d'autres
mÇthodes...


 ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ

Ca, c'Çtait la partie facile. Maintenant, on va cherche Ö afficher des lignes
en diagonales.

La routine suivante est tirÇe de "SWAG", auteur inconnu, et elle est idÇale
pour dÇmonter l'algorithme. Mais elle a besoin d'àtre optimisÇe, ce qui ne
tient qu'Ö vous. Les points Ö regarder sont:

   1) Celui qui l'a Çcrite n'a jamais entendu parler de XCHG - áa Çconomisera
      quelques cycles d'horloge;

   2) Il comporte un des grands pÇchÇs du code non-optimisÇ - il lit, puis
      dÇplace une valeur en AX, et ensuite rÇalise une opÇration impliquant
      AX dans l'instruction suivante, ce qui provoque un cycle supplÇmentaire
      (on verra áa plus en dÇtail la prochaine fois).

   3) Elle utilise des octets et non des word, ce qui doublerait la vitesse
      d'Çcriture en VGA.

   4) Et le pire de tout, c'est qu'il utilise un MUL pour calculer l'offset.
      Utiliser des dÇplacement ou un Çchange accÇlÇrerait les choses.

De toute faáon, j'ai commentÇ le code, et je pense qu'il est assez clair,
aussi je n'entrerai pas dans les dÇtails. Vous devriez àtre capable de
tout comprendre par vous-màme. Essayez-la, et voyez comment elle fonctionne.


Procedure Line(X1, Y1, X2, Y2 : Word; Color : Byte);   Assembler;

Var
   DeX          : Integer;
   DeY          : Integer;
   IncF         : Integer;

Asm     { Line }
   mov   ax, [X2]      { Met X2 en AX                                       }
   sub   ax, [X1]      { Calcule la longueur de la ligne: X2 - X1           }
   jnc   @Dont1        { Est-ce que le rÇsultat Çtait nÇgatif?              }
   neg   ax            { Oui, alors mettons-la positive (* -1)                    }

@Dont1:
   mov   [DeX], ax     { Mettons la longueur dans DeX                       }
   mov   ax, [Y2]      { Met Y2 dans AX                                     }
   sub   ax, [Y1]      { Y2 - Y1, pour avoir la hauteur de la ligne         }
   jnc   @Dont2        { RÇsultat nÇgatif?                                  }
   neg   ax            { Oui, alors mettons-le positif (* -1)                     }

@Dont2:
   mov   [DeY], ax     { Met la hauteur en DeY                              }
   cmp   ax, [DeX]     { Compare la hauteur Ö la longueur                   }
   jbe   @OtherLine    { Si la hauteur est <= Ö la longueur alors saute     }

   mov   ax, [Y1]      { Met Y1 dans AX                                     }
   cmp   ax, [Y2]      { Compare Y1 et Y2                                   }
   jbe   @DontSwap1    { Si Y1 <= Y2 alors saute, sinon...                  }
   mov   bx, [Y2]      { Met Y2 en BX                                       }
   mov   [Y1], bx      { Met Y2 en Y1                                       }
   mov   [Y2], ax      { Met Y1 dans Y2                                     }
                       { Donc au final...                                   }
                       { Y1 = Y2 et Y2 = Y1                                 }

   mov   ax, [X1]      { Met X1 dans AX                                     }
   mov   bx, [X2]      { Met X2 dans BX                                     }
   mov   [X1], bx      { Met X2 dans X1                                     }
   mov   [X2], ax      { Met X1 dans X2                                     }

@DontSwap1:
   mov   [IncF], 1     { Met 1 en IncF, et dessine un autre pixel           }
   mov   ax, [X1]      { Met X1 dans AX                                     }
   cmp   ax, [X2]      { Compare X1 avec X2                                 }
   jbe   @SkipNegate1  { Si X1 <= X2 alors saute, sinon...                  }
   neg   [IncF]        { Multiplie IncF par -1                              }

@SkipNegate1:
   mov   ax, [Y1]      { Met Y1 dans AX                                     }
   mov   bx, 320       { Met 320 dans BX                                    }
   mul   bx            { Multiplie 320 par Y1                               }
   mov   di, ax        { Stocke le rÇsultat dans DI                         }
   add   di, [X1]      { Ajoute X1 Ö DI, et donc, l'offset est dans DI      }
   mov   bx, [DeY]     { Met DeY en BX                                      }
   mov   cx, bx        { Met DeY en CX                                      }
   mov   ax, 0A000h    { Met le segment Ö afficher en AX                    }
   mov   es, ax        { ES pointe vers le VGA                              }
   mov   dl, [Color]   { Met la couleur utilisÇe en DL                      }
   mov   si, [DeX]     { Pointe SI vers DeX                                 }

@DrawLoop1:
   mov   es:[di], dl   { Mel la couleur avec DL en ES:DI                    }
   add   di, 320       { Ajoute 320 Ö DI, c'est-Ö-dire la ligne suivante    }
   sub   bx, si        { Soustrait DeX Ö BX, DeY                            }
   jnc   @GoOn1        { RÇsultat nÇgatif?                                  }
   add   bx, [DeY]     { Si oui, ajoter DeY Ö BX                            }
   add   di, [IncF]    { Ajouter IncF Ö DI                                  }

@GoOn1:
   loop  @DrawLoop1    { RÇsultat positif, alors afficher le prochain pixel }
   jmp   @ExitLine     { Fini!                                              }

@OtherLine:
   mov   ax, [X1]      { Met X1 dans AX                                     }
   cmp   ax, [X2]      { Compare X1 Ö X2                                    }
   jbe   @DontSwap2    { X1 <= X2 ?                                         }
   mov   bx, [X2]      { Sinon, mettre X2 dans BX                           }
   mov   [X1], bx      { Met X2 dans X1                                     }
   mov   [X2], ax      { Met X1 dans X2                                     }
   mov   ax, [Y1]      { Met Y1 dans AX                                     }
   mov   bx, [Y2]      { Met Y2 dans BX                                     }
   mov   [Y1], bx      { Met Y2 dans Y1                                     }
   mov   [Y2], ax      { Met Y1 dans Y2                                     }

@DontSwap2:
   mov   [IncF], 320   { Met 320 dans IncF, pour la prochaine colonne       }
   mov   ax, [Y1]      { Met Y1 dans AX                                     }
   cmp   ax, [Y2]      { Compare Y1 et Y2                                   }
   jbe   @SkipNegate2  { Y1 <= Y2?                                          }
   neg   [IncF]        { Sinon, multiplier IncF par -1                      }

@SkipNegate2:
   mov   ax, [Y1]      { Met Y1 dans AX                                     }
   mov   bx, 320       { Met 320 dans BX                                    }
   mul   bx            { Multiplier AX par 320                              }
   mov   di, ax        { Stocke le rÇsultat dans DI                         }
   add   di, [X1]      { Ajoute X1 Ö DI, donnant l'offset                   }
   mov   bx, [DeX]     { Met DeX dans BX                                    }
   mov   cx, bx        { Met BX dans CX                                     }
   mov   ax, 0A000h    { DÇplace l'adresse du VGA dans AX                   }
   mov   es, ax        { Pointe ES vers VGA                                 }
   mov   dl, [Color]   { Stocke la couleur Ö afficher en DL                 }
   mov   si, [DeY]     { Met DeY dans SI                                    }

@DrawLoop2:
   mov   es:[di], dl   { Met l'octet en DL Ö ES:DI                          }
   inc   di            { IncrÇmente DI de un, le prochain pixel             }
   sub   bx, si        { Soustrait SI Ö BX                                  }
   jnc   @GoOn2        { RÇsultat nÇgatif?                                  }
   add   bx, [DeX]     { Si oui, ajouter DeX Ö BX                           }
   add   di, [IncF]    { Ajouter IncF Ö DI                                  }

@GoOn2:
   loop  @DrawLoop2    { Continuer de dessiner                              }

@ExitLine:
                       { TerminÇ!                                           }
End;



 ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ

         ⁄ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒø
         ≥                                                          ≥
         ≥              LES ENTREES(IN) ET SORTIES(OUT)             ≥
         ≥                                                          ≥
         ¿ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒŸ


IN et OUT sont träs importants en Assembleur. Ils vous permettent d'envoyer ou
de recevoir des donnÇes directement de l'un des 65 536 ports matÇriels d'un
PC, ou registres. La syntaxe de base est la suivante:


   ˛ IN <ACCUMULATEUR>, <PORT>    - Nom : EntrÇe du port I/O (Input/Output:
                                          EntrÇe/Sortie)
                                    Type: 8086+

                                    Description: Cette instruction lit une
                                    valeur d'un des 65536 ports matÇriels dans
                                    l'accumulateur spÇcifiÇ.

                                    AX et AL sont gÇnÇralement utilisÇs pour
                                    les ports d'entrÇe, et DX pour identifier
                                    le port.

                                    Ex: IN    AX, 72h

                                        MOV   DX, 3C7h
                                        IN    AL, DX


   ˛ OUT <PORT>, <ACCUMULATEUR>   - Nom : Sortie vers un Port
                                    Type: 8086+

                                    Description: Cette instruction envoye la 
                                    valeur Ö l'accumulateur dans <PORT>. En
                                    utilisant le registre DX pour passer le
                                    port avec OUT, vous pouvez accÇder Ö
                                    65536 ports.

                                    Ex: MOV   DX, 378h
                                        OUT   DX, AX


O.K., áa ne vous a pas vraiment aidÇ, car cela n'indique pas comment s'en
servir - mais laissons áa de cìtÇ pour le moment. Bon, si vous voulez
approfondir votre usage du VGA, vous devez àtre Ö màme de programmer ses
registres internes. C'est un peu pareil aux registres classiques, mais vous
pouvez les considÇrer comme des interruptions, sauf que: 1) Vous envoyez la
valeur au port, et c'est tout; et 2) C'est presque instantanÇ.

Par exemple, on va voir comment utiliser la palette directement en se servant
du matÇriel VGA.


Le VGA a plein de registres, mais les trois prochains sont les plus     
importants:

   ˛ 03C7h       - PEL Registre d'Adresse (Lecture)
                   Met la palette en mode lecture

   ˛ 03C8h       - PEL Registre d'Adresse (Ecriture)
                   Met la palette en mode Çcriture

   ˛ 03C9h       - PEL Registre de DonnÇes (Lecture/Ecriture)
                   Lit ou Çcrit 3 valeurs RGB (les 3 couleurs de base: Rouge,
                   Vert, Bleu; en franáais: RVB), et toutes les trois valeurs
                   Çcrites, l'index est incrÇmentÇ de 1.

Voici la signification de tout cela:

Si on voulait inscrire une valeur RGB, on enverrait la valeur de la couleur Ö
changer en 03C8h, puis on lirait les 3 valeurs de 03C9h. En Assembleur, on
ferait donc cela:

   mov   dx, 03C8h        ; Met le valeur de DAC(lecture) en DX
   mov   al, [Color]      ; Met la valeur de la couleur en AL
   out   dx, al           ; Envoie AL au port DX
   inc   dx               ; On passe au port 03C9h
   mov   al, [R]          ; Met la nouvelle valeur ROUGE en AL
   out   dx, al           ; Envoie AL au port DX
   mov   al, [G]          ; Met la nouvelle valeur VERTE en AL
   out   dx, al           ; Envoie AL au port DX
   mov   al, [B]          ; Met la nouvelle valeur BLEUE en AL
   out   dx, al           ; Envoie AL au port DX

Cela devrait faire l'affaire. Pour lire la palette, on utilise:

   mov   dx, 03C7h        ; Mel valeur de DAC(Çcriture) en DX
   mov   al, [Color]      ; Met la valeur de la couleur en AL
   out   dx, al           ; Envoye AL au port DX
   add   dx, 2            ; On passe au port 03C9h

   in    al, dx           ; Met la valeur lue au port DX en AL
   les   di, [R]          ; Pointe DI vers la variable R
   stosb                  ; Stocke AL en R

   in    al, dx           ; Met la valeur lue au port DX en AL
   les   di, [G]          ; Pointe DI vers la variable G
   stosb                  ; Stocke AL en G

   in    al, dx           ; Met la valeur lue au port DX en AL
   les   di, [B]          ; Pointe DI vers la variable B
   stosb                  ; Stocke AL en B

Remarquez que cette routine est diffÇrente. Elle vient du langage Pascal. 

Si vous travaillez en Assembleur seul, vous pouvez coder cela de maniäre plus
efficace, comme le premier exemple. J'ai laissÇ le code tel quel pour que ceux
travaillant avec un langage de haut niveau n'ai pas de difficultÇs.

Maitenant vous avez vu combien IN et OUT peuvent àtre utiles. Contrìler
directement le matÇriel est Ö la fois rapide et efficace. Dans les prochaines
semaines, je rajouterai peut àtre une liste des ports les plus communs.


 ƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒƒ

 Rajouts sur les registres de FLAGS:


Maintenant, bien que nous avons utilisÇ les registres de flags dans nos codes,
je n'ai pas vraiment expliquÇ leur fonctionnement. Vous pouvez travailler
dans ces conditions, comparer avec ce que vous savez, et essayer de
comprendre comma áa, mais si vous voulez aller plus loin en Assembleur, vous
devez savoir quelques choses en plus.

Dans le tutorial 3, j'ai donnÇ une vue extràmement simplifiÇe des registres
de FLAGS. En rÇalitÇ, le registre de FLAGS, ou EFLAGS, est un registre 32
bits, mais seul les bits 0 Ö 18 sont utilisÇs. De toute faáon, on n'a pas
vraiment besoin de plus que le bit 11, mais il est bon de savoir qu'ils
existent.


Le registre EFLAGS ressemble en fait Ö áa:

18  17  16  15  14  13  12  11  10  09  08  07  06  05  04  03  02  01  00
AC  VM  RF  --  NT  IO/PL   OF  DF  IF  TF  SF  ZF  --  AF  --  PF  --  CF


Les flags sont les suivants:

   ˛ AC   - VÇrifie l'Alignement (80486)
   ˛ VM   - Mode Virtuel 8086
   ˛ RF   - Flag de rÇsume
   ˛ NT   - Flag pour les tÉches imbriquÇes
   ˛ IOPL - Level privilÇgiÇ d'EntrÇe/Sorite (I/O)

   ˛ OF   - Flag de DÇpassement (overflow)
            Ce bit est Ö UN si une opÇration arithmÇtique donne un rÇsultat
            trop grand ou trop petit pour tenir dans le registre de       
            destination.

   ˛ DF   - Flag de Direction
            Quand il est Ö ZERO, les instruction sur les chaånes, telles MOVS,
            LODS et STOS incrÇmenteront les adresses mÇmoires qu'elles
            utilisent de un. Cela signifie que, par exemple, DI sera augmentÇ
            quand vous utilisez STOSB pour afficher un pixel en ES:DI. Mettre
            ce bit Ö ZERO diminuera l'adresse mÇmoire apräs chaque appel de
            fonction.

   ˛ IF   - Flag pour Permettre les Interruptions
            Quand ce bit est activÇ, le processuer rÇpondra aux interruptions
            matÇrielles extÇrieures. Quand il est Ö 0, les interrupetions   
            matÇrielles sont ignorÇes.

   ˛ TF   - Flag de "piäge"(trap)
            Quand ce bit est activÇ, une interruption est gÇnÇrÇe apräs chaque
            instruction. C'est gÇnÇralement utilisÇe pour dÇbugger.

   ˛ SF   - Flag de Signe
            Ce bit est modifiÇ apräs une opÇration mathÇmatique. Le bit
            recoit le bit de haut niveau(on parle aussi de bit de poids fort)
            du rÇsultat, et si c'est UN, il indique le rÇsultat de l'opÇration
            Çtait nÇgatif.

   ˛ ZF   - Flag ZÇro
            Ce bit est activÇ quand une opÇration mathÇmatique donne un 
            rÇsultat de zÇro.

   ˛ AF   - Flag de Carry Auxiliaire
            Ce bit indique qu'un dÇpassement de bas niveau d'un demi-octet de
            AL est survenu pendant une opÇration arithmÇtique.

   ˛ PF   - Flag de ParitÇ
            Ce bit est activÇ quand le rÇsultat d'une opÇration est un nombre
            sur un bit.

   ˛ CF   - Flag de Carry
            Ce bit est activÇ quand le rÇsultat d'une opÇration est trop 
            grand ou trop petit pour le registre de destination ou pour l'
            adresse mÇmoire.


Maintenant, vous n'avez pas vraiment besoin de vous occuper de tout ceux-lÖ.
Pour le moment, connaåtre Cf, PF, ZF, SF, IF, DF et OF suffira.

Vous pouvez, si vous le voulez, dÇplacer une copie des flags dans AH avec
LAHF ("Load AH with Flags", mettre les flags dans AH), et modifier ou lire
des bits individuels, ou modifier l'Çtat des bits plus facilement qu'avec
CLx et STx. Cependant, si vous dÇcidez de modifier les flags, rappelez-vous
qu'ils peuvent àtre extràmement utiles dans beaucoup de situations.

(Ils peuvent àtre aussi utiles quand, tard ans la nuit, des lignes se
dessinent Ö l'envers, et qu'au bout d'une heure, vous vous rendez compte que
vous avez oubliÇ de vider le flag de direction!)


                                       Adam Hyde, blackcat@faroc.com.au

******************************************************************************
*****************************La gravure (Pyton51)*****************************
******************************************************************************

Introduction:

  Alors, tu as de sÇrieux trous dans ton budget??? Manque de fric??? Et tu as
2500 francs au maximum Ö investir [NONO: personnellement, ce n'est pas ce que
j'appelle manquer de fric, mais bon...]? Une solution:
  Le graveur, une des rÇponses Ö tous ces problämes. C'est donc de quoi cet
article va parler...

Sommaire:

1¯ Bien choisir son graveur et ses CD vierges
2¯ Quel logiciel choisir?
3¯ Qu'est-ce qui rapporte le plus?
4¯ Divers


        1¯ Bien choisir son graveur et ses CD vierges:


  Cela dÇpend de votre disque dur et de votre budget:

  Premiärement: vous avez un assez gros DD (disque dur) avec au moins 700MO de
place: pas de probläme, il y a juste a acheter un graveur IDE (1200
FF a 2000FF), cette solution est celle qui est la mieux adaptÇe pour un petit
budget mais avec un gros DD.

  Deuxiämement: Il y a pas trop de place sur le DD. Bon la solution s'impose:
un graveur SCSI: lÖ c'est tranquille, on fait du lecteur CD au graveur sans
passer par le DD.
 Un prix se situant entre 1500FF (sans carte SCSI) Ö 2500FF (avec carte SCSI).

Les CD vierges:

  Pour les CD Playtation, prÇferez des CD Ö face bleue ou verte, mais pas
jaune (áa Çblouit la lentille). Les meilleures marques: Memorex (c'est ce que
j'utilise personnelement), Sony et Phillips, mais je dois en oublier.

  Pour les CD d'ordi, il vaut mieux prÇferer les Kodak, je crois que c'est une
bonne marque pour les CD d'ordi.


        2¯ Quel logiciel choisir?

  Nero burning rom (pour les IDE) s'impose, il en loupe presque pas mais
CDRwin est bien aussi (plus pour les SCSI) (c'est les deux seuls que je
connaissent qui sont fiables)...


        3¯ Qu'est-ce qui rapporte le plus?

  Play ou ordi???
  Ben en fait áa dÇpend de vous:
si vous avez le cÉble, vous pouvez faire du warez (voir article dans P.G.K. 8)
et donc faire des compil de plusieurs nouveaux jeux se vendant facilement Ö
200FF piäce. Sinon je crois que les CD Play sont mieux si vous avez pas le
cÉble, ils se vendent facilement Ö 40FF piäce (mais on en vend plus que les
compils Ö 200FF).
  Sinon un ou deux jeux d'ordi gravÇs de temps Ö autre peuvent faire tenir le
bizness.


        4¯ Divers:

Question: Comment, Ö partir d'un crack (recupÇrÇ sur crakstore ou un autre
site), on peut cracker le jeu?
RÇponse: la question du dÇbutant: il faut un gros DD (651Mo de place libre
suffisent: 650 pour le jeu, et au max 1 mo pour le crack). Il faut mettre tout
le CD sur le DD (dans un rÇpertoire spÇcial de prÇfÇrence) et exÇcuter le
crack lÖ ou le .exe se trouve Ö cracker (on peut faire le crack soi-màme, il
faut suivre les cours de NONO pour áa).


La suite, (Ö votre avis???) au prochain numÇro...

                                Pyton51, Pyton51@altern.org
                                http://altern.org/pyton51
                     
******************************************************************************
**********************************Conclusion**********************************
******************************************************************************

  Franchement, si je dois arràter P.G.K., je pense träs sincÇrement que áa me
manquera. D'ailleurs, je pense que, pendant encore au moins quelques numÇros,
je continuerai Ö Çcrire une intro et une conclusion, et Ö parsemer le numÇro
de quelques commentaires, comme j'aime le faire. Peut-àtre màme que je
rÇpondrai Ö quelques lecteurs, car, je vous l'avoue, pendant toute cette
annÇe, mon plus grand plaisir Çtait quand j'allais voir ma mailbox et que je
voyais des mails (de noms qui m'Çtaient inconnus) intitulÇs P.G.K..
  C'est donc en fait la reconnaissance que j'ai tant apprÇciÇe, non pas la
reconnaissance d'un quelconque talent, mais la reconnaissance de mon
existence et de mon oeuvre. En effet, je peux maintenant dire que pas mal
de gens me connaissent sur le net et savent ce que j'ai fait.

  Et j'en suis träs fier...

                                       NONO, nono_18_02@hotmail.com

******************************************************************************
***********************************GREETINGS**********************************
******************************************************************************

PLUGIN, Nunus, Manue, Johann__3, Laurence et David, |hiha|, Tom, CYBZ,
Fulla, Sandrine, Fanny, Vinc, BounBoun, et bien sñr tous ceux qui ont traånÇ
sur #houseofwarez et #warezfrancais (en undernet)...

******************************************************************************
*****************************SPECIAL GREETINGS TO:****************************
*************************************Sarah************************************
******************************************************************************
