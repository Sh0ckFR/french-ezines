<HTML>
<head>
</head>
<script LANGUAGE="JavaScript">
<!--
function click() {
if  (event.button==2) {
alert ('The Last Click 2, Novembre 1999')
}
}
 document.onmousedown=click
//-->
</script>

<BODY background="back.gif" bgproperties="fixed" bgcolor=#000000 text=#C0C0C0 link=#000000 vlink=#000000 alink=#000000>
<center><h2><b>L'Assembleur</b></h2></center><BR><BR>
<i>Je donne ici une explication très générale pour permettre au néophyte 
de comprendre les codes du cours sur les virus.Si vous souhaitez programmer en assembleur,
 je vous conseil de consulter d'autres zines plus complets.</i><BR><BR> 
<u><b>1.Définition</b></u><BR><BR>
<p>L'assembleur est le langage le plus proche du langage machine.C'est pour cette
 raison qu'on le qualifie de langage de bas niveau.<BR>
 Il est vrai que l'assembleur est un langage relativement difficile à aborder
  de part sa forme et ses instructions très éloignées de notre langage parlé.
  Toutefois, pour peu qu'on s'investisse un tant soit peu, on remarque très vite 
  qu'il est basé sur une logique assez simple.<BR>
 <BR>
 Ce cour d'initiation à l'assembleur est évidemment ici pour complèter le 
 cours sur la programmation de virus, mais l'assembleur peut vous être utile dans de nombreuses 
 autres applications, comme par exemple pour remplacer certaines lignes 
 de code d'un autre langage de plus haut niveau dans un programme afin de rendre 
 son éxécution plus rapide.De plus, l'assembleur étant plus proche du 
 langage machine, il vous permetra plus tard d'effectuer des opérations
  difficilement applicables avec les autres langages.<BR>
  Pour être à l'haise avec ce langage, il peut vous être utile d'être bien renseigné sur le DOSet son fonctionnement.<BR>
Maintenant, on y va.<BR><BR>
 
 <u><b>2.Notion de registre.</u></b><BR><BR>
 
 Leur connaissance et leur utilisation est indispensable dans l'assembleur.
 Ce que vous verrez ici est une approche simplifiée des registres.<BR><BR>
 Vous pouvez considérer les registres comme des tiroirs dans lesquels vous 
 pouvez ranger des valeurs, des variables.Comme vous pouvez avoir un tiroir pour vos chausettes,
 vous aurez un registre pour un certain type de valeurs.Ces registres sont divisés en deux :
 La partie haute H et la partie basse L.<BR>
 Voici les principaux registres :<BR><BR>
 -ax :Comprenant ah + al.C'est le registre des entrées/Sorties et des opérations mathématiques.<BR>
 -bx :Comprenant bh + bl.C'est le registre utilisé comme pointeur.<BR>
 -cx :Comprenant ch + cl.On l'utilise beaucoup pour les loops.<BR>
 -bx :Comprenant dh + dl.Il est très semblable à bx.<BR><BR>
 
 Le fait de diviser les registres en deux est une notion importante.
 En gros lorsque vous aurez une valeur du type 1B5C à stocker dans ax, ah contiendra 1B et al 
  contiendra 5C. Il faut savoir que les registres sont de 16 bits, et qu'ils stockent donc des nombres compris de
  0 à 65535 ou -32768 à 32768.
  <BR><BR>
  Il existe égalament d'autres registres : Les registres de segment.
  J'y consacrerai une partie complète un peu plus tard car leur utilisation peu s'avérer 
  difficile et risquée.<BR>Contentez vous pour le moment de les considérer comme des 
  subdivisions de la mémoire dans lesquelles sont stockées différentes informations comme le 
  code ( registre CS), les données ( registres DS et ES ),les adresses des sous routines à appeler
   ( registre SS ).<BR><BR>
   Enfin, vous trouverez les registres d'index et les pointeurs:<BR>
   -SI, l'index source qui est souvent utilisé avec DS pour des instructions de déplacement 
   de bloc.C'est un pointeur interne au segment.
  <BR>
  -DI, l'index de destination qui est utilisé comme pointeur interne à ES.
  <BR>
  <BR>
  Je pense que vous cernez à peu près ce qu'est un registre maintenant.Cette approche reste 
  très vague et très générale, mais elle est suffisante pour le moment.<BR><BR>
  3.<u><b>Les instructions </b></u><BR><BR>
   <b> -mov </b>Opérande 1, Opérande 2 :  <BR>ex : <b>mov</b> ax,10h.
<BR><b>mov</b> permet de placer ou de déplacer le contenu de opérande 2 dans opérande1
.On peut l'utiliser avec adresses, des registres ou  des valeurs.
Dans cet exemple, on place la valeur 10h dans ax.<BR><BR>
-<b>int</b> valeur :<BR>
ex : <b>int 21h</b>.<BR>
Cette instruction génère une interuption.Dans cet exemple, nous appelons le DOS.Toutefois, une interruption
 comprend plusieurs fonctions que l'on définit dans ah et al.<BR><BR>
 -<b>jmp</b> adresse :<BR>
 ex : <b>jmp</b> 0B20h.<BR>
 Saut inconditionnel.Cette instruction renvoie à l'adresse 0B20h.Toutefois, il existe une trentaine de 
 sauts.<BR><BR>
 -<b>CALL</b> procédure :<BR>
 ex : CALL ROUT1<BR>
 Cette instruction appelle une procédure, une routine.<BR><BR>
 -<b>jc</b> adresse :<BR>
 Saut en cas de transport.Renvoie à l'adresse spécifiée si CF = 1.<BR><BR>
 <b>RET</B> :<BR>
 Marque la fin d'une sous routine.Renvoie au programme principal .<BR><BR>
 -<b>xchg</b> opérande 1, opérande 2 :<BR>
 Echange les valeurs des 2 opérandes.<BR><BR>
 -<b>xor</b> opérande 1, opérande 2 :<BR>
 OU exclusif entre les deux opérandes.<BR><BR>
 -<b>db</b> 'Chaine ascii' :<BR>
 Declare Byte.
 Déclaration d'une chaine de caractère.<BR><BR>
 Voilà. Je n'ai mis ici que les instructions qui figurent dans les codes sources
  de la partie Virus.Les autres instructions viendrons plus tard.
  <BR><BR>
  Bye.
  
</BODY>
</HTML>
