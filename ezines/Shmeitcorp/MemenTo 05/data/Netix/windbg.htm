<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0055)http://membres.lycos.fr/netixyz/tutos/windbg/windbg.htm -->
<HTML>
<!-- Mirrored from frenchezines.free.fr/tries/shmeitcorp/5/Netix/windbg.htm by HTTrack Website Copier/3.x [XR&CO'2007], Thu, 07 Aug 2008 04:41:17 GMT -->
<HEAD>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<META content="MSHTML 6.00.2600.0" name=GENERATOR></HEAD>
<BODY bgColor=#000000 text=#FFFFFF link=#FFFFFF vlink="#FFFFFF" alink="#FFFFFF" leftmargin="0" topmargin="0" marginwidth="0" marginheight="0">
<DIV align=center> 
  <table width="670" border="0" align="left">
    <tr>
      <td><p><font size="2" face="Arial, Helvetica, sans-serif"><b>Microsoft Windows 
          Debugger (WinDbg)<br>
          <a href="http://www.microsoft.com/ddk/debugging/"><font size="1">http://www.microsoft.com/ddk/debugging/</font></a> 
          </b></font></p>
        <p align=left><font size="2" face="Arial, Helvetica, sans-serif">Windbg 
          est un debugger developpé par Microsoft et distribué gratuitement sur 
          leur site.<br>
          Ce debugger est une tres bonne alternative au supreme SoftIce. Une alternative 
          qui peux vous servir contre une protection anti-softice ou si vous &ecirc;tes 
          sous Windows XP, car m&ecirc;me si depuis la sortie de DriverStudio 
          Softice est devenu compatible avec ce system, il en a aussi perdu tout 
          ses points forts pour le cracking pollué de bugs (plus de break a l'entry-point, 
          apres un BP sur une api et un F12 pour quitter celle-ci et revenir dans 
          notre programme softice ne reprend pas le controle, des problemes de 
          BP, des commandes qui ne sont plus accessibles pour les system NT etc...) 
          bref pour ces raisons je vous propose de decouvrir WinDbg, un debugger 
          tres puissant avec une grande ressemblance avec softice au niveau de 
          la syntaxe des commandes ce qui permet de ne pas etre trop deboussolé.</font></p>
        <p align=left><font size="2" face="Arial, Helvetica, sans-serif">WinDbg 
          poss&egrave;de de nombreuses fonctions (comme debug du kernel, debugging 
          a partir d'un server, etc..) je ne rentrerais pas dans ces fonctionnalités 
          inutiles pour le cracking standard d'une application. Je vous conseille 
          de lire l'aide tr&egrave;s compl&egrave;te de WinDbg dans laquelle vous 
          pourrez trouver toutes les commandes et options.</font></p>
        <p align=left><font size="2" face="Arial, Helvetica, sans-serif"><b>L'interface 
          Graphique</b></font></p>
        <p align=left><font size="2" face="Arial, Helvetica, sans-serif">WinDbg 
          est composé de plusieurs fenetres que l'on peux afficher via le <em>Menu 
          View</em> ou &agrave; partir de la barre d'outils.</font></p>
        <p align=left><font size="2" face="Arial, Helvetica, sans-serif"><em>The 
          Command Window (Command - ALT+1) :</em><br>
          C'est le fenetre principale dans laquel on tappe les commandes et dans 
          laquel sera affiché tout ce qui se passe.</font></p>
        <p align=left><font size="2" face="Arial, Helvetica, sans-serif"><em>The 
          Watch Window (Watch - ALT+2) :</em><br>
          Cette fenetre affiche les informations sur des variables globales, locales 
          ou sur des registres on peux s'en servir pour suivre une variable precise.</font></p>
        <p align=left><font size="2" face="Arial, Helvetica, sans-serif"><em>The 
          Locals Window (Locals - ALT+3) :</em><br>
          Cette fenetre affiche toutes les variables locales en cours</font></p>
        <p align=left><font size="2" face="Arial, Helvetica, sans-serif"><em>The 
          Registers Window (Registers - ALT+4) :</em><br>
          Affiche tous les registres les flags du processeur.</font></p>
        <p align=left><font size="2" face="Arial, Helvetica, sans-serif"><em>The 
          Memory Window (Memory - ALT+5) :</em><br>
          Affiche la mémoire sous la forme souhaité (byte, word, dword, ascii, 
          etc..) à partir d'une adresse souhaité</font></p>
        <p align=left><font size="2" face="Arial, Helvetica, sans-serif"><em>The 
          Calls Window (Call Stack - ALT+6) :</em><br>
          Affiche des informations sur la pile lors des call</font></p>
        <p align=left><font size="2" face="Arial, Helvetica, sans-serif"><em>The 
          Disassembly Window (Disassembly - ALT+7) :</em><br>
          Affiche le code executable en assembleur</font></p>
        <p align=left><font size="2" face="Arial, Helvetica, sans-serif"><em>The 
          Scratch Pad (Scratch Pad - ALT+8) :</em><br>
          Petite fenetre qui sert a prendre des notes, n'ayant aucun effet sur 
          le debugging.</font></p>
        <p align=left><font size="2" face="Arial, Helvetica, sans-serif">Libre 
          &agrave; vous de personnaliser l'affichage de ces fen&ecirc;tres et 
          de customiser les couleurs et les options de police à partir du <em>Menu 
          View</em>, voici un petit apercu en seance de debugging:</font></p>
        <p align=center><font size="2" face="Arial, Helvetica, sans-serif"><img height=474 src="Netix/windbg_fichiers/interface.jpg" width=655></font></p>
        <p align=left><font size="2" face="Arial, Helvetica, sans-serif"><b>Lancement 
          de la cible</b></font></p>
        <p align=left><font size="2" face="Arial, Helvetica, sans-serif">On s&eacute;lectionne 
          la cible que l'on veut debugger par le menu par <strong>File / Open 
          Executable</strong>, on peut aussi attacher un process tournant déja 
          en mémoire par File / Attach to a Process.</font></p>
        <p align=left><font size="2" face="Arial, Helvetica, sans-serif">Apr&egrave;s 
          ouverture dans la fenetre de commande vous devriez obtenir à peu pres 
          ceci:</font></p>
        <div align=left> 
          <p><font size="2" face="Courier New, Courier, mono">Symbol search path 
            is: c:\<br>
            CommandLine: C:\netix\compil.exe <br>
            Symbol search path is: c:\<br>
            Executable search path is: c:\<br>
            ModLoad: 00400000 00405000 <font color="#FFFF00">image00400000</font><br>
            ModLoad: 77f40000 77ff0000 ntdll.dll<br>
            ModLoad: 77e40000 77f35000 C:\WINDOWS\system32\kernel32.dll<br>
            ModLoad: 77d10000 77d9d000 C:\WINDOWS\system32\USER32.dll<br>
            ModLoad: 77c40000 77c80000 C:\WINDOWS\system32\GDI32.dll<br>
            ModLoad: 77da0000 77e3c000 C:\WINDOWS\system32\ADVAPI32.dll<br>
            ModLoad: 77c90000 77d05000 C:\WINDOWS\system32\RPCRT4.dll<br>
            (300.740): Break instruction exception - code 80000003 (first chance)<br>
            eax=77fb642f ebx=7ffdf000 ecx=00000004 edx=77f67010 esi=00241eb4 edi=00241eb4<br>
            eip=77f6f570 esp=0012fb38 ebp=0012fc2c iopl=0 nv up ei pl nz na pe 
            nc<br>
            cs=001b ss=0023 ds=0023 es=0023 fs=003b gs=0000 efl=00000202<br>
            <font color="#0000FF">*** ERROR: Symbol file could not be found. Defaulted 
            to export symbols for ntdll.dll - </font><br>
            ntdll!DbgBreakPoint:<br>
            77f6f570 cc int 3<br>
            <font face="Arial, Helvetica, sans-serif"><br>
            </font> </font><font size="2" face="Arial, Helvetica, sans-serif">Les 
            4 premi&egrave;res lignes affichent le chemin de l'executable, ainsi 
            que les dossiers dans lesquels seront cherchés les informations de 
            debuggingcomme des fichiers .dbg, les sources etc.. Ce qui ne nous 
            interresse pas pour le cracking puisque vous n'avez normalement pas 
            ces fichiers :)<br>
            Cependant nous verrons comment exporter de IDA un fichier .MAP et 
            le transformer en fichier .DBG afin d'utiliser les labels, definis 
            pr&eacute;c&eacute;dement sous IDA, avec windbg. Suivent les modules 
            qui ont été chargés,<font color="#FFFF00"> image0040000</font> correspondant 
            à notre programme, suivi des dll les plus courantes. (on peux charger 
            une autre dll depuis la fenetre de commande).</font> </p>
          <p align=left><font size="2" face="Arial, Helvetica, sans-serif">Ensuite 
            sont affichés tous les registres, par d&eacute;faut &agrave; chaque 
            fois que vous tracez une instruction, tous les registres seront affichés 
            dans la fenetre de commandes, pour stopper cette option il suffit 
            de tapper<b> pr<br>
            </b>(p pour step over et r pour registre , nous reviendrons sur ces 
            commandes plus tard)</font></p>
          <p align=left><font size="2" face="Arial, Helvetica, sans-serif">On 
            voit un message d'erreur:<br>
            <font color="#0000FF" face="Courier New, Courier, mono">*** ERROR: 
            Symbol file could not be found. Defaulted to export symbols for ntdll.dll 
            -</font> ,<br>
            du fait que le debugger n'a pas trouvé les fichiers de debuggings, 
            ce qui est tout a fait normal dans notre cas, ne vous inquitez pas.</font></p>
        </div>
        <div align=left> 
          <p><font size="2" face="Arial, Helvetica, sans-serif"><b>Controle de 
            la cible</b></font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Si le programme 
            cible est actif vous n'aurez pas la possibilité de le controler ou 
            de lancer des commandes.<br>
            Il faut avant tout le "<em>freezer</em>" (geler) en appuyant sur le 
            boutton <strong>Break </strong>de la barre d'outil.<br>
            Ce qui aura pour effet de donner le contr&ocirc;le au debugger (comme 
            ctrl-d sous SoftIce)</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Pour redonner 
            le contr&ocirc;le au programme il suffit de tapper la commande <b>g</b> 
            ou d'appuyer sur la touche <strong>F5</strong> du clavier.</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Voici un petit 
            recapitulatif des actions de bases pour controler le programme, avec 
            en dernier la colone pour faire la comparaison avec les touches de 
            softice.</font></p>
          <table width="77%" border=0 align="center">
            <tbody>
              <tr bgcolor=#666666> 
                <td width="17%"> <div align=center><strong><font color=#ffffff size="2" face="Arial, Helvetica, sans-serif">Command 
                    Name</font></strong></div></td>
                <td width="21%"> <div align=center><font color=#ffffff size="2" face="Arial, Helvetica, sans-serif">Command</font></div></td>
                <td width="26%"> <div align=center><font color=#ffffff size="2" face="Arial, Helvetica, sans-serif">WinDbg 
                    Menu</font></div></td>
                <td width="16%"> <div align=center><font color=#ffffff size="2" face="Arial, Helvetica, sans-serif">WinDbg 
                    Shortcut Key</font></div></td>
                <td width="20%"> <div align=center><font color=#ffffff size="2" face="Arial, Helvetica, sans-serif">SoftIce 
                    Shortcut Key</font></div></td>
              </tr>
              <tr bgcolor=#333333> 
                <td width="17%"> <div align=center><strong><font size="2" face="Arial, Helvetica, sans-serif">Break</font></strong></div></td>
                <td width="21%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">-</font></div></td>
                <td width="26%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">Debug 
                    | Break </font></div></td>
                <td width="16%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">CTRL+BREAK</font></div></td>
                <td width="20%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">CTRL+D</font></div></td>
              </tr>
              <tr bgcolor=#333333> 
                <td width="17%"> <div align=center><strong><font size="2" face="Arial, Helvetica, sans-serif">Go</font></strong></div></td>
                <td width="21%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">G 
                    (Go) </font></div></td>
                <td width="26%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">Debug 
                    | Go </font></div></td>
                <td width="16%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">F5</font></div></td>
                <td width="20%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">F5</font></div></td>
              </tr>
              <tr bgcolor=#333333> 
                <td width="17%" height=22> <div align=center><strong><font size="2" face="Arial, Helvetica, sans-serif">Step 
                    Into</font></strong></div></td>
                <td width="21%" height=22> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">T 
                    (Trace) </font></div></td>
                <td width="26%" height=22> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">Debug 
                    | Step Into </font></div></td>
                <td width="16%" height=22> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">F8 
                    - F11</font></div></td>
                <td width="20%" height=22> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">F8</font></div></td>
              </tr>
              <tr bgcolor=#333333> 
                <td width="17%"> <div align=center><strong><font size="2" face="Arial, Helvetica, sans-serif">Step 
                    Over</font></strong></div></td>
                <td width="21%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">P 
                    (Step) </font></div></td>
                <td width="26%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">Debug 
                    | Step Over </font></div></td>
                <td width="16%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">F10</font></div></td>
                <td width="20%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">F10</font></div></td>
              </tr>
              <tr bgcolor=#333333> 
                <td width="17%"> <div align=center><strong><font size="2" face="Arial, Helvetica, sans-serif">Step 
                    Out</font></strong></div></td>
                <td width="21%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">g 
                    @$ra </font></div></td>
                <td width="26%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">Debug 
                    | Step Out </font></div></td>
                <td width="16%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">SHIFT+F11</font></div></td>
                <td width="20%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">F12</font></div></td>
              </tr>
              <tr bgcolor=#333333> 
                <td width="17%" height=48> <div align=center><strong><font size="2" face="Arial, Helvetica, sans-serif">Go 
                    to Next Call</font></strong></div></td>
                <td width="21%" height=48> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">PC 
                    (Step to Next Call) <br>
                    TC (Trace to Next Call) </font></div></td>
                <td width="26%" height=48> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">-</font></div></td>
                <td width="16%" height=48> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">-</font></div></td>
                <td width="20%" height=48> <div align=center></div></td>
              </tr>
              <tr bgcolor=#333333> 
                <td width="17%"> <div align=center><strong><font size="2" face="Arial, Helvetica, sans-serif">Go 
                    to Next Branch</font></strong></div></td>
                <td width="21%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">TB 
                    (Trace to Next Branch) </font></div></td>
                <td width="26%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">-</font></div></td>
                <td width="16%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">-</font></div></td>
                <td width="20%"> <div align=center></div></td>
              </tr>
              <tr bgcolor=#333333> 
                <td width="17%"> <div align=center><strong><font size="2" face="Arial, Helvetica, sans-serif">Trace 
                    and Watch</font></strong></div></td>
                <td width="21%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">WT 
                    (Trace and Watch Data) </font></div></td>
                <td width="26%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">-</font></div></td>
                <td width="16%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">-</font></div></td>
                <td width="20%"> <div align=center></div></td>
              </tr>
              <tr bgcolor=#333333> 
                <td width="17%"> <div align=center><strong><font size="2" face="Arial, Helvetica, sans-serif">Trace 
                    to Next Branch</font></strong></div></td>
                <td width="21%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">TB 
                    (Trace to Next Branch) </font></div></td>
                <td width="26%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">-</font></div></td>
                <td width="16%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">-</font></div></td>
                <td width="20%"> <div align=center></div></td>
              </tr>
              <tr bgcolor=#333333> 
                <td width="17%"> <div align=center><strong><font size="2" face="Arial, Helvetica, sans-serif">Go 
                    with Exception Handled</font></strong></div></td>
                <td width="21%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">GH 
                    (Go with Exception Handled) </font></div></td>
                <td width="26%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">Debug 
                    | Go Handled Exception </font></div></td>
                <td width="16%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">-</font></div></td>
                <td width="20%"> <div align=center></div></td>
              </tr>
              <tr bgcolor=#333333> 
                <td width="17%" height=9> <div align=center><strong><font size="2" face="Arial, Helvetica, sans-serif">Go 
                    with Exception Not Handled</font></strong></div></td>
                <td width="21%" height=9> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">GN 
                    (Go with Exception Not Handled) </font></div></td>
                <td width="26%" height=9> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">Debug 
                    | Go Unhandled Exception </font></div></td>
                <td width="16%" height=9> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">-</font></div></td>
                <td width="20%" height=9> <div align=center></div></td>
              </tr>
              <tr bgcolor=#333333> 
                <td width="17%" height=7> <div align=center><strong><font size="2" face="Arial, Helvetica, sans-serif">Run 
                    to Cursor</font></strong></div></td>
                <td width="21%" height=7> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">-</font></div></td>
                <td width="26%" height=7> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">Debug 
                    | Run to Cursor </font></div></td>
                <td width="16%" height=7> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">F7 
                    - CTRL+F10</font></div></td>
                <td width="20%" height=7> <div align=center></div></td>
              </tr>
              <tr bgcolor=#333333> 
                <td width="17%" height=9> <div align=center><strong><font size="2" face="Arial, Helvetica, sans-serif">Restart</font></strong></div></td>
                <td width="21%" height=9> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">.restart 
                    (Restart Target Application) </font></div></td>
                <td width="26%" height=9> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">Debug 
                    | Restart </font></div></td>
                <td width="16%" height=9> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">CTRL+SHIFT+F5</font></div></td>
                <td width="20%" height=9> <div align=center></div></td>
              </tr>
              <tr bgcolor=#333333> 
                <td width="17%"> <div align=center><strong><font size="2" face="Arial, Helvetica, sans-serif">Stop 
                    Debugging</font></strong></div></td>
                <td width="21%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">-</font></div></td>
                <td width="26%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">Debug 
                    | Stop Debugging </font></div></td>
                <td width="16%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif">SHIFT+F5</font></div></td>
                <td width="20%"> <div align=center></div></td>
              </tr>
            </tbody>
          </table>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><b>Les Breakpoints 
            </b></font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Voici la liste 
            des commandes pour controler les Breakpoints.<br>
            Les parametres optionnels sont mis entre crochets.( <em>les crochets 
            ne sont pas necessaires, quand on tape l'instruction sauf dans le 
            cas ou l'on placerais une expression comme [2+1] </em>).<br>
            Je detaille ici les commandes avec les parametres les plus courants, 
            pour plus de details consulter l'aide.</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><b>- BL (Breakpoint 
            List) - </b>Liste les breakpoints et leur statut</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><i><font color="#FFFF00">Syntaxe 
            </font></i><font color="#FFFF00">:<i> </i>bl [ID]</font><br>
            <br>
            Cette commande liste avec leurs statut les breakpoint posés lors de 
            la session de debugging, ID represente un chiffre optionnel qui identifie 
            le breakpoint. Si ID n'est pas specifier tout les breakpoints seront 
            listés. Plusieurs details permette de determiner le statut du breakpoint 
            listé, voici la forme :</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">0 e 77d3add7 0001 
            (0001) 0:*** USER32!MessageBoxA</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><b>0</b> represente 
            l'ID du breakpoint (son numero dans la liste)<br>
            <b>e</b> pour Enabled (actif) pour dire que le breakpoint est actif, 
            la lettre <b>d </b>pour Disabled (desactivé) sera affiché si le breakpoint 
            est desactivé<br>
            <b>77d3add7 </b>suit l'adresse virtuel du breakpoint, ici il est placé 
            dans USER32.dll pour la fonction MessageBoxA<br>
            <b>0001</b> decompte du nbr de passe avant que le breakpoint ne break 
            (voir BP)<br>
            <b>(0001)</b> nbr de passe a effectué pour que le breakpoint ne break</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><b>- BP (Set Breakpoint) 
            - </b>Place un breakpoint</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><i><font color="#FFFF00">Syntaxe 
            </font></i><font color="#FFFF00">: bp[ID] [/f PredNum] [Address [Passes]] 
            ["CommandString"] </font></font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Cette commande 
            place un BreakPoint, on peux en placer sur une adresse, un label, 
            une fonction combiné avec ou sans options.</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><strong><em>[ID]</em></strong> 
            : determine le numero du breakPoint tel qu'il apparaitra dans la liste, 
            le chiffre doit etre collé a la commande (ex: bp2)<br>
            <strong><em><br>
            [/f PredNum] IA-64 </em></strong>: est un parametre resérvé uniquement 
            pour les processeurs à architecture IA-64<br>
            <strong><em><br>
            [Address]</em></strong> : Adresse ou le breakPoint est placé, si l'adresse 
            n'est pas specifié, le breakpoint est placé sur l'adresse en cours<br>
            <strong><em><br>
            [Passes] </em></strong>: Nbr de fois que le debugger passera sur le 
            point du breakpoint avant de l'activer et de breaker<br>
            <strong><br>
            <em>["CommandString"] </em></strong>: Specifie une liste de commande 
            à executer lors du breakpoint, Cette commande est effective seulement 
            si le debugger à été lancé par la commande G (F5), si le debugger 
            est en mode trace step cette commande ne sera pas effectué.<br>
            La commande doit etre encadré par des guillemets, plusieurs commandes 
            peuvent etres separés par semicolon ( ; )</font></p>
          <p><font color="#FFFF00" size="2" face="Arial, Helvetica, sans-serif"><i>exemple 
            </i>: bp2 messageboxa 5 "r eax; dd esp; g"<br>
            </font><font size="2" face="Arial, Helvetica, sans-serif">Le breakpoint 
            aura l'ID 2 ( bp2) , placé sur l'api MessageBoxA, il breakera au bout 
            de la 5 passe sur cette fonction, et lors du break il affichera la 
            valeur du registre eax ( r eax) ; affichera la memoire en double sur 
            le registre esp ( dd esp) ; et redonnera la main au programme ( g 
            ).</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Il est possible 
            de poser des BP conditionnels en placant la commande dans l'expression, 
            voir plus bas la commande de condition.</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><b>- BA (Break 
            on Access)</b> - BreakPoint sur une zone memoire lorsque celle-ci 
            est sollicité (comme bpm pour softice)</font></p>
          <p><font color="#FFFF00" size="2" face="Arial, Helvetica, sans-serif"><i>Syntaxe </i>: 
            ba[ID] Access Size [/f PredNum] [Address [Passes]] ["CommandString"] 
            </font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">La plupart des 
            parametres sont les memes que pour BP, seuls 2 arguments supplementaire 
            et obligatoires figure pour cette commande :</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><strong><em>Access</em></strong> 
            :<strong> </strong>determine le type d'acces à la mémoire </font></p>
          <table width="54%" border=0 align="center" bgcolor="#333333">
            <tbody>
              <tr> 
                <td width="21%"> <div align=left><font size="2" face="Arial, Helvetica, sans-serif">e 
                    (execute)</font></div></td>
                <td width="79%"> <div align=left><font size="2" face="Arial, Helvetica, sans-serif">break 
                    lors de le rencontre d'une instruction a l'adresse specifié</font></div></td>
              </tr>
              <tr> 
                <td width="21%"> <div align=left><font size="2" face="Arial, Helvetica, sans-serif">r 
                    (read/write)</font></div></td>
                <td width="79%"> <div align=left><font size="2" face="Arial, Helvetica, sans-serif">break 
                    lors de la lecture et ecriture à l'adresse specifié</font></div></td>
              </tr>
              <tr> 
                <td width="21%"> <div align=left><font size="2" face="Arial, Helvetica, sans-serif">w 
                    (write)</font></div></td>
                <td width="79%"> <div align=left><font size="2" face="Arial, Helvetica, sans-serif">break 
                    lors de l'ecriture seulement</font></div></td>
              </tr>
              <tr> 
                <td width="21%"> <div align=left><font size="2" face="Arial, Helvetica, sans-serif">i 
                    (i/o)</font></div></td>
                <td width="79%"> <div align=left><font size="2" face="Arial, Helvetica, sans-serif">break 
                    sur i/o d'un port a l'adresse specifié </font></div></td>
              </tr>
            </tbody>
          </table>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><strong><em>Size 
            </em></strong>: taille en byte de la memoire à surveillé, peut etre 
            1, 2 ou 4 bytes</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Il n'est pas necessaire 
            de separé l'acces et la taille par un espace</font></p>
          <p><font color="#FFFF00" size="2" face="Arial, Helvetica, sans-serif"><i>exemple</i> 
            : ba r4 401580<br>
            </font><font size="2" face="Arial, Helvetica, sans-serif">Breakpoint 
            sur l'adresse memoire 401580 en lecture/ecriture sur 4 bytes (dword) 
            (de 401580 à 401584)</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><b><br>
            - BC (Breakpoint Clear)</b> - Efface un breakpoint</font></p>
          <p><font color="#FFFF00" size="2" face="Arial, Helvetica, sans-serif"><i>Syntaxe </i>: 
            BC <i>breakpoint</i></font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><strong><em>breakpoint</em></strong> 
            : ID du breakpoint à effacer, pour effacer tous les breakpoints on 
            utilise * à la place de l'ID</font></p>
          <p><font color="#FFFF00" size="2" face="Arial, Helvetica, sans-serif"><i>exemple</i> 
            : bc *<br>
            <br>
            <br>
            </font><font size="2" face="Arial, Helvetica, sans-serif"><b>- BD 
            (Breakpoint Disable)</b> - Desactive un Breakpoint </font></p>
          <p><font color="#FFFF00" size="2" face="Arial, Helvetica, sans-serif"><i>Syntaxe </i>: 
            BD <i>breakpoint</i></font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><strong><em>breakpoint 
            </em> </strong>: ID du breakpoint à desactiver, pour désactiver tous 
            les breakpoints on utilise * à la place de l'ID</font></p>
          <p><font color="#FFFF00" size="2" face="Arial, Helvetica, sans-serif"><i>exemple</i> 
            : bd *</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><b>- BE (Breakpoint 
            Enable)</b> - Active un Breakpoint</font></p>
          <p><font color="#FFFF00" size="2" face="Arial, Helvetica, sans-serif"><i>Syntaxe </i>: 
            BE <i>breakpoint</i></font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><strong><em>breakpoint</em></strong><em> 
            </em>: ID du breakpoint à activer, pour activer tous les breakpoints 
            on utilise * à la place de l'ID</font></p>
          <p><font color="#FFFF00" size="2" face="Arial, Helvetica, sans-serif"><i>exemple</i> 
            : be *</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><b>Conditional 
            Breakpoints :</b></font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Pour poser des 
            breakpoint conditionnels on se sert d'une commande J (Execute If - 
            Else) dont voici la syntaxe, que l'on placera dans le parametre commande</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">J Expression Command1 
            ; Command2<br>
            ou<br>
            J Expression 'Command1' ; 'Command2' </font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><i>Expression</i> 
            : expression à tester, si le resultat est non-zero la command 1 est 
            executé, si le resultat est zero la command2 est executé.<br>
            <i>Command1</i> : commande d'action à executer, on peux placer plusieurs 
            commande si on se sert de la syntaxe avec les '' entourant les commandes 
            et separé par des semicolon, si c'est une commande unique les '' ne 
            sont pas nécéssaire<br>
            <i>Command2</i> : idem que Command1</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><i><font color="#FFFF00">exemple</font></i><font color="#FFFF00"> 
            : bp messageboxa " j (eax != 0) g ; 'r eax; r edx' "</font><br>
            </font><font size="2" face="Arial, Helvetica, sans-serif">Dans cet 
            exemple, on pose un BP sur MessageBoxA, si eax est different de 0 
            on continue ( g ), sinon on break et on affiche la valeur du registre 
            eax et de edx ( 'r eax; r edx' )</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><b>Lire et modifier 
            la mémoire</b></font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">On peux lire et 
            ecrire directement en mémoire localisé par une adresse ou le nom d'une 
            variable. On peux acceder sous plusieurs format tel que : hexadecimal 
            bytes, words, double words, quad-words; short, long, quad integers 
            et unsigned integers; 10, 16, 32, et 64 byte real numbers, et en caracteres 
            ASCII. On y accede via les commandes suivantes:</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Pour specifier 
            une plage de memoire on peux utliser 2 formes :<br>
            </font><font size="2" face="Arial, Helvetica, sans-serif"><i>Adresse 
            de depart et adresse de fin</i> : 401000 401008 (plage contenu entre 
            401000 et 401008 soit 8 bytes)<br>
            <i>Adresse de depart et taille de la plage avec la commande L suivi 
            d'une valeur defini precedement</i> : 401000 L8</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><b>D* (Display 
            Memory)<br>
            </b><br>
            Affiche la memoire situé à l'adresse preciser au format presicer à 
            la place de * : exemple dd 405120 (affiche la memoire en format dword 
            à partir de l'adresse 405120) autre exemple : db 401000 L8 (affiche 
            la memoire de forme byte avec l'adresse de depart 401000 et de longueur 
            8 bytes; byte car nous avons specifier ce type par db, si nous avions 
            mis dd, la plage memoire serait de 8 dword et non 8 bytes)</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><b>E* (Enter Values)</b><br>
            <br>
            Modifie la memoire. exmple : eb 402150 12 ( ecrase le byte se trouvant 
            à l'adresse 402150 avec la valeur 12 )</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><b>M (Move Memory)</b><br>
            <br>
            Copie une portion de memoire vers une autre adresse</font></p>
          <p><font color="#FFFF00" size="2" face="Arial, Helvetica, sans-serif"><i>Syntaxe </i>: 
            m range address </font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">range : plage 
            de l'adresse à copier<br>
            address : adresse de depart ou la memoire sera copier</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><b>F (Fill Memory)</b><br>
            Remplit tout une plage de mémoire avec des valeurs </font></p>
          <p><font color="#FFFF00" size="2" face="Arial, Helvetica, sans-serif"><i>Syntaxe </i>: 
            f Range Pattern </font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">range : plage 
            d'adresse mémoire à remplir<br>
            Pattern : specifie un ou plusieurs byte avec lesquels remplir la memoire</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><i><font color="#FFFF00">exemple</font></i><font color="#FFFF00"> 
            : f 401000 L50 'A' 'B' 'C'</font><br>
            <br>
            Cette operation va remplir la plage memoire entre 401000 et 401050 
            des valeurs ascii A B et C se succedant.</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><b>C (Compare 
            Memory)<br>
            </b>Compare le contenu de 2 plages memoire</font></p>
          <p><font color="#FFFF00" size="2" face="Arial, Helvetica, sans-serif"><i>Syntaxe </i>: 
            c Range Address</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Range : la premiere 
            des 2 plage memoire à comparer<br>
            Address : adresse de depart de la 2eme plage memoire à comparer</font></p>
          <p><font color="#FFFF00" size="2" face="Arial, Helvetica, sans-serif"><i>exemple</i> 
            : c 401000 L10 402000<br>
            </font><font size="2" face="Arial, Helvetica, sans-serif">Compare 
            la plage entre 401000 et 401010 avec la plage de meme taille debutant 
            à l'adresse 402000</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><b>S (Search Memory)<br>
            </b>Recherche une valeur dans une plage memoire (tres utile pour recherché 
            un serial ou votre nom que vous avez entré)</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><i>Syntaxe1 </i>: 
            s [-Type] Range Pattern <br>
            <i>Syntaxe2 </i>: s -v Range Object <br>
            <br>
            </font><font size="2" face="Arial, Helvetica, sans-serif">Type : Type 
            de memoire à chercher : </font></p>
          <table width="35%" height=143 border=0 align="center" bgcolor="#333333">
            <tbody>
              <tr bgcolor=#333333> 
                <td width="34%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif"><b><font color=#ffffff>Type</font></b></font></div></td>
                <td width="66%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif"><b><font 
color=#ffffff>Description</font></b></font></div></td>
              </tr>
              <tr bgcolor=#333333> 
                <td width="34%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif"><font color=#ffffff>w</font></font></div></td>
                <td width="66%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif"><font color=#ffffff>Word 
                    (16 bits)</font></font></div></td>
              </tr>
              <tr bgcolor=#333333> 
                <td width="34%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif"><font color=#ffffff>d</font></font></div></td>
                <td width="66%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif"><font color=#ffffff>DWord 
                    (32 bits)</font></font></div></td>
              </tr>
              <tr bgcolor=#333333> 
                <td width="34%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif"><font color=#ffffff>q</font></font></div></td>
                <td width="66%"> <div align=center><font size="2" face="Arial, Helvetica, sans-serif"><font color=#ffffff>QWORD 
                    (64 bits)</font></font></div></td>
              </tr>
              <tr bgcolor=#333333> 
                <td width="34%" height=18> <div align=center><font size="2" face="Arial, Helvetica, sans-serif"><font color=#ffffff>a</font></font></div></td>
                <td width="66%" height=18> <div align=center><font size="2" face="Arial, Helvetica, sans-serif"><font color=#ffffff>ASCII 
                    string</font></font></div></td>
              </tr>
              <tr bgcolor=#333333> 
                <td width="34%" height=20> <div align=center><font size="2" face="Arial, Helvetica, sans-serif"><font color=#ffffff>u</font></font></div></td>
                <td width="66%" height=20> <div align=center><font size="2" face="Arial, Helvetica, sans-serif"><font color=#ffffff>Unicode 
                    string</font></font></div></td>
              </tr>
            </tbody>
          </table>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Range : Plage 
            memoire ou effectué la recherche, la plage ne peux ecceder 250 MO 
            de taille.<br>
            Pattern : Valeur a retrouver, si on specifie une string on la placera 
            entre guillemets<br>
            -v : oblige le debugger à rechercher des objets que le meme type d'objet 
            specifier<br>
            Object : specifie l'adresse d'un Objet, pour determiner le type d'objet 
            a chercher dans la plage</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Si la valeur est 
            retrouvé, le debugger affichera l'adresse de depart de celle ci</font></p>
          <p><font color="#FFFF00" size="2" face="Arial, Helvetica, sans-serif"><i>exemple</i> 
            : s -a 0012ff40 L20 "Hello" </font></p>
          <p><font size=2 face="Arial, Helvetica, sans-serif"><b>Lire et modifier 
            les registres et les flags</b></font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">La commande R 
            (Registers) permet de modifier un registre ou un flag, exemple : r 
            eax = 5 ou r zf = 1<br>
            </font><font size="2" face="Arial, Helvetica, sans-serif">On peux 
            aussi modifier les registres à partir de la fenetre des registres 
            en selectionnant celui que l'on souhaite modifier, en double cliquant 
            dans sa case valeur et en ecrivant la nouvelle valeur.</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">En tracant, tout 
            les registres seront affichés dans le fenetre de commande, on peux 
            stopper cette fonction en tappant <b>PR </b>p correspondant a la commande 
            STEP (F10) et r pour registre annulant ainsi cette fonction en retappant 
            cette commande on la reactive.</font></p>
          <p><font size=2 face="Arial, Helvetica, sans-serif"><b>Modifier et rechercher 
            du code assembleur</b></font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">La commande # 
            (Search for Disassembly Pattern) permet de rechercher un pattern (adresse, 
            instruction, expression, valeur, registre ou tout autre text ) dans 
            la fenetre du code désassemblé</font></p>
          <p><font color="#FFFF00" size="2" face="Arial, Helvetica, sans-serif"><i>Syntaxe</i> 
            : # [pattern] [address] </font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><strong><em>pattern 
            </em></strong>: pattern a recherché dans le fentre du code désassemblé<br>
            <em><strong>address</strong></em> : adresse ou la recherche va commencer</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">voici quelques 
            exemples, nous avons ce code:</font></p>
          <pre><font size="2" face="Courier New, Courier, mono">00401000 6a00             push    0x0<br>00401002 e8c9010000       call    image00400000+0x11d0 (004011d0)<br>00401007 a300304000       mov     [image00400000+0x3000 (00403000)],eax<br>0040100c 6a00             push    0x0<br>0040100e 682b104000       push    0x40102b<br>00401013 6a00             push    0x0<br>00401015 6804304000       push    0x403004<br>0040101a ff3500304000     push    dword ptr [image00400000+0x3000 (00403000)]<br>00401020 e875010000       call    image00400000+0x119a (0040119a)<br>00401025 50               push    eax</font><font size="2" face="Arial, Helvetica, sans-serif"><br></font></pre>
          <p><font size="2" face="Arial, Helvetica, sans-serif">en tappant la 
            commande # mov 401000, le debugger nous retournera :</font></p>
          <pre><font size="2" face="Courier New, Courier, mono">00401007 a300304000       mov     [image00400000+0x3000 (00403000)],eax</font></pre>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Qui est la premiere 
            adresse ou l'on rencontre le pattern 'mov', on peux tres bien rechercher 
            une valeur comme A3 sui sera retourné à l'adresse 401007 comme la 
            valeur hexa de l'instruction asm qui suit. Bref une commande tres 
            pratique pour recherché tout et n'importe quoi dans le code désassemblé.</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Pour modifier 
            du code directement en assembleur on se sert de la commande A</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">A (Assemble)</font></p>
          <p><font color="#FFFF00" size="2" face="Arial, Helvetica, sans-serif"><i>Syntax</i>e 
            : a [address] </font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><strong><em>adress 
            </em></strong>: etant l'adresse de depart ou modifier le code, si 
            l'on ne specifie pas d'adresse la modification commence à l'adresse 
            courante, pour sortir du mode assembleur il suffit de presser la touche 
            ENTRER sans entrer de nouvelle instruction.<br>
            <br>
            <b>Diverse commandes utiles<br>
            <br>
            </b></font><font size="2" face="Arial, Helvetica, sans-serif">Il existe 
            de tres nombreuses commandes sous Windbg, il serait fou de toute les 
            lister mais voici quelques une souvent utilisés, pour plus de renseignement 
            voir dans l'aide ou toutes les commandes sont decrites en details.</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><b><em>N </em></b>: 
            La base numerique utilsé par defaut par le debugger est l'hexadecimal, 
            on peux en changer en tappant la commande N suivi de la base souhaité 
            : n 10 (decimal), en tappant simplement n le debbugger affiche la 
            base courante.</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><b><em>?</em> 
            </b>:<b> </b>Permet Evaluer une expression, un registre, une variable<b>..</b> 
            Comme sous softice. exemple : ? eax, ? E52F</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><b><em>.cls </em></b>:<b> 
            </b>efface la fenetre des commande</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><b><em>!dh [Module 
            Name] </em></b>: Affiche le header du module specifier (generalement 
            le nom de votre module sera <b>image00400000</b>)</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><b><em>LM </em></b>: 
            Liste les modules chargés</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><b><em>.load </em></b>: 
            charge une nouvelle DLL dans le debugger</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><b><em>x </em></b>: 
            affiche tous les symbols contenu dans un module <font color="#FFFF00">exemple 
            : x user32!mes*</font> affichera toutes les fonctions contenu dans 
            User32.dll commenecant par 'mes'</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><b><em>ENTER</em></b> 
            : (La touche) repete la commande precedente</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><b><em>.tlist</em> 
            </b>: List tous les programme chargé en memoire</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><b><em>.reboot</em></b> 
            : Reboot le system en cas de gros plantage</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><b><em>.formats</em></b> 
            : Affiche dans plusieurs format une expression ou une valeur </font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><b><em>.kill </em></b>: 
            Termine un processus</font></p>
          <p><font size=2 face="Arial, Helvetica, sans-serif"><b><br>
            Philosophie de WindDbg</b></font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Voila les presentations 
            sont faites, bien sur il faut un petit temps d'adaptation pour s'en 
            servir efficacement, ce debugger possede beaucoup de fonctions et 
            de possibilités, encore une fois allez faire un tour dans l'aide (tres 
            complete) qui vous detaillera toutes les possibilté de celui-ci.</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Sur le net il 
            est tres dur de trouver des tutos de crack avec Windbg, voir impossible, 
            c'est ce qui m'a aussi poussé a faire ce tutorial. Et j'espere que 
            la pratique et l'utilisation de ce debugger se repandra un peu permettant 
            d'elaborer des techniques, scripts et des plug-ins avancés. A mon 
            humble avis ce debugger à sa place dans le monde du cracking, surtout 
            pour ceux qui souhaite utiliser un debugger efficace sous XP et qui 
            sont rebutté comme moi par DriverStudio. </font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Les commandes 
            etant tres proche de celle de softice les habitué de SI n'auront aucun 
            probleme à se servir de ce debugger et la methode de travail reste 
            sensiblement la meme. Peut etre un peu moins simple à s'en servir 
            du fait qu'il faille je pense quelques notions et base de cracking 
            avant de se lancer dans ce debugger et de s'en servir efficacement... 
            D'un autre coté le mode graphique et certaines options apparaitront 
            plus conviviales aux yeux de certains.</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Lors d'un BP sur 
            une API, le debugger va breaker sous les dll system auquel appartienne 
            l'api sollicité. C'est a dire que l'on se retrouve avant tout dans 
            les dll du system avant d'etre dans notre module. Pour sortir des 
            ces dll et aller dans notre module on peux faire comme sous SI et 
            F12, sous WinDbg (SHIFT+F11) ou alors le boutton step out. On peux 
            aussi tracer un peu avec F10 dans ces dll system ou l'on pourra ainsi 
            voir les parametre pushé et etudier leurs valeurs avant que la fonction 
            ne s'execute, ensuite nous rencontrerons un ret qui suffira de tracer 
            et qui nous rammenera dans notre programme.</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Sous Windbg quand 
            on trace sur l'adresse de l'instruction courante, sera rajouté selon 
            l'instruction des infos supplementaires comme l'evaluation d'une valeur, 
            une valeur pointé par une adresse, le nom d'une fonction etc...</font></p>
          <p><font size=2 face="Arial, Helvetica, sans-serif"><b>Apercu d'un crack 
            avec WInDbg</b></font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Voici un mini-tutorial 
            sur un petit crackme, pour montrer comment travailler avec Windbg. 
            Bien sur, étant donné que j'ai explor&eacute; ce debugger par moi 
            meme, sans avoir pu trouver un seul tutorial et d'autres experiences 
            de cracking complete avec cet outil et qu'il reste relativement nouveau 
            pour moi, je n'ai pas la pretention de donner <em>la methode ultime 
            </em>ou de maitriser parfaitement cet outil, mais simplement je veux 
            vous expliquer comment je m'en sers pour les fonctions de bases.</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">On ouvre le programme 
            via le menu File | open executable.</font></p>
          <pre><font color=#FFFFFF size="2" face="Courier New, Courier, mono">CommandLine: C:\netix\compil.exe <br>Symbol search path is: c:\<br>Executable search path is: c:\<br>ModLoad: 00400000 00405000   <font color="#FFFF00">image00400000</font><br>ModLoad: 77f40000 77ff0000   ntdll.dll<br>ModLoad: 77e40000 77f35000   C:\WINDOWS\system32\kernel32.dll<br>ModLoad: 77d10000 77d9d000   C:\WINDOWS\system32\USER32.dll<br>ModLoad: 77c40000 77c80000   C:\WINDOWS\system32\GDI32.dll<br>ModLoad: 77da0000 77e3c000   C:\WINDOWS\system32\ADVAPI32.dll<br>ModLoad: 77c90000 77d05000   C:\WINDOWS\system32\RPCRT4.dll<br>(59c.2ac): Break instruction exception - code 80000003 (first chance)<br>eax=77fb642f ebx=7ffdf000 ecx=00000004 edx=77f67010 esi=00241eb4 edi=00241eb4<br>eip=77f6f570 esp=0012fb38 ebp=0012fc2c iopl=0         nv up ei pl nz na pe nc<br>cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202<br><font color="#0000FF">*** ERROR: Symbol file could not be found.  Defaulted to export symbols for ntdll.dll - </font><br>ntdll!DbgBreakPoint:<br><font color="#FF0000">77f6f570 cc               int     3</font><br></font></pre>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Windbg nous affiche 
            les modules alors chargé, tels que User32, Kernel32 etc... Notre programme 
            se nomme <font color="#FFFF00">image00400000</font> Puis l'adresse 
            ou le debugger à breaké : <font color="#FF0000">77f6f570 cc int 3</font></font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Contrairement 
            à SoftIce nous ne somme pas sous notre module à l'entry-point, et 
            si nous voulons faire un un break sur l'entry point, il va falloir 
            le specifier. Pour cela, on affiche le header de notre crackme et 
            on recupere l'entry-point avec la commande:</font></p>
          <pre><font size="2" face="Arial, Helvetica, sans-serif"><strong>!dh image00400000</strong><br><br>ce qui nous interresse est ici :</font></pre>
          <pre><font size="2" face="Courier New, Courier, mono">OPTIONAL HEADER VALUES<br>     10B magic #<br>    5.12 linker version<br>     200 size of code<br>     600 size of initialized data<br>       0 size of uninitialized data<br>    <font color=#990000><b>1000 address of entry point</b></font><br>    1000 base of code<br>         ----- new -----<br><b><font color=#990000>00400000 image base</font></b></font><br><br><font size="2" face="Arial, Helvetica, sans-serif">On pose donc un BP sur l'image base + l'entry point pour obtenir l'adresse virtuelle de celui-ci:</font><font size="2" face="Arial, Helvetica, sans-serif"><br>
<strong>bp 00400000+1000 </strong>(ou directement 401000)</font></pre>
          <font size="2" face="Arial, Helvetica, sans-serif"></font>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Ne vous inquietez 
            pas si vous obtenez des erreurs, celles ci viennent du fait que notre 
            module est correctement chargé mais qu'aucun symbol n'est present 
            dans celui-ci. Les symbols etant des labels, noms de variables fonctions 
            etc.. qui sont normalement inserés dans un prog pendant la compilation 
            et déstinés &agrave; faciliter le debugging par la suite.</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Etant donné que 
            le programme n'a normalement pas ces informations , le debugger nous 
            en rendra compte. On redonne la main au programme avec la touche F5 
            ou la commande G, aussitot celui-ci break et nous nous retrouvons 
            sur notre bp dans la fenetre du code:</font></p>
          <pre><font size="2" face="Courier New, Courier, mono">00400ffa 0000             add     [eax],al<br>00400ffc 0000             add     [eax],al<br>00400ffe 0000             add     [eax],al<br><b>00401000 6a00             push    0x0</b><br>00401002 e8c9010000       call    image00400000+0x11d0 (004011d0)<br>00401007 a300304000       mov     [image00400000+0x3000 (00403000)],eax<br>0040100c 6a00             push    0x0<br>0040100e 682b104000       push    0x40102b<br>00401013 6a00             push    0x0<br>00401015 6804304000       push    0x403004<br>0040101a ff3500304000     push    dword ptr [image00400000+0x3000 (00403000)]</font></pre>
          <p><font size="2" face="Arial, Helvetica, sans-serif">On pose un bp 
            sur l'api MessageBoxA et lui redonne la main avec G ou F5</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif"><strong>bp messageboxa 
            </strong> </font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Si vous obtenez 
            à nouveau un message d'erreur sur les symbols ne vous inquitez pas 
            c'est le dernier, apres le debugger ne nous embetera plus avec ca, 
            il aura surement compris que nous crackeur n'avons pas besoins de 
            ces shits la pour debugger </font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">On rempli les 
            champs du crackme avec un nom et un serial et on presse le boutton 
            check, ca break et on se retrouve ici:</font></p>
          <pre><font size="2" face="Courier New, Courier, mono">USER32!MessageBoxA:<br><b>77d3add7 833dc4d3d67700 cmp dword ptr [USER32!VRipOutput+0x357d (77d6d3c4)],0x0 ds:0023:77d6d3c4=00000000</b><br>77d3adde 0f85377e0100     jne     USER32!TrackPopupMenu+0x6ca1 (77d52c1b)<br>77d3ade4 6a00             push    0x0<br>77d3ade6 ff742414         push    dword ptr [esp+0x14]<br>77d3adea ff742414         push    dword ptr [esp+0x14]<br>77d3adee ff742414         push    dword ptr [esp+0x14]<br>77d3adf2 ff742414         push    dword ptr [esp+0x14]<br>77d3adf6 e803000000       call    USER32!MessageBoxExA (77d3adfe)<br>77d3adfb c21000           ret     0x10
</font></pre>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Ici on a breaké 
            dans une dll du systeme, USER32 qui contient la fonction MessageBoxA, 
            on voit que l'API est referencé par un label en tout debut avec <b>USER32!MessageBoxA 
            </b>puis les arguments qui vont etre passés pour cette fonction.</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">On pourrait comme 
            sous SI faire un F12 (sous Windbg un SHIFT+F11 ou le boutton Step 
            out) ce qui aurait pour effet d'executer l'API MessageBox, et ensuite 
            une fois que nous aurions quitté la message box, le debugger nous 
            redonnerais la main dans notre programme en se placant juste apres 
            le call de la messagebox. Cepandant on peux ici de voir les arguments 
            qui seront passé pour la message box avant que celle-ci s'affiche. 
            Pour cela nous restons nous restons dans la dll system et nous tracons 
            avec F10. Les instructions qui suivent sont les push des argument 
            pour MessageBoxA , exemple du 2eme argument pushé , lorsque l'on arrive 
            dessus les infos suivantes sont ajoutées :</font></p>
          <pre><font size="2" face="Courier New, Courier, mono">77d3adea ff742414 push dword ptr [esp+0x14] <b><font color=#990000>ss:0023:0012fbc8=00401147</font></b>
</font></pre>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Cet argument selon 
            le prototype represente le titre de la message box, pour voir celui-ci 
            il suffit de tapper la commande suivante dans le fenetre de commande:</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">d 00401147 et 
            on obtient :</font></p>
          <pre><font size="2" face="Courier New, Courier, mono">0:000&gt; d 00401147<br>00401147  45 72 72 6f 72 20 21 21-20 42 41 44 20 53 65 72  Error !! BAD Ser<br>00401157  69 61 6c 20 2d 20 74 72-79 20 61 67 61 69 6e 00  ial - try again.<br>00401167  6a 00 68 47 11 40 00 68-47 11 40 00 6a 00 e8 38  j.hG.@.hG.@.j..8<br>00401177  00 00 00 5a 5f 5e c9 c2-04 00 68 8d 30 40 00 68  ...Z_^....h.0@.h<br>00401187  e9 03 00 00 ff 75 08 e8-2b 00 00 00 5a 5f 5e c9  .....u..+...Z_^.<br>00401197  c2 04 00 ff 25 28 20 40-00 ff 25 1c 20 40 00 ff  ....%( @..%. @..<br>004011a7  25 10 20 40 00 ff 25 24-20 40 00 ff 25 0c 20 40  %. @..%$ @..%. @<br>004011b7  00 ff 25 20 20 40 00 ff-25 14 20 40 00 ff 25 18  ..%  @..%. @..%.</font><font size="2" face="Arial, Helvetica, sans-serif"><br><br></font><font size="2" face="Arial, Helvetica, sans-serif">Remarques : on peux aussi se servir de la fenetre Memory et en entrant l'adresse  à visualiser sous la forme byte et ascii, pour obtenir la meme chose.</font></pre>
          <p><font size="2" face="Arial, Helvetica, sans-serif">On continu à tracer, 
            depassé le call, la MessageBox va s'afficher, on clik OK sur celle 
            -ci et le debugger reprend la main, en pointant sur l'instruction 
            qui suit, a savoir un ret qui va nous faire revenir dans notre programme 
            juste apres le call de la messagebox, (comme si nous avions effectué 
            le step out des le debut) :</font></p>
          <pre><font size="2" face="Courier New, Courier, mono">0040116b 114000           adc     [eax],eax<br>0040116e 6847114000       push    0x401147<br>00401173 6a00             push    0x0<br>00401175 e838000000       call    image00400000+0x11b2 (004011b2)<br><b>0040117a 5a               pop     edx</b><br>0040117b 5f               pop     edi<br>0040117c 5e               pop     esi<br>0040117d c9               leave<br>0040117e c20400           ret     0x4<br>00401181 688d304000       push    0x40308d<br>00401186 68e9030000       push    0x3e9</font><font size="2" face="Arial, Helvetica, sans-serif"><br><br>On efface les pr&eacute;c&eacute;dents BP et on en place un sur GetDlgItemTextA</font></pre>
          <p><font size="2" face="Arial, Helvetica, sans-serif">bc * (efface tous 
            les breakpoints)</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">bp GetDlgItemTextA</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">On redonne la 
            main au programme avec F5, on entre un nom et un serial et on clik 
            sur le boutton Check, ca break dans USER32! :</font></p>
          <pre><font size="2" face="Courier New, Courier, mono">USER32!GetDlgItemTextA:<br>77d3274f 55               push    ebp<br>77d32750 8bec             mov     ebp,esp<br>77d32752 ff750c           push    dword ptr [ebp+0xc]<br>77d32755 ff7508           push    dword ptr [ebp+0x8]<br>77d32758 e84b63feff       call    USER32!GetDlgItem (77d18aa8)<br>77d3275d 85c0             test    eax,eax<br>77d3275f 0f84148f0200     je      USER32!TrackPopupMenu+0xf6ff (77d5b679)<br>77d32765 ff7514           push    dword ptr [ebp+0x14]<br>77d32768 ff7510           push    dword ptr [ebp+0x10]<br>77d3276b 50               push    eax<br>77d3276c e8c999ffff       call    USER32!GetWindowTextA (77d2c13a)<br>77d32771 5d               pop     ebp<br>77d32772 c21000           ret     0x10</font><font size="2" face="Arial, Helvetica, sans-serif"><br><br>Vous pouvez explorer comment cette api fonctionne en tracant cette petite partie et en regardant les valeurs des push.<br>Pour etre plus direct, faisons un ret vers notre programme avec SHIFT+F11 ou step out</font></pre>
          <pre><font size="2" face="Courier New, Courier, mono">004010b1 6a10             push    0x10<br>004010b3 680d304000       push    0x40300d<br>004010b8 68e8030000       push    0x3e8<br>004010bd ff7508           push    dword ptr [ebp+0x8]<br>004010c0 e8e7000000       call    image00400000+0x11ac (004011ac)<br><b>004010c5 83f805           cmp     eax,0x5</b><br>004010c8 0f8cb3000000     jl      image00400000+0x1181 (00401181)<br>004010ce 8d350d304000     lea     esi,[image00400000+0x300d (0040300d)]<br>004010d4 56               push    esi<br>004010d5 8a16             mov     dl,[esi]<br>004010d7 84d2             test    dl,dl</font></pre>
          <p><font size="2" face="Arial, Helvetica, sans-serif">On se retouve 
            juste apres le call de GetDlgItemTextA, si on examines ses parametres 
            pushé (les 4 derniers avant le call, puisque cet api utilise 4 arguments 
            selon le prototype) on peux voir notre nom en examinant le 2eme argument 
            pushé (rappel : inverse par rapport au prototype) :</font></p>
          <pre><font size="2" face="Arial, Helvetica, sans-serif">d 40300d
       
<font face="Courier New, Courier, mono">0:000&gt; d 40300d<br>0040300d  4e 65 74 69 78 00 00 00-00 00 00 00 00 00 00 00  Netix...........<br>0040301d  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................<br>0040302d  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................<br>0040303d  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................<br>0040304d  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................<br>0040305d  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................<br>0040306d  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................<br>0040307d  00 00 00 00 00 00 00 00-00 00 00 00 00 00 00 00  ................</font></font></pre>
          <p><font size="2" face="Arial, Helvetica, sans-serif">On continue en 
            tracant, des que l''on rencontre un call d'une api, en tracant avec 
            F10 on entre dans la dll ou elle est declaré, on en ressort avec un 
            Step out.</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Voila en gros 
            comment controler sa cible, ce qui parrait deroutant au debut est 
            de ne pas voir le nom des fonctions directement dans le code desassemblé 
            de notre module, mais apres on s'y habitue et cela ne gene pas vraiment, 
            l'important etant d'examiner les parametres pushé avant celle-ci, 
            apres l'avoir tracé. Peut etre aussi existe t-il une manip qui m'a 
            echapé et qui permetrai d'y remedier, j'attend avec impatiente vos 
            solutions.<br>
            <br>
            </font><font size="2" face="Arial, Helvetica, sans-serif">De toute 
            facon, un debugger sert à verifier ou modifier des valeurs et examiner 
            des situations et la progression d'un code, le travail s'effectuant 
            en alternance entre un debugger et un desassembleur. On etudie le 
            prog par le desassembleur et on teste avec le debugger.</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Un moyen que j'ai 
            trouvé pour y remedier est par l'export de IDA vers WindDbg, voyons 
            comment faire.</font></p>
          <p><font size=2 face="Arial, Helvetica, sans-serif"><b>Export de IDA 
            vers WinDbg</b></font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Pour cela il faut 
            une petite manip, avec un petit prgramme creer par Borland qui s'appelle 
            <b>Map2Dbg </b>que vous trouverez <a 
href="http://membres.lycos.fr/netixyz/tutos/windbg/map2dbg.zip"><b>ICI<br>
            </b></a></font><font size="2" face="Arial, Helvetica, sans-serif">On 
            produit un fichier MAP à partir d'IDA, portant le meme nom que l'exe 
            ( avec l'extension MAP pas EXE :p )</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">On utilise ensuite 
            Map2Dbg, pour s'en servir rien de plus simple : on place Map2Dbg dans 
            le meme rep qui contient l'EXE analysé ainsi que son fichier .MAP, 
            tout 2 porte le meme nom, On fait glisser l'EXE sur Map2Dbg et un 
            nouveau fichier va etre creé portant le nom de l'EXE avec l'extension 
            .DBG. C'est ce fichier qui va nous servir pour WinDbg, mais avant 
            tout une chose tres importante, il faut le renommer en<b> image00400000.dbg 
            </b>en effet image00400000 est le nom de notre module sous WinDbg 
            et le debugger va donc chercher le fichier .dbg correspondant a ce 
            nom de module.</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Ensuite on va 
            specifier le chemin du repertoire ou se trouve ce fichiers qui contient 
            des Symbols, on peux via le menu File | Symbol File Path, specifier 
            le repertoire ou se trouve le fichier <b>image00400000.dbg</b> et 
            ensuite ouvrir l'EXE. La commande <b>.sympath </b>[chemin vers le 
            repertoire ou se trouve le fichier] permet de modifier ce chemin.</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">Voyons voir le 
            rendu :</font></p>
          <pre><font size="2" face="Courier New, Courier, mono">00400ff6 0000             add     [eax],al<br>00400ff8 0000             add     [eax],al<br>00400ffa 0000             add     [eax],al<br>00400ffc 0000             add     [eax],al<br>00400ffe 0000             add     [eax],al<br>image00400000!start:<br>00401000 6a00             push    0x0<br>00401002 e8c9010000       call    image00400000!GetModuleHandleA (004011d0)<br>00401007 a300304000       mov     [image00400000!hInstance (00403000)],eax<br>0040100c 6a00             push    0x0<br>0040100e 682b104000       push    0x40102b<br>00401013 6a00             push    0x0<br>00401015 6804304000       push    0x403004<br>0040101a ff3500304000     push dword ptr [image00400000!hInstance (00403000)]<br>00401020 e875010000       call    image00400000!DialogBoxParamA (0040119a)<br>00401025 50               push    eax<br>00401026 e89f010000       call    image00400000!ExitProcess (004011ca)<br>image00400000!DialogProc:<br>0040102b 55               push    ebp<br>0040102c 8bec             mov     ebp,esp<br>0040102e 837d0c10         cmp     dword ptr [ebp+0xc],0x10<br>00401032 750c             jnz     image00400000!DialogProc+0x15 (00401040)<br>00401034 6a00             push    0x0<br>00401036 ff7508           push    dword ptr [ebp+0x8]<br>00401039 e862010000       call    image00400000!EndDialog (004011a0)<br>0040103e eb62             jmp     image00400000!loc_401099+0x9 (004010a2)</font></pre>
          <p><font size="2" face="Arial, Helvetica, sans-serif">On peut voir à 
            present les labels ( start, DialogProc ), les fonctions appelés, les 
            variables ( mov [image00400000!<b>hInstance</b> (00403000)],eax ).</font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">On peux poser 
            des BP sur ces labels et Fonctions : BP start , BP DialogProc ainsi 
            qu'examiner la valeur des variables en les designant par leur nom, 
            bref debugger en utilisant les symbols contenu dans ce fichier .DBG.</font></p>
          <p><font size=2 face="Arial, Helvetica, sans-serif"><b>Conclusion</b></font></p>
          <p><font size="2" face="Arial, Helvetica, sans-serif">J'espere que vous 
            avez appreci&eacute; ce debugger, et que vous vous en servirez et 
            ferez evoluer des methodes de cracking par l'intermediaire de tutoriaux 
            voir pourquoi pas si vous en etes capables de programmer des plug-ins 
            ou scripts qui permettraient d'ajouter des fonctions à ce petit debugger.<br>
            De plus c'est un tres bon outils pour debugger vos propres programmes 
            avec les informations symboliques et en mode source ce dont je n'ai 
            pas parl&eacute;, mais je trouve que j'en ai deja pas mal dit dans 
            ce tut donc je m'arrete l&agrave; en vous souhaitant bon courage dans 
            le cracking.</font></p>
          <p><img src="images/netix.jpg" width="96" height="32"></p>
        </div>
</td>
    </tr>
  </table>
</DIV>
</BODY>
<!-- Mirrored from frenchezines.free.fr/tries/shmeitcorp/5/Netix/windbg.htm by HTTrack Website Copier/3.x [XR&CO'2007], Thu, 07 Aug 2008 04:41:17 GMT -->
</HTML>
