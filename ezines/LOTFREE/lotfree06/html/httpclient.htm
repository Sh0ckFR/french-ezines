<html>
<head><title>The POSTman v1 par sirius_black</title></head>
<body bgcolor="#FFFFFF" text="#000000">
<pre><font color="#FF00FF">//Dans la suite de mes tutos sur le HTTP, voici l'arme ultime :</font><font color="#339966">

/*+++++++++++++++++++++++++++++++++++++++++++++++++++++++
+             The POSTman v1 par sirius_black           +
+ No licence, Open Source, GPL et tout ce qu'on veut :) +
+++++++++++++++++++++++++++++++++++++++++++++++++++++++*/</font>


<font color="#0000FF">import</font> java.net.*; <font color="#339966">//on charge les librairies r&eacute;seau pour avoir le type Socket et le type URL</font>
<font color="#0000FF">import</font> java.io.*; <font color="#339966">//on charge les Entr&eacute;es/Sorties standards pour pouvoir utiliser les diff&eacute;rents flux (Stream)</font><font color="#0000FF">
public class</font> HttpClient{ <font color="#339966">//On d&eacute;clare une classe HttpClient qui poss&egrave;de son propre point d'entr&eacute;e</font>
    <font color="#FF0000">URL</font> url; <font color="#339966">//On d&eacute;clare une variable de type URL qui nous permettra de d&eacute;composer une URL</font>
    <font color="#FF0000">Socket</font> socket; <font color="#339966">//Notre Socket</font>
    <font color="#FF0000">String</font> texte; <font color="#339966">//String qui r&eacute;cup&eacute;rera le r&eacute;sultat de notre requ&ecirc;te</font>
    <font color="#FF0000">String</font> req; <font color="#339966">//La String qui contiendra notre requ&ecirc;te</font>
    <font color="#0000FF">int</font> port; <font color="#339966">//le port HTTP (g&eacute;n&eacute;ralement 80)</font>
    <font color="#FF0000">InputStream</font> input; <font color="#339966">//InputStream et OutputStream sont les flux de base. Ils ne peuvent pas &ecirc;tre instanci&eacute;</font>
    <font color="#FF0000">OutputStream</font> output; <font color="#339966">// (pas de new()) car ce sont des classes dites 'abstraites'.</font>
    <font color="#FF0000">BufferedReader</font> breader; <font color="#339966">// Les classes Buffered* sont des classes filles des classes InputStream* et OutputStream*
                            // elles</font> <font color="#339966">m&ecirc;me filles de InputStream et OutputStream</font>
    <font color="#FF0000">BufferedWriter</font> bwriter;
    

    <font color="#0000FF">public static void</font> usage() <font color="#339966">//On arrive ici si il n'y a pas le bon nombre d'arguments</font>
    {
	    <font color="#FF0000">System</font>.out.println("Usage: java HttpClient complete_URL [headers_to_send]");
	    <font color="#FF0000">System</font>.out.println("\tcomplete_URL must look like:");
	    <font color="#FF0000">System</font>.out.println("\thttp://host/page.ext?variable1=value1&variable2=value2");
	    <font color="#FF0000">System</font>.out.println("\n\theaders_to_send must look like:");
	    <font color="#FF0000">System</font>.out.println("\thead1:value1&head2:value2");
	    <font color="#FF0000">System</font>.exit(<font color="#FF0000">0</font>); <font color="#339966">//On quitte</font>
<font color="#339966">// Le programme sert &agrave; transformer une m&eacute;thode GET en m&eacute;thode POST. On l'utilise de cette fa&ccedil;on :
// java HttpClient http://www.google.fr/main/index.php?login=toto&amp;pass=titi Referer:http://membres.lycos.fr/lotfree&amp;User-Agent:POSTman1</font>
    }

    <font color="#0000FF">public void</font> sendReq() <font color="#339966">//la fonction qui enverra nos donn&eacute;es</font>
    {
	    <font color="#0000FF">try</font>{
	        req=req.concat("\r\n"+url.getQuery()+"\r\n\r\n"); <font color="#339966">//on ajoute les variables &agrave; la requ&ecirc;te</font>
<font color="#FF0000">            System</font>.out.println("--------------------Requête-------------------");
	        <font color="#FF0000">System</font>.out.println(req); <font color="#339966">//on l'affiche</font>
	        output.write(req.getBytes()); <font color="#339966">// on envoie notre requ&ecirc;te sous la forme d'une suite de Byte &agrave; notre</font>
                                          <font color="#339966">// flux de sortie li&eacute; &agrave; notre socket</font>
	        texte=<font color="#0000FF">new</font> <font color="#FF0000">String</font>(); <font color="#339966">// l'allocation ne se fait pas obligatoirement dans le constructeur</font>
	        texte=breader.readLine(); <font color="#339966">//Le type BufferedReader permet de faire une lecture ligne apr&egrave;s ligne</font>
            <font color="#0000FF">while</font>(texte!=<font color="#0000FF">null</font>){ <font color="#339966">//tant que ya de quoi lire on lit</font>
		        <font color="#FF0000">System</font>.out.println(texte); <font color="#339966">//et on l'affiche</font>
		        texte=breader.readLine(); <font color="#339966">//c ici kon lit</font>
	        }
	    }
	    <font color="#0000FF">catch</font>(<font color="#FF0000">IOException</font> ex){
            <font color="#FF0000">System</font>.out.println(<font color="#FF0000">System</font>.err);
	    }
    }

<font color="#339966">//ya une belle surcharge du constructeur par l&agrave; :)</font>

    <font color="#0000FF">public</font> HttpClient(<font color="#FF0000">String</font> param1,<font color="#FF0000">String</font> param2) <font color="#339966">//Le constructeur avec deux arguments : URL_avec_donn&eacute;es et headers</font>
    {
	    <font color="#0000FF">this</font>(param1); <font color="#339966">//On fait appel au constructeur avec un seul argument (toujours appeler en premier dans ce cas)</font>
	    param2=param2.replaceAll("&","\r\n"); <font color="#339966">//On d&eacute;coupe les headers avec le '&amp;' comme sp&eacute;rarateur</font>
	    req=req.concat(param2+"\r\n");
    }
    
    <font color="#0000FF">public</font> HttpClient(<font color="#FF0000">String</font> param) <font color="#339966">//Constructeur appel&eacute; dans tous les cas (param= URL_avec_donn&eacute;es)</font>
    {
	    <font color="#0000FF">try</font>{
	        url=<font color="#0000FF">new</font> <font color="#FF0000">URL</font>(param);
<font color="#339966">            //On transforme la String pass&eacute;e en argument en une variable de type URL qui nous permettra de r&eacute;cup&eacute;rer
            // nom d'h&ocirc;te, d&eacute;terminer le port, r&eacute;cup&eacute;rer les arguments, le chemin de la page sur le serveur etc
            // /!\ Attention : l'URL pass&eacute;e en argument doit commencer par 'http://'</font>
            <font color="#FF0000">System</font>.out.println("Host: "+url.getHost()); <font color="#339966">//On affiche les donn&eacute;es trouv&eacute;es</font>
	        <font color="#0000FF">if</font>(url.getPort()==-<font color="#FF0000">1</font>)port=<font color="#FF0000">80</font>; <font color="#339966">//Si le port n'est pas sp&eacute;cifi&eacute;, on prend le 80 par d&eacute;faut</font>
	        <font color="#0000FF">else</font> port=url.getPort();
	        <font color="#FF0000">System</font>.out.println("Port: "+port);
	        <font color="#FF0000">System</font>.out.println("Path: "+url.getPath());
	        <font color="#FF0000">System</font>.out.println("Query: "+url.getQuery());
	        socket=<font color="#0000FF">new</font> <font color="#FF0000">Socket</font>(url.getHost(),port); <font color="#339966">// Constructeur de la Socket : Socket(String host,int port)</font>
	    
	        input=socket.getInputStream(); <font color="#339966">//On lie un flux d'entr&eacute;e &agrave; notre Socket (pas de new car classe InputStream abstraite)</font>
	        breader=<font color="#0000FF">new</font> <font color="#FF0000">BufferedReader</font>(<font color="#0000FF">new</font> <font color="#FF0000">InputStreamReader</font>(input));
            <font color="#339966">// A partir du Stream de base on cr&eacute;e un InputStreamReader &agrave; partir duquel on cr&eacute;e un BufferedReader</font>
	    
            <font color="#339966">//Pareil avec les flux de sortie. Il n'est pas rare de voire ce genre de constructions en Java</font>
	        output=socket.getOutputStream();
	        bwriter=<font color="#0000FF">new</font> <font color="#FF0000">BufferedWriter</font>(<font color="#0000FF">new</font> <font color="#FF0000">OutputStreamWriter</font>(output));
	    
            <font color="#339966">//La requ&ecirc;te POST est form&eacute;e selon le standard HTTP/1.1</font>
	        req=<font color="#0000FF">new</font> <font color="#FF0000">String</font>("POST /"+url.getPath()+" HTTP/1.1\r\nHost: "+url.getHost()+"\r\n");
	        req=req.concat("Content-Type:application/x-www-form-urlencoded\r\n");
	        req=req.concat("Content-Length:"+(url.getQuery()).<font color="#0000FF">length</font>()+"\r\n");
            <font color="#339966">//Le prog plante s'il n'y a pas de donn&eacute;es (apr&egrave;s le ?)</font>
	    }
	    <font color="#0000FF">catch</font>(<font color="#FF0000">Exception</font> exp){exp.printStackTrace();<font color="#FF0000">System</font>.out.println(<font color="#FF0000">System</font>.err);}
<font color="#339966">        //Les exceptions permettent de g&eacute;rer les erreurs. Il est obligatoire de les mettre quand cela est demand&eacute;
        //Le compilateur dit automatiquement si une instruction n&eacute;cessite que l'on utilise une exception
        //et quel type d'exception doit &ecirc;tre utilis&eacute;</font>
    }
    
    <font color="#0000FF">public</font> static void main(<font color="#FF0000">String</font> args[]) <font color="#339966">//Le point d'entr&eacute;e</font>
    {
	    HttpClient connexion=<font color="#0000FF">null</font>;
	    <font color="#0000FF">if</font> (args.length==<font color="#FF0000">0</font> || args.<font color="#0000FF">length</font>><font color="#FF0000">2</font>) usage(); <font color="#339966">// si ya pas le bon nombre d'arguments on affiche l'aide</font>
        <font color="#0000FF">if</font> (args.length==<font color="#FF0000">1</font>) connexion=<font color="#0000FF">new</font> HttpClient(args[<font color="#FF0000">0</font>]); //Si ya un seul argument
	    <font color="#0000FF">if</font> (args.length==<font color="#FF0000">2</font>) connexion=<font color="#0000FF">new</font> HttpClient(args[<font color="#FF0000">0</font>],args[<font color="#FF0000">1</font>]); //Si yen a 2
        connexion.sendReq(); <font color="#339966">// Dans tout les cas (si on a les arguments) on envoie la requ&ecirc;te</font>
    }
}
</pre>
</body>
</html>